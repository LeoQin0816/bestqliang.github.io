<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>深入理解Java虚拟机(2)之十六-线程安全与锁优化</title>
      <link href="/2019/07/15/shen-ru-li-jie-java-xu-ni-ji-2-zhi-shi-liu-xian-cheng-an-quan-yu-suo-you-hua/"/>
      <url>/2019/07/15/shen-ru-li-jie-java-xu-ni-ji-2-zhi-shi-liu-xian-cheng-an-quan-yu-suo-you-hua/</url>
      
        <content type="html"><![CDATA[<h3 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h3><h4 id="一、Java语言中的线程安全"><a href="#一、Java语言中的线程安全" class="headerlink" title="一、Java语言中的线程安全"></a>一、Java语言中的线程安全</h4><ol><li><p><strong>不可变</strong></p><p>在Java语言中(特指<code>JDK 1.5</code>以后，即Java内存模型被修正之后的Java语言)，不可变(<code>Immutable</code>)的对象一定是线程安全的，无论是对象的方法实现还是方法的调用者，都不需要再采取任何的线程安全保障措施。</p></li><li><p><strong>绝对线程安全</strong></p><p>一个类要达到“不管运行时环境如何，调用者都不需要任何额外的同步措施”通常需要付出很大的，甚至有时候是不切实际的代价。在Java API中标注自己是线程安全的类，大多数都不是绝对的线程安全。</p></li><li><p><strong>相对线程安全</strong></p><p>相对的线程安全就是我们通常意义上所讲的线程安全，它需要保证对这个对象单独的操作是线程安全的，我们在调用的时候不需要做额外的保障措施，但是对于一些特定顺序的连续调用，就可能需要在调用端使用额外的同步手段来保证调用的正确性。</p><p>在Java语言中，大部分的线程安全类都属于这种类型，例如<code>Vector</code>、<code>HashTable</code>、<code>Collections</code>的<code>synchronizedCollection()</code>方法包装的集合等。</p></li><li><p><strong>线程兼容</strong></p><p>线程兼容是指对象本身并不是线程安全的，但是可以通过在调用端正确地使用同步手段来保证对象在并发环境中可以安全地使用，我们平常说一个类不是线程安全的，绝大多数时候指的是这一种情况。Java API中大部分的类都属于线程兼容的，如与前面的<code>Vector</code>和<code>HashTable</code>相对应的集合类<code>ArrayList</code>和<code>HashMap</code>等。</p></li><li><p><strong>线程对立</strong></p><p>线程对立是指无论调用端是否采取了同步措施，都无法在多线程环境中并发使用的代码。由于Java语言天生就具备多线程特性，线程对立这种排斥多线程的代码很少出现，而且通常都是有害的，应当尽量避免。</p></li></ol><h4 id="二、线程安全的实现方法"><a href="#二、线程安全的实现方法" class="headerlink" title="二、线程安全的实现方法"></a>二、线程安全的实现方法</h4><ol><li><p><strong>互斥同步(Mutual-Exclusion &amp; Synchronization)</strong></p><p>互斥同步是常见的一种并发正确性保证手段。同步时是指在多个线程并发访问共享数据时，保证共享数据在同一个时刻只能被一个(或者是一些，使用信号量的时候)线程使用。而互斥是实现同步是一种手段，临界区(<code>Critical Section</code>)、互斥量(<code>Mutex</code>)和信号量(<code>Semaphore</code>)都是主要的互斥实现方式。因此，在这4个字里面，互斥是因，同步是果；互斥是方法，同步时目的。</p><p>在Java中，最基本的互斥同步手段就是<code>synchronized</code>关键字，<code>synchronized</code>关键字经过编译之后，会在同步块的前后分别形成<code>monitorenter</code>和<code>monitorexit</code>这两个字节码指令，这两个字节码都需要一个<code>reference</code>类型的参数来指明要锁定和解锁的对象。如果Java程序中的<code>synchronized</code>明确指定了对象参数，那就是这个对象的<code>reference</code>；如果没有明确指定，那就根据<code>synchronized</code>修饰的是实例方法还是类方法，去取对应的对象实例或Class对象来作为锁对象。</p><p>根据虚拟机规范的要求，在执行<code>monitorenter</code>指令时，首先要尝试获取对象的锁。如果这个对象没被锁定，或者当前线程已经拥有了那个对象的锁，把锁的计数器加1，相应的，在执行<code>monitorexit</code>指令时会将锁计数器减1，当计数器为0时，锁就被释放。如果获取对象锁失败，那当前线程就要阻塞等待，直到对象锁被另外一个线程释放为止。</p><p>在虚拟机规范对<code>monitorenter</code>和<code>monitorexit</code>的行为描述中，有两点是需要特别注意的。首先，<code>synchronized</code>同步块对同一条线程来说是可重入的，不会出现自己把自己锁死的问题。其次，同步块在已进入的线程执行完之前，会阻塞后面其他线程的进入。Java的线程是映射到操作系统的原生线程之上，如果要阻塞或唤醒一个线程，都需要操作系统来帮忙完成，这就需要从用户态转换到核心态，因此状态转换需要耗费很多的处理器时间。对于代码简单的同步块(如被<code>synchronized</code>修饰的<code>getter()</code>或<code>setter()</code>方法)，状态转换消耗的时间有可能比用户代码执行的时间还要长。所以<code>synchronized</code>是Java语言中一个重量级(<strong>Heavyweight</strong>)的操作。虚拟机本身也会进行一些优化，譬如在通知操作系统阻塞线程之前加入一段自旋等待过程，避免频繁地切入核心态之中。</p><p>除了<code>synchronized</code>之外，还可以使用<code>java.util.concurrent</code>包中的重入锁(<code>ReentrantLock</code>)来实现同步，在基本用法上<code>ReentrantLock</code>和<code>synchronized</code>很相似，都具备一样的线程重入特性，只是代码写法上有点区别，一个表现为API层面的互斥锁(<code>lock()</code>和<code>unlock()</code>方法配合<code>try/finally</code>语句块来完成)，另一个表现为原生语法层面的互斥锁。不过相比<code>synchronized</code>，<code>ReentrantLock</code>增加了一些高级功能，主要有以下3项：</p><ul><li><strong>等待可中断</strong>：指当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，改为处理其他事情，可中断特性对处理执行时间非常长的同步块很有帮助。</li><li><strong>公平锁</strong>：指多个线程在等待同一个锁时，必须按照申请锁的时间顺序来依次获得锁；而非公平锁则不保证这一点，在锁被释放时，任何一个等待锁的线程都有机会获得锁，<code>synchronized</code>中的锁是非公平的，<code>ReentrantLock</code>默认情况下也是非公平的，但是可以通过带布尔值的构造函数要求使用公平锁。</li><li><strong>锁可以绑定多个条件</strong>：指一个<code>ReentrantLock</code>对象可以绑定多个<code>Condition</code>对象，而在<code>synchronized</code>中，锁对象的<code>wait()</code>和<code>notify()</code>或<code>notifyAll()</code>方法可以实现一个隐含的条件，如果要和多于一个的条件关联的时候，就不得不额外添加一个锁，而<code>ReentrantLock</code>则无须这么做，只需要多次调用<code>newCondition()</code>方法即可。</li></ul></li><li><p><strong>非阻塞同步(Non-Blocking Synchronization)</strong></p><p>互斥同步最主要的问题就是进行线程阻塞和唤醒所带来的性能问题，因此这种同步也被称为<strong>阻塞同步(Blocking Synchronization)</strong>。从处理问题的方式上说，互斥同步属于一种悲观的并发策略，总是认为只要不去做正确的同步措施(例如加锁)，那就肯定会出现问题，无论共享数据是否真的会出现竞争，它都要进行加锁(这里讨论概念模型，实际上虚拟机会优化掉很大一部分不必要的加锁)、用户态核心态转换、维护锁计数器和检查是否有被阻塞的线程需要唤醒等操作。随着硬件指令集的发展，有了另一个选择：基于冲突检测的乐观并发策略，通俗地说，就是先进行操作，如果没有其他线程争用共享数据，那操作就成功了；如果共享数据有争用，产生了冲突，那就再采取其他的补偿措施(最常见的补偿措施就是不断地重试，直到成功为止)，这种乐观的并发策略的许多实现不需要把线程挂起，因此这种同步操作称为非阻塞同步。</p><p>为什么说乐观并发策略需要“硬件指令集的发展”才能进行，因为我们需要操作和冲突检测具有原子性，只能靠硬件来完成这件事，硬件保证一个从语义上看起来需要多次操作的行为只通过一条处理器指令就能完成。这类指令常用的有：</p><ul><li><strong>测试并设置(Test-and-Set)</strong>。</li><li><strong>获取并增加(Fetch-and-Increment)</strong>。</li><li><strong>交换(Swap)</strong>。</li><li><strong>比较并交换(Compare-and-Swap，下文称为CAS)</strong>。</li><li><strong>加载链接/条件存储(Load-Linked/Store-Conditional)，下文称LL/SC</strong>。</li></ul><p>其中，前3条指令是20世纪就存在于大多数指令集中的处理器指令，后面两条是线代处理器新增的，而且这两条指令的功能和目的是类似的。</p><p><strong>CAS</strong>指令需要3个操作数，分别是内存位置(在Java中可以简单理解为变量的内存地址，用<strong>V</strong>表示)、旧的预期值(用<strong>A</strong>表示)、和新值(用<strong>B</strong>表示)。<strong>CAS</strong>指令执行时，当且仅当<strong>V</strong>符合旧预期值<strong>A</strong>时，处理器用新值<strong>B</strong>更新<strong>V</strong>的值，否则就不执行更新，但无论是否更新<strong>V</strong>的值，都会返回<strong>V</strong>的旧值，上述的处理过程是一个原子操作。</p><p>尽管<strong>CAS</strong>看起来很美，但显然这种操作无法涵盖互斥同步的所有使用场景，并且<strong>CAS</strong>从语义上来说也不是完美的，存在这一一个逻辑漏洞：如果一个变量<strong>V</strong>初次读取的时候是<strong>A</strong>值，并且在准备赋值的时候检查到它仍然为<strong>A</strong>值，那我们就能说它的值没有被其他线程修改过吗？如果在这段期间它的值曾经被改为B，后来又被改为<strong>A</strong>，那<strong>CAS</strong>操作就会误认为它从来没有被改变过，这个漏洞称为<strong>CAS</strong>操作的“<strong>ABA</strong>”问题。</p></li><li><p><strong>无同步方案</strong></p><p>要保证线程安全，并不是一定要进行同步，两者没有因果关系。同步只是保证共享数据争用时正确性的手段，如果一个方本来就不涉及共享数据，那自然就不需要任何同步措施保证其正确性，因此有一些代码天生就是线程安全的，以下为其中两类：</p><ul><li><p><strong>可重入代码(Reentrant Code)</strong>：这种代码也叫纯代码(<strong>Pure Code</strong>)，可以在代码执行的任何时刻中断它，转而去执行另一段代码(包括递归调用它本身)，而在控制权返回之后，原来的程序不会出现任何错误。相对线程安全，可重入性是更基本的特性，它可以保证线程安全，即所有可重入的代码都是线程安全的，但不是所有线程安全的代码都是可重入的。</p><p>可重入代码有一些共同的特性，例如不依赖存储在堆上的数据和公共的系统资源、用到的状态量都是由参数传入、不调用非可重入的方法等。我们可以通过一个简单的方法判断可重入性：如果一个方法，它的返回结果是可以预测的，只要输入了相同的数据，就能返回相同的结果，那就满足可重入的要求，当然也是线程安全的。</p></li><li><p><strong>线程本地存储(Thread Local Storage)</strong>：如果一段代码所需的数据必须与其他代码共享，那就看看这些共享数据的代码能否在同一个线程中执行？如果能保证，我们就可以把共享数据的可见范围限制在一个线程内，这样，无需同步也能保证线程之间不会出现数据争用的问题。</p><p>符合这种特性的应用并不少见，大部分使用消费队列的架构模式(如“生产者-消费者”模式)都会将产品的消费过程尽量在一个线程内消费完，其中一个最经典的应用实例就是经典Web交互模型中的“一个请求对应一个服务器线程”(<strong>Thread-per-Request</strong>)的处理方式，这种处理方式的广泛应用使得很多服务器Web应用都可以使用线程本地存储解决线程安全问题。</p></li></ul></li></ol><h3 id="锁优化"><a href="#锁优化" class="headerlink" title="锁优化"></a>锁优化</h3><h4 id="一、自旋锁与自适应自旋"><a href="#一、自旋锁与自适应自旋" class="headerlink" title="一、自旋锁与自适应自旋"></a>一、自旋锁与自适应自旋</h4><p>互斥同步中，对性能影响最大的是阻塞的实现，线程挂起和恢复都需要转入内核态中完成，这些操作给系统的并发能力产生很大的压力。同时，虚拟机的开发团队注意到在许多应用中，共享数据的锁定状态只会持续很短的时间，为了这段时间去挂起和恢复现场并不值得。如果物理机器上有一个以上的处理器，能让两个或两个以上的线程同时并行执行，我们就可以让后面请求锁的那个线程“稍等一下”，但不放弃处理器的执行时间，看看持有锁的线程是否很快会释放锁。为了让线程等待，我们只需让线程执行一个忙循环(自旋)，这项技术就是所谓的自旋锁。</p><p>自旋等待不能代替阻塞，且先不说对处理器数量的要求，自旋等待本身虽然避免了线程切换的开销，但它是要占用处理器时间的，因此，如果锁被占用的时间很短，自旋等待的效果就会非常好，反之，如果锁占用的时间很长，那么自旋的线程只会拜拜消耗处理器资源，而不会做任何有用的工作，反而会带来性能上的浪费。因此，自旋等待的时间必须要有一定的限度，如果自旋超过了限定的次数仍然没有成功获得锁，就应当使用传统的方式去挂起线程了。自旋次数的默认值是10次，用户可以使用参数<code>-XX:PreBlockSpin</code>来更改。</p><p>在<code>JDK 1.6</code>中引入了自适应的自旋锁。自适应意味着自旋的时间不再固定了，而是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定。如果在同一个锁对象上，自选等待刚刚成功获得过锁，并且持有锁的线程正在运行中，那么虚拟机就会认为这次自旋也很有可能会再次成功，进而它将允许自旋等待持续相对更长的时间，比如100次循环。另外，如果对于某个锁，自旋很少成功获得过，那在以后要获取这个锁时将可能省略掉自旋过程，以避免浪费处理器资源。有了自适应自旋，随着程序运行和性能监控信息的不断完善，虚拟机对程序锁的状况预测就会越来越准确。</p><h4 id="二、锁消除"><a href="#二、锁消除" class="headerlink" title="二、锁消除"></a>二、锁消除</h4><p>锁消除是指虚拟机即时编译器在运行时，对一些代码要求同步，但是被检测到不可能存在共享数据竞争的锁进行消除。锁消除的主要依据是来源逃逸分析的数据支持，如果判断在一段代码中，堆上的所有数据都不会逃逸出去从而被其他线程访问到，那就可以把它们当做栈上数据对待，认为它们是线程私有的，同步加锁自然无须进行。</p><h4 id="三、锁粗化"><a href="#三、锁粗化" class="headerlink" title="三、锁粗化"></a>三、锁粗化</h4><p>原则上，在编写代码的时候，总是推荐奖同步块的作用范围限制得尽量小——只在共享数据的实际作用域中才进行同步，这样是为了使得需要同步的操作数量尽可能变小，如果存在锁竞争，那等待锁的线程也能尽快拿到锁。</p><p>大部分情况下，上面的原则都是正确的，但是如果一系列的连续操作都是对同一个对象反复加锁和解锁，甚至加锁操作是出现在循环体中的，那即使没有线程竞争，频繁地进行互斥同步操作也会导致不必要的性能损耗。</p><h4 id="四、轻量级锁"><a href="#四、轻量级锁" class="headerlink" title="四、轻量级锁"></a>四、轻量级锁</h4><p>轻量级锁是<code>JDK 1.6</code>之中加入的新型锁机制，名字中的“轻量级”是相对于使用操作系统互斥量来实现的传统锁而言的，因此传统的锁机制就称为“重量级”锁。首先需要强调一点的是，轻量级锁并不是用来代替重量级锁的，它的本意是在没有多线程竞争的前提下，减少传统的重量级锁使用操作系统互斥量产生的性能消耗。</p><p>要理解轻量级锁以及后面的偏向锁的原理和运作过程，必须从<code>HotSpot</code>虚拟机的对象(对象头部分)的内存布局开始介绍。<code>HotSpot</code>虚拟机的对象头(<code>Object Header</code>)分为两部分，第一部分用于存储对象自身的运行时数据，如哈希码(<code>HashCode</code>)、GC分代年龄(<code>Generational GC age</code>)等，这部分数据的长度在32位和64位的虚拟机中分别为32bit和64bit，官方称<strong>Mark Word</strong>，它是实现轻量级锁和偏向锁的关键。另外一部分用于存储指向方法区对象类型数据的指针，如果是数组对象的话，还有一个额外的部分用于存储数组长度。</p><p>对象头信息是与对象自身定义的数据无关的额外存储成本，考虑到虚拟机的空间效率，<strong>Mark Word</strong>被设计成一个非固定的数据结构以便在极小的空间内存储尽量多的信息，它会根据对象的状态复用自己的存储空间。例如，在32位的<code>HotSpot</code>虚拟机中对象未被锁定的状态下，<strong>Mark Word</strong>的32bit空间中的25bit用于存储对象哈希码(<code>HashCode</code>)，4bit用于存储对象分代年龄，2bit用于存储锁标志位，1bit固定为0，在其他状态(轻量级锁定、重量级锁定、GC分代、可偏向)下对象的存储内容见表：</p><table><thead><tr><th align="left">存储内容</th><th align="left">标志位</th><th align="left">状态</th></tr></thead><tbody><tr><td align="left">对象哈希码、对象分代年龄</td><td align="left">01</td><td align="left">未锁定</td></tr><tr><td align="left">指向锁记录的指针</td><td align="left">00</td><td align="left">轻量级锁定</td></tr><tr><td align="left">指向重量级锁的指针</td><td align="left">10</td><td align="left">膨胀(重量级锁定)</td></tr><tr><td align="left">空，不需要记录信息</td><td align="left">11</td><td align="left">GC标记</td></tr><tr><td align="left">偏向线程ID、偏向时间戳、对象分代年龄</td><td align="left">01</td><td align="left">可偏向</td></tr></tbody></table><p>在代码进入同步块的时候，如果此同步对象没有被锁定(锁标志位为“01”状态)，虚拟机首先将在当前线程的栈帧中建立一个名为锁记录(<code>Lock Record</code>)的空间，用于存储锁对象目前的<strong>Mark Word</strong>的拷贝(官方把这份拷贝加了一个<code>Displaced</code>前缀，即<strong>Displaced Mark Word</strong>)，这时候线程堆栈与对象头的状态如图：</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81CAS%E6%93%8D%E4%BD%9C%E4%B9%8B%E5%89%8D%E5%A0%86%E6%A0%88%E4%B8%8E%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%8A%B6%E6%80%81.png?raw=true" alt="轻量级锁CAS操作之前堆栈与对象的状态"></p><p>然后，虚拟机将使用CAS操作尝试将对象的<strong>Mark Word</strong>更新为指向<code>Lock Record</code>的指针。如果这个更新动作成功了，那么这个线程就拥有了该对象的锁，并且对象<strong>Mark Word</strong>的锁标志位(<strong>Mark Word</strong>的最后2bit)将转变为“00”，即表示该对象处于轻量级锁定状态，这时候线程堆栈与对象头的状态如图：</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81CAS%E6%93%8D%E4%BD%9C%E4%B9%8B%E5%90%8E%E5%A0%86%E6%A0%88%E4%B8%8E%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%8A%B6%E6%80%81.png?raw=true" alt="轻量级锁CAS操作之后堆栈与对象的状态"></p><p>如果这个更新失败了，虚拟机首先会检查对象的<strong>Mark Word</strong>是否指向当前线程的栈帧，如果只说明当前线程已经拥有了这个对象的锁，那就可以直接进入同步块继续执行，否则说明这个对象已经被其他线程抢占 了，如果有两条以上的线程争用同一个锁，那轻量级锁就不再有效，要膨胀为重量级锁，锁标志位变为“10”，<strong>Mark Word</strong>中存储的就是指向重量级锁(互斥量)的指针，后面等待锁的线程也要进入阻塞状态。</p><p>上面描述的是轻量级锁的加锁过程，它的解锁过程也是通过CAS操作来进行的，如果对象的<strong>Mark Word</strong>仍然指向着线程的锁记录，那就用CAS操作把对象当前 <strong>Mark Word</strong>和线程中复制的<strong>Displaced Mark Word</strong>替换回来，如果替换成功，整个同步过程就完成了。如果替换失败，说明有其他线程尝试获取过该锁，那就要在释放锁的同时，唤醒被挂起的线程。</p><p>轻量级锁能提升同步性能的依据是“对于绝大部分的锁，在整个同步周期内都不存在竞争的”，这是一个经验数据。如果没有竞争，轻量级锁使用CAS操作避免互斥量是开销，但如果存在锁竞争，除了互斥量的开销外，还额外发生了CAS操作，因此在有竞争的情况下，轻量级锁会比传统的重量级锁更慢。</p><h4 id="五、偏向锁"><a href="#五、偏向锁" class="headerlink" title="五、偏向锁"></a>五、偏向锁</h4><p>偏向锁也是<code>JDK 1.6</code>中引入的一项锁优化，它的目的是消除数据在无竞争情况下的同步原语，进一步提高程序的运行性能。如果说轻量级锁是在无竞争的情况下使用CAS操作去消除同步使用的互斥量，那偏向锁就是在无竞争的情况下把整个同步都消除掉，连CAS操作都不做了。</p><p>偏向锁的“偏”，就是偏心的“偏”、偏袒的“偏”，它的意思是这个锁会偏向于第一个获得它的线程，如果在接下来的执行过程中，该锁没有被其他的线程获取，则持有偏向锁的线程将永远不需要再进行同步。</p><p>假设当前虚拟机启用了偏向锁，那么，当锁对象第一次被线程获取的时候，虚拟机将会把对象头中的标志位设为“01”，即偏向模式。同时使用CAS操作把获取到这个锁的线程的ID记录在对象的<strong>Mark Word</strong>之中，如果CAS操作成功，持有偏向锁的线程以后每次进入这个锁相关的同步块时，虚拟机都可以不再进行任何同步操作(例如<strong>Locking</strong>、<strong>Unlocking</strong>及对<strong>Mark Word</strong>的<strong>Update</strong>等)。</p><p>当有另外一个线程去尝试获取这个锁时，偏向模式就宣告结束。根据锁对象目前是否处于被锁定的状态，撤销偏向(<strong>Revoke Bias</strong>)后恢复到未锁定(标志位为“01”)或轻量级锁定(标志位为“00”)的状态，后续的同步操作就如上面介绍轻量级锁那样执行。偏向锁、轻量级锁的状态转化及对象<strong>Mark Word</strong>的关系如图：</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E5%81%8F%E5%90%91%E9%94%81%E3%80%81%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81%E7%9A%84%E7%8A%B6%E6%80%81%E8%BD%AC%E5%8C%96%E5%8F%8A%E5%AF%B9%E8%B1%A1MarkWord%E7%9A%84%E5%85%B3%E7%B3%BB.png?raw=true" alt="偏向锁、轻量级锁的状态转化及对象MarkWord的关系"></p><p>偏向锁可以提高带有同步但无竞争的程序性能。它同样是一个带有效益权衡(<strong>TradeOff</strong>)性质的优化，也就是说，它并不一定总对程序运行有利，如果程序中大多数的锁总是被多个不同的线程访问，那偏向模式就是多余的。在具体问题具体分析的前提下，有时候使用参数<code>-XX:-UseBiasedLocking</code>来禁止偏向锁优化反而可以提高性能。</p><hr><p>该文章来源《深入理解Java虚拟机》</p><hr><h3 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Java虚拟机(2)之十五-Java内存模型与线程</title>
      <link href="/2019/07/13/shen-ru-li-jie-java-xu-ni-ji-2-zhi-shi-wu-java-nei-cun-mo-xing-yu-xian-cheng/"/>
      <url>/2019/07/13/shen-ru-li-jie-java-xu-ni-ji-2-zhi-shi-wu-java-nei-cun-mo-xing-yu-xian-cheng/</url>
      
        <content type="html"><![CDATA[<h3 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h3><h4 id="1、主内存和工作内存"><a href="#1、主内存和工作内存" class="headerlink" title="1、主内存和工作内存"></a>1、主内存和工作内存</h4><p>Java内存模型的主要目标是定义程序中各个程序的访问规则，即在虚拟机中将变量存储到内存和从内存中取出变量这样的底层细节。此处的变量与Java编程的变量有所区别，它包括实例字段、静态字段和构成数组对象的元素，但不包含局部变量和方法参数，因为后者是线程私有，不会存在共享，自然也不会存在竞争问题。</p><p>Java内存模型规定所有变量都存储在主内存(<code>Main Memory</code>)中，每条线程还有自己的工作内存(<code>Working Memory</code>)，线程的工作内存中保存了被该线程使用到的变量的主内存副本拷贝，线程对变量的所有操作(读取、赋值等)都必须在工作内存中进行，而不能直接读写主内存的变量。不同线程之间也不能访问对方线程的变量，线程之间变量值的传递需要通过主内存来完成。如下图所示：</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E7%BA%BF%E7%A8%8B%E4%B8%BB%E5%86%85%E5%AD%98%E5%B7%A5%E4%BD%9C%E5%86%85%E5%AD%98.jpg?raw=true" alt="线程、主内存、工作内存"></p><h4 id="2、内存间交互操作"><a href="#2、内存间交互操作" class="headerlink" title="2、内存间交互操作"></a>2、内存间交互操作</h4><p>关于主内存和工作内存之间具体的交互协议，即一个变量是如何从主内存拷贝到工作内存、如何从工作内存同步到主内存之类的实现细节，Java定义了8种操作来完成，虚拟机实现时必须保证每种操作都是原子的、不可再分的。</p><ul><li><strong>lock(锁定)</strong>：作用于主内存的变量，它把一个变量标识成一条线程独占的状态。</li><li><strong>unlock(解锁)</strong>：作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。</li><li><strong>read(读取)</strong>：作用于主内存的变量，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的<strong>load</strong>动作使用。</li><li><strong>load(载入)</strong>：作用于工作内存的变量，它把<strong>read</strong>操作从主内存中得到的变量值放入工作内存的变量副本中。</li><li><strong>use(使用)</strong>：作用于工作内存的变量，它把工作内存的一个变量的值传递给执行引擎，每当虚拟机遇到一个需要使用到变量的值的字节码指令时将会执行这个操作。</li><li><strong>assign(赋值)</strong>：作用于工作内存的变量，它把一个从执行引擎接受到的值赋给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时都会执行这个操作。</li><li><strong>store(存储)</strong>：作用于工作内存的变量，它把工作内存中的一个变量的值传送到主内存中，以便所有的<strong>write</strong>工作使用。</li><li><strong>write(写入)</strong>：作用于主内存的变量，它把<strong>store</strong>操作从工作内存得到的变量的值放到主内存的变量中。</li></ul><p>Java内存模型还规定在执行上述8种操作时必须满足以下规则：</p><ul><li>不允许<strong>read</strong>和<strong>load</strong>、<strong>store</strong>和<strong>write</strong>操作之一单独出现，即不允许一个变量从主内存读取了但工作内存不接受，或者从工作内存发起回写了但主内存不接受的情况。</li><li>不允许一个线程丢弃它最近的<strong>assign</strong>操作，即变量在工作内存中修改了必须回写到主内存中。</li><li>不允许一个线程无原因地(未发生任何<strong>assign</strong>操作)把数据从工作内存同步到主内存。</li><li>一个新的变量只能在主内存中“诞生”，不允许在工作内存中使用一个未被初始化(<strong>load</strong>或<strong>assign</strong>)的变量，即对一个变量实施<strong>use</strong>、<strong>store</strong>操作之前，必须执行过<strong>assign</strong>和<strong>load</strong>操作。</li><li>一个变量同一时刻只允许一条线程对其进行<strong>lock</strong>操作，但<strong>lock</strong>操作可以被同一条线程重复执行多次，多次执行<strong>lock</strong>之后，只有执行相同次数的<strong>unlock</strong>操作，变量才会被解锁。</li><li>如果对一个变量执行<strong>lock</strong>操作，那将会清空工作内存中此变量的值，在执行引擎使用该变量之前，需要重新执行<strong>load</strong>或<strong>assign</strong>操作初始化变量的值。</li><li>如果一个变量事先没有被<strong>lock</strong>操作锁定，那就不允许对其进行<strong>unlock</strong>操作，也不允许去<strong>unlock</strong>一个被其他线程锁定的变量。</li><li>对一个变量执行<strong>unlock</strong>操作之前，必须把该变量同步回主内存(执行<strong>store</strong>、<strong>write</strong>操作)。</li></ul><h4 id="3、对于volatile型变量的特殊规则"><a href="#3、对于volatile型变量的特殊规则" class="headerlink" title="3、对于volatile型变量的特殊规则"></a>3、对于volatile型变量的特殊规则</h4><p>关键词<strong>volatile</strong>可以说是Java虚拟机提供的最轻量级的同步机制。</p><p>当一个变量定义为<strong>volatile</strong>之后，具备两个特性：</p><ul><li><p>第一是保证该变量对所有线程的可见性。这里的“可见性”是指当一条线程修改了这个变量的值，新值对于其他线程来说是可以立即得知的。而普通变量不能做到这一点，普通变量在线程之间传递都需要通过主内存来完成，例如，线程A修改了一个普通变量的值，然后向主内存回写，另一条线程B在线程A回写完成之后再从主内存进行读取，新值才对线程B可见。</p><p>由于<strong>volatile</strong>只保证可见性，在不符合以下两条规则的运算场景下，仍然要通过加锁(使用<strong>synchronized</strong>或<strong>java.util.concurrent</strong>中的原子类)来保证原子性。</p><ul><li>运算结果不依赖变量的当前值，或者保证只有单一的线程能够修改变量的值。</li><li>变量不需要与其他的状态变量共同参与不变约束。</li></ul></li><li><p>第二个语义是禁止指令重排优化，普通的变量仅仅会保证在该方法的执行过程中所有依赖赋值结果的地方都能获取正确的结果，而不能保证变量赋值操作的顺序与程序代码中执行顺序一致。因为一个线程的方法执行过程中无法感知到这点，这也是Java内存模型中描述的所谓“线程内表现为串行的语义”(<code>Within Thread As-If-Serial Semantics</code>)。</p></li></ul><p>Java内存模型对<strong>volatile</strong>变量定义的特殊规则。假定T代表一个线程，V和W分别代表两个<strong>volatile</strong>型变量，那么在进行<strong>read</strong>、<strong>load</strong>、<strong>use</strong>、<strong>assign</strong>、<strong>store</strong>和<strong>write</strong>操作时需要满足如下规则：</p><ul><li>只有当线程T对变量执行的前一个动作是<strong>load</strong>的时候，线程T才能对变量V执行<strong>use</strong>动作，并且，只有当线程T对变量V执行的后一个动作是<strong>use</strong>的时候，线程T才能对变量V执行<strong>load</strong>操作。线程T对变量V的<strong>use</strong>操作可以认为是和线程T对变量V的<strong>load</strong>、<strong>read</strong>动作相关联，必须连续一起出现。</li><li>只有当线程T对变量执行的前一个动作是<strong>assign</strong>的时候，线程T才能对变量V执行<strong>store</strong>动作，并且，只有当线程T对变量V执行的后一个动作是<strong>store</strong>的时候，线程T才能对变量V执行<strong>assign</strong>操作。线程T对变量V的<strong>assign</strong>操作可以认为是和线程T对变量V的<strong>store</strong>、<strong>write</strong>动作相关联，必须连续一起出现。</li><li>假定动作A是线程T对变量V实施的<strong>use</strong>或<strong>assign</strong>动作，假定动作F是和动作A相关联的<strong>load</strong>或<strong>store</strong>操作，假定动作P是和动作F相应的对变量V的<strong>read</strong>或<strong>write</strong>动作；类似的，假定动作B是线程T对变量W实施的<strong>use</strong>或<strong>assign</strong>动作，假定动作G是和动作B相关联的<strong>load</strong>或<strong>store</strong>操作，假定动作Q是和动作G相应的对变量V的<strong>read</strong>或<strong>write</strong>动作。如果A先于B，那么P先于Q。</li></ul><h4 id="4、对于long个double型变量的特殊规则"><a href="#4、对于long个double型变量的特殊规则" class="headerlink" title="4、对于long个double型变量的特殊规则"></a>4、对于long个double型变量的特殊规则</h4><p>Java内存模型要求<strong>lock</strong>、<strong>unlock</strong>、<strong>read</strong>、<strong>load</strong>、<strong>use</strong>、<strong>assign</strong>、<strong>store</strong>、<strong>write</strong>这8个操作都具有原子性，但对于64位的数据类型(long和double)，虚拟机允许将没有被<strong>volatile</strong>修饰的64位数据的读写操作划分为两次32位的操作来进行，即允许虚拟机实现选择可以不保证64位数据类型的<strong>load</strong>、<strong>store</strong>、<strong>read</strong>和<strong>write</strong>这4个操作的原子性，这点就是所谓long和double的非原子性协定。</p><h4 id="5、原子性、可见性与有序性"><a href="#5、原子性、可见性与有序性" class="headerlink" title="5、原子性、可见性与有序性"></a>5、原子性、可见性与有序性</h4><ul><li><p><strong>原子性(Atomicity)</strong>：由Java内存模型来直接保证的原子性变量操作包括<strong>read</strong>、<strong>load</strong>、<strong>use</strong>、<strong>assign</strong>、<strong>store</strong>、<strong>write</strong>，我们大致可以认为基本数据尅性的访问读写是具备原子性的。</p><p>如果应用场景需要一个更大范围的原子性保证，Java内存模型还提供了<strong>lock</strong>和<strong>unlock</strong>操作来满足这种需求，尽管虚拟机未把<strong>lock</strong>和<strong>unlock</strong>直接开放给用户使用，但是却提供了更高层次的字节码指令<strong>monitorenter</strong>和<strong>monitorexit</strong>来隐式地使用这两个操作，这两个字节码指令反映到Java代码中就是同步块——<strong>synchronized</strong>关键字，因此在<strong>synchronized</strong>块之间的操作也具备原子性。</p></li><li><p><strong>可见性(Visibility)</strong>：可见性是指当一个线程修改了共享变量的值，其他线程能够立刻得知这个修改。Java内存模型是通过在变量修改后将新值同步回主内存，在变量读取前从主内存刷新变量值这种依赖主内存作为传递媒介的方式实现可见性的，无论是普通变量还是<strong>volatile</strong>变量都是如此，普通变量和<strong>volatile</strong>变量的区别是，<strong>colatile</strong>特殊规则保证了新值能够立即同步回主内存，以及每次使用前立即从主内存刷新。因此，可以说<strong>volatile</strong>保证了多线程操作时变量的可见性，而普通变量不能保证这一点。</p><p>除了<strong>volatile</strong>，Java还有两个关键字可以实现可见性，即<strong>synchronized</strong>和<strong>final</strong>。</p></li><li><p><strong>有序性(Ordering)</strong>：Java程序中的有序性可以总结为一句话：如果在本线程内观察，所有操作都是有序的；如果在一个线程观察另一个线程，所有的操作都是无序的。前半句是指“线程内表现为串行的语义”，后半句是指“指令重排序”现象和“工作内存和主内存同步延迟的现象”。</p><p>Java提供<strong>volatile</strong>和<strong>synchronized</strong>来保证两个线程之间操作的有序性。</p></li></ul><h4 id="6、先行发生原则"><a href="#6、先行发生原则" class="headerlink" title="6、先行发生原则"></a>6、先行发生原则</h4><p>Java语言中的“先行发生”(<code>happen-before</code>)原则是判断数据是否存在竞争、线程是否安全的主要依据。</p><p>先行发生是Java内存模型中定义的两项操作之间的偏序关系，如果说操作A先行发生于操作B，其实就是说在发生操作B之前，操作A产生的影响能被操作B观察到，“影响”包括修改了内存找那个共享变量的值、发送了消息。调用了方法等。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 以下操作在线程A中执行</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 以下操作在线程B中执行</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 以下操作在线程C中执行</span>i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></code></pre><p>假设线程A的操作<code>i = 1;</code>先行发生于线程B的<code>j = 1;</code>的操作，那么可以确定，在线程B的操作执行完成之后，变量j的值一定是1，得出这个结论的依据有两个：一是根据先行发生原则，<code>i = 1;</code>的结果可以被观察到；二是线程C还没“登场”，线程A操作之后没有其他线程修改i的值。现在再来考虑线程C，依然保持线程A和线程B之间的先行发生关系，而线程C出现在线程A和线程B的操作之间，但是线程C与线程B没有先行发生关系，那i的值会是多少？答案是不确定的！1和2都有可能，因为线程C对变量i的影响可能会被线程B观察到，也可能不会，这时候线程B就存在读到过期数据的风险，不具备多线程安全性。</p><p>下面是Java内存模型“天然的”先行发生关系：</p><ul><li><strong>程序次序规则(Program Order Rule)</strong>：在一个线程内，按照程序代码顺序，书写在前面的操作先行发生于书写在后面的操作。准确地说，应该是控制流顺序而不是程序代码顺序，因为要考虑循环、分支等结构。</li><li><strong>管程锁定规则(Monitor Lock Rule)</strong>：一个<strong>unlock</strong>操作先行发生于后面对同一个锁的<strong>lock</strong>操作。这里必须强调同一个锁，而“后面”是指时间上的顺序。</li><li><strong>volatile变量规则(Volatile Variable Rule)</strong>：对一个<strong>volatile</strong>变量的写操作先行发生于后面对这个变量的读操作，这里的“后面”是指时间上的顺序。</li><li><strong>线程启动规则(Thread Start Rule)</strong>：Thread对象的<strong>start()</strong>方法先行发生于此线程的每一个动作。</li><li><strong>线程终止规则(Thread Termination Rule)</strong>：线程中的所有操作都先行发生于对此线程的终止检测，我们可以通过<strong>Thread.join()</strong>方法结束、<strong>Thread.isAlive()</strong>的返回值等手段检测到线程已终止执行。</li><li><strong>线程中断规则(Thread Interruption Rule)</strong>：对线程<strong>interrupt()</strong>方法的调用先行发生于被中断线程被中断线程的代码检测到中断事件的发生，可以通过<strong>Thread.interrupted()</strong>方法检测到是否中断。</li><li><strong>对象终结规则(Finalizer Rule)</strong>：一个对象的初始化完成(构造函数执行结束)先行发生于<strong>finalize()</strong>方法的开始。</li><li><strong>传递性(Transitivity)</strong>：如果操作A先行发生于操作B，操作B先行发生于操作C，那就可以得出操作A先行发生于操作C。</li></ul><h3 id="Java与线程"><a href="#Java与线程" class="headerlink" title="Java与线程"></a>Java与线程</h3><h4 id="1、线程的实现"><a href="#1、线程的实现" class="headerlink" title="1、线程的实现"></a>1、线程的实现</h4><p>线程是比进程更轻量的调度执行单位，线程的引入，可以把一个进程的资源分配和执行调度分开，各个线程既可以共享进程资源(内存地址、内存I/O等)，又可以独立调度(线程是CPU调度的基本单位)。</p><p>线程实现主要有3种方式：</p><h5 id="1-1、使用内核线程实现"><a href="#1-1、使用内核线程实现" class="headerlink" title="1.1、使用内核线程实现"></a><strong>1.1、使用内核线程实现</strong></h5><p>内核线程(<code>Kernel-Level Thread,KLT</code>)就是直接用操作系统内核支持的线程，这种线程由内核来完成线程切换，内核通过操纵调度器(<code>Scheduler</code>)对线程进行调度，并负责将线程任务映射到各个处理器上。每个内核线程课时视为内核的一个分身，这样操作系统就有能力同时处理多件事情，支持多线程的内核叫做多线程内核(<code>Multi-Threads Kernel</code>)。</p><p>程序一般不会直接去使用内核线程，而是去使用内核线程的一个高级接口——轻量级进程(<code>Light Weight Process,LWP</code>)，轻量级进程就是通常意义上的线程，由于每个轻量级进程都由一个内核线程支持，因此只有先支持内核线程，才有轻量级进程。这种轻量级进程与内核线程之间1:1的关系称为一对一的线程模型。如图。</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E5%86%85%E6%A0%B8%E7%BA%BF%E7%A8%8B.jpg?raw=true" alt="内核线程"></p><p>由于内核线程的支持，每个轻量级进程都能称为一个独立的调度单位，即使有一个轻量级进程在系统调用中阻塞，也不会影响整个进程继续工作，但是轻量级进程具有它的局限性：首先，由于基于内核线程实现的，所以各种线程操作，如创建、析构及同步，都需要进行系统调用。而系统调用的代价相对较高，需要在用户态(<code>User Mode</code>)和内核态(<code>Kernel Mode</code>)中来回切换。其次，每个轻量级进程都需要一个内核线程支持，因此轻量级进程需要消耗一定的内核资源，因此一个系统支持的轻量级进程的数量是有限的。</p><h5 id="1-2、使用用户线程实现"><a href="#1-2、使用用户线程实现" class="headerlink" title="1.2、使用用户线程实现"></a><strong>1.2、使用用户线程实现</strong></h5><p>从广义上来说，一个线程只要不是内核线程，就可以认为是用户线程(<code>User Thread,UT</code>)，因此，从这个定义上来说，轻量级进程也属于用户线程，但轻量级进程的实现始终是建立在内核之上的，许多操作需要系统调度，效率会受到一些限制。</p><p>狭义上的用户线程是指完全建立在用户空间的线程库上，系统内核不能感知线程的存在。用户线程的创建、同步、销毁和调度完全在用户态中完成，不需要内核的帮助，如果程序实现得当，这种线程不需要切换到内核态，因此操作可以非常快速且低消耗，也可以支持更大规模的线程数量，部分高性能数据库的多线程就是用户线程实现的。这种进程和用户线程之间1:N的关系称为一对多的线程模型。如图。</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E7%94%A8%E6%88%B7%E7%BA%BF%E7%A8%8B.jpg?raw=true" alt="用户线程"></p><p>使用用户线程的优势在于不需要内核的支持，劣势也在于没有内核的支持。所有线程操作都需要用户程序自己处理。</p><h5 id="1-3、使用用户线程加轻量级进程混合实现"><a href="#1-3、使用用户线程加轻量级进程混合实现" class="headerlink" title="1.3、使用用户线程加轻量级进程混合实现"></a><strong>1.3、使用用户线程加轻量级进程混合实现</strong></h5><p>在这种混合模式下，用户线程还是完全建立在用户空间，操作系统提供支持的轻量级进程则作为用户线程，和内核线程之间的桥梁，这样可以使用内核提供的线程调度功能及处理器映射，并且用户线程的系统调用要通过轻量级线程来完成，大大降低了整个进程被完全阻塞的风险。这种混合模式中，用户线程和轻量级进程的数量比是不确定的，即为N:M的关系。如图。</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F.jpg?raw=true" alt="混合模式"></p><h5 id="1-4、Java线程的实现"><a href="#1-4、Java线程的实现" class="headerlink" title="1.4、Java线程的实现"></a><strong>1.4、Java线程的实现</strong></h5><p>Java线程在<code>JDK 1.2</code>之前，是基于称为“绿色线程”(<code>Green Threads</code>)的用户线程实现的，而在<code>JDK 1.2</code>中，线程模型替换为基于操作系统原生线程模型来实现。因此，在目前的JDK版本中，操作系统支持怎样的线程模型，很大程度上决定了Java虚拟机的线程是怎样映射的，这点在不同的平台上没有办法达成一致，虚拟机规范中也并未限定Java线程需要使用哪种线程模型来实现。线程模型只对线程的并发规模和操作成本产生影响，对Java程序的编码和运行过程来说，这些差异都是透明的。</p><h4 id="2、Java线程调度"><a href="#2、Java线程调度" class="headerlink" title="2、Java线程调度"></a>2、Java线程调度</h4><ul><li><p><strong>协同式线程调度(Cooperative Threads-Scheduling)</strong>：线程的执行时间由线程本身来控制，线程把自己的工作执行完了以后，要主动通知系统切换到另外一个线程上。协同式多线程的最大好处是实现简单，而且由于线程要把自己的事情干完后才会进行线程切换，切换操作对线程自己是已知的，所以没有什么线程同步的问题。坏处也很明显：线程执行时间不可控，甚至如果一个线程编写有问题，一直不告知系统进行线程切换，那么程序就会一直阻塞在那里。</p></li><li><p><strong>抢占式线程调度(Preemptive Threads-Scheduling)</strong>：每个线程由系统来分配执行时间，线程的切换不由线程本身决定(在Java中，<code>Thread.yield()</code>可以让出执行时间，但是要获得执行时间的话，线程本身是没有什么办法的)。在这种实现线程调度的方式下，线程的执行时间是系统可控的，也不会有一个线程导致整个进程阻塞的问题，Java使用的线程调度方式就是抢占式调度。</p><p>虽然Java线程调度是系统自动完成的，但是我们还是可以“建议”系统给某些线程多分配一些时间，另外一些线程则可以少分配一些——这项操作可以通过设置线程优先级来完成。Java语言一共设置了10个级别的线程优先级(<code>Thread.MIN_PROPRITY</code>至<code>Thread.MAX_PROPRITY</code>)，在两个线程同时处于<code>Ready</code>状态时，优先级越高的线程越容易被系统选择执行。</p><p>不过，线程优先级并不是太靠谱，原因是Java的线程是通过映射到系统的原生线程上来实现的，所以线程调度最终还是取决于操作系统，虽然现在很多操作系统都提供线程优先级的概念，但是并不见得能与Java线程的优先级一一对应。另外优先级可能会被系统自动改变。</p></li></ul><h4 id="3、状态转换"><a href="#3、状态转换" class="headerlink" title="3、状态转换"></a>3、状态转换</h4><p>Java语言定义了5种线程状态：</p><ul><li><p><strong>新建(New)</strong>：创建后尚未启动的线程处于这种状态。</p></li><li><p><strong>运行(Runable)</strong>：<strong>Runable</strong>包括了操作系统线程状态中的<strong>Running</strong>和<strong>Ready</strong>，也就是处于此状态的线程有可能正在执行，也有可能正在等待CPU为它分配执行时间。</p></li><li><p><strong>无限期等待(Waiting)</strong>：处于这种状态的线程不会被分配CPU执行时间，他们要等待被其他线程显式地唤醒。以下方法会让线程陷入无限期的等待状态：</p><ul><li>没有设置<strong>Timeout</strong>参数的<strong>Object.wait()</strong>方法。</li><li>没有设置<strong>Timeout</strong>参数的<strong>Object.join()</strong>方法。</li><li><strong>LockSupport.park()</strong>方法。</li></ul></li><li><p><strong>限期等待(Timed Waiting)</strong>：处于这种状态的线程也不会被分配CPU执行时间，不过无须等待被其他线程显式地唤醒，在一定时间之后他们会由系统自动唤醒。以下方法会让线程进入限期等待状态：</p><ul><li><p><strong>Thread.sleep()</strong>方法。</p><ul><li>设置了<strong>Timeout</strong>参数的<strong>Object.wait()</strong>方法。</li><li>设置了<strong>Timeout</strong>参数的<strong>Object.join()</strong>方法。</li><li><strong>LockSupport.parkNanos()</strong>方法。</li><li><strong>LockSupport.parkUntil()</strong>方法。</li></ul></li></ul></li><li><p><strong>阻塞(Blocked)</strong>：线程被阻塞，“阻塞状态”与“等待状态”的区别是：“阻塞状态”在等待着获取到一个排它锁，这个事件将在另外一个线程放弃这个锁的时候发送；而“等待状态”则是在等待一段时间，或者唤醒动作的发生。在程序等待进入同步区域的时候，线程将进入这种状态。</p></li><li><p><strong>结束(Terminated)</strong>：已终止线程的线程状态，线程已经结束执行。</p></li></ul><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2%E5%85%B3%E7%B3%BB.png?raw=true" alt="线程状态转换关系"></p><hr><p>该文章来源《深入理解Java虚拟机》</p><hr><h3 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Java虚拟机(2)之十四-晚期(运行期)优化</title>
      <link href="/2019/07/12/shen-ru-li-jie-java-xu-ni-ji-2-zhi-shi-si-wan-qi-yun-xing-qi-you-hua/"/>
      <url>/2019/07/12/shen-ru-li-jie-java-xu-ni-ji-2-zhi-shi-si-wan-qi-yun-xing-qi-you-hua/</url>
      
        <content type="html"><![CDATA[<p>在部分商用虚拟机中，Java程序最初是通过解释器(<code>Interpreter</code>)进行解释执行的，当虚拟机发现某个方法或代码块的运行特别频繁时，就会把这些代码认定为“热点代码”，在运行时，会将这些代码编译成本地平台相关的机器码，并进行各种层次的优化，提高代码的执行效率。</p><h3 id="1、HotSpot虚拟机内的即时编译器"><a href="#1、HotSpot虚拟机内的即时编译器" class="headerlink" title="1、HotSpot虚拟机内的即时编译器"></a>1、HotSpot虚拟机内的即时编译器</h3><h4 id="1-1-解释器与编译器"><a href="#1-1-解释器与编译器" class="headerlink" title="1.1 解释器与编译器"></a>1.1 解释器与编译器</h4><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E8%A7%A3%E9%87%8A%E5%99%A8%E4%B8%8E%E7%BC%96%E8%AF%91%E5%99%A8%E7%9A%84%E4%BA%A4%E4%BA%92.png?raw=true" alt="解释器与编译器的交互"></p><p><code>HotSpot</code>虚拟机内置了两个即时编译器，分别为<code>Client Compiler</code>(<code>C1</code>)和<code>Server Compiler</code>(<code>C2</code>)，默认采用计时器与其中一个编译器直接配合的方式工作，虚拟机会根据自身版本与宿主机机器的硬件性能自动选择运行模式，用户也可以使用<code>-client</code>或<code>-server</code>强制指定虚拟机运行在哪个模式上。</p><p>无论采用的编译器是<code>Client Compiler</code>还是<code>Server Compiler</code>，解释器与虚拟机搭配使用的方式在虚拟机中称为“混合模式”(<code>Mix Mode</code>)，用户可以使用参数<code>-Xint</code>强制虚拟机运行在“解释模式”(<code>Interpreter Mode</code>)，这时编译器完全不介入工作，全部代码都使用解释方式执行。另外，也可以使用参数<code>-Xcomp</code>强制虚拟机运行与“编译模式”(<code>Compiled Mode</code>)，这时优先采用编译方式执行程序，但是解释器仍然要在编译无法进行的情况下介入执行过程。</p><p>由于即时编译器编译本地代码需要占用程序运行时间，要编译出优化程度更高的代码，所花费的时间更长；而且想要编译出优化程度更高的代码，解释器可能还要替编译器收集性能监控信息，这对解释器执行速度也有影响。为了在程序启动响应速度与运行效率之间达到最佳平衡，<code>HotSpot</code>虚拟机还会逐渐启用分层编译(<code>Tiered Compilation</code>)策略：</p><ul><li>第0层，程序解释执行，解释器不开启性能监控功能(<code>Profiling</code>)，可触发第1层编译。</li><li>第1层，也称C1编译，将字节码便以为本地代码，进行简单、可靠的优化，如有必要将加入性能监控的逻辑。</li><li>第2层(或2层以上)，也称C2编译，也是将字节码编译为本地代码，但是会启用一些编译耗时较长的优化，甚至会根据性能监控信息进行一些不可靠的激进优化。</li></ul><p>实施分层编译后，<code>Client Compiler</code>和<code>Server Compiler</code>将会同时工作，许多代码都可能会被多次编译，用<code>Client Compiler</code>获得更高的编译速度，用<code>Server Compiler</code>获取更好的编译质量，在解释执行的时候也无须再承担收集性能监控信息的任务。</p><h4 id="1-2-编译对象与触发条件"><a href="#1-2-编译对象与触发条件" class="headerlink" title="1.2 编译对象与触发条件"></a>1.2 编译对象与触发条件</h4><p>“热点代码”有两类：</p><ul><li>被多次调用的方法。</li><li>被多次执行的循环体。</li></ul><p>前者很好理解。后者是为了解决一个方法只被调用一次或者少量的几次，但是方法内部出现循环多次的循环体的问题，这样循环体的代码也被执行多次，这些代码也属于“热点代码”。</p><p>对于第一种情况，由于是方法调用触发的编译，因此编译器会以整个方法作为编译对象，这种编译也是虚拟机中标准的JIT编译方式。对于第二种情况，尽管编译动作是由循环体触发的，但是编译器仍然会以整个方法作为编译对象。这种编译方式因为编译发生在方法执行过程中，因此称之为栈上替换(<code>On Stack Replacement</code>，简称OSR编译，即栈帧还在栈上，方法就被替换了)。</p><p>判断一段代码是不是热点代码，这样的行为称为热点探测，目前主要的热点探测判定方式有两种：</p><ul><li>基于采样的热点探测(<code>Sample Based Hot Spot Detection</code>)：采用这种方式的虚拟机会周期性地检查各个线程的栈顶，如果发现某些方法经常出现在栈顶，那这个方法就是“热点代码”。基于采样的热点探测的好处是实现简单、高效，还可以很容易地获取方法调用关系(将调用堆栈展开即可)，缺点是很难精确地确定一个方法的热度，容易因为受到线程阻塞或别的外界因素影响而扰乱热点探测。</li><li>基于计数器的热点探测(<code>Counter Based Hot Spot Detection</code>)：采用这种方法会为每个方法(甚至是代码块)建立计数器，统计方法的执行次数，如果执行次数超过一定的阈值就认为它是“热点代码”。这种统计方法实现起来麻烦一些，需要为每个方法建立并维护计数器，而且不能直接获取到方法的调用关系，但是统计结果相对来说更加精确和严谨。</li></ul><p><code>HotSpot</code>虚拟机使用的是第二种热点探测，为每种方法准备了两类计数器：</p><ul><li><p>方法调用计数器(<code>Invocation Counter</code>)：用于统计方法被调用的次数，默认阈值在<code>Client</code>下是1500次，在<code>Server</code>下是10000次，这个阈值可以通过<code>-XX:CompileThreshold</code>来人为设定。</p><p>方法调用计数器不是方法被调用的绝对次数，而是一个相对的执行频率，即一段时间内方法被调用的次数。当超过一定的时间限度，如果方法的调用次数仍然不足以让它提交给即时编译器编译，这个过程称为方法调用计数器热度的衰减(<code>Counter Decay</code>)，这段时间就称为次方法统计的半衰周期(<code>Counter Half Life Time</code>)，进行热度衰减的动作是在虚拟机进行垃圾收集时顺便进行的，可以使用<code>-XX:-UseCounterDecay</code>来关闭热度衰减，这样统计的是方法调用的绝对次数，这样，系统运行时间够长，绝大部分方法都会被编译成本地代码。另外，可以用<code>-XX:CounterHalfLifeTime</code>设置半衰期的时间，单位是秒。</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E8%AE%A1%E6%95%B0%E5%99%A8.jpg?raw=true" alt="方法调用计数器"></p></li></ul><ul><li><p>回边计数器，作用是统计一个方法中循环体代码执行的次数，在字节码中遇到控制流向后跳转的指令称为“回边”(<code>Back Edge</code>)，回边计数器的目的就是触发OSR编译。</p><p>需要通过<code>-XX:OnStackReplacePercentage</code>来间接调整回边计数器的阈值，计算公式如下。</p><ul><li><p><code>Client</code>模式下：</p><p><strong>方法调用计数器阈值(CompileThreshold) X OSR比率(OnStackReplacePercentage) / 100</strong></p><p>其中<code>OnStackReplacePercentage</code>默认值为933，如果都取默认值，那<code>Client</code>模式虚拟机的回边计数器的阈值为13995。</p></li><li><p><code>Server</code>模式下：</p><p><strong>方法调用计数器阈值(CompileThreshold) X (OSR比率(OnStackReplacePercentage) - 解释器监控比率(InterpreterProfilePercentage)) / 100</strong></p><p>其中<code>OnStackReplacePercentage</code>默认值为140，<code>InterpreterProfilePercentage</code>默认值为33，如果都取默认值，那<code>Server</code>模式虚拟机回边计数器的阈值为10700。</p></li></ul></li></ul><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E5%9B%9E%E8%BE%B9%E8%AE%A1%E6%95%B0%E5%99%A8.jpg?raw=true" alt="回边计数器"></p><hr><p>该文章来源《深入理解Java虚拟机》</p><hr><h3 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Java虚拟机(2)之十三-虚拟机字节码执行引擎</title>
      <link href="/2019/07/10/shen-ru-li-jie-java-xu-ni-ji-2-zhi-shi-san-xu-ni-ji-zi-jie-ma-zhi-xing-yin-qing/"/>
      <url>/2019/07/10/shen-ru-li-jie-java-xu-ni-ji-2-zhi-shi-san-xu-ni-ji-zi-jie-ma-zhi-xing-yin-qing/</url>
      
        <content type="html"><![CDATA[<h2 id="运行时栈帧结构"><a href="#运行时栈帧结构" class="headerlink" title="运行时栈帧结构"></a>运行时栈帧结构</h2><p>栈帧(<code>Stack Frame</code>)是用于支持虚拟机进行方法调用和方法执行的数据结构，它是虚拟机运行时数据区中的虚拟机栈(<code>Virtual Machine Stack</code>)的栈元素。栈帧存储了方法的局部变量表、操作数栈、动态连接和方法返回地址等信息。每一个方法从调用开始至执行完成的过程，都对应着一个栈帧在虚拟机栈里面从入栈到出栈的过程。</p><p>在编译程序代码的时候，栈帧中需要多大的局部变量表，多深的操作数栈都已经完全确定了，并且写入到方法表的Code属性之中，因此一个栈帧需要分配多少内存，不会受到程序运行期变量数据的影响，而仅仅取决于具体的虚拟机实现。</p><p>一个线程中的方法调用链可能会很长，很多方法都同时处于执行状态。对于执行引擎来说，在活动线程中，只有位于栈顶的方法称为当前方法(<code>Current Method</code>)。执行引擎运行的所有字节码指令都只针对当前栈帧进行操作。</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E6%A0%88%E5%B8%A7%E7%9A%84%E6%A6%82%E5%BF%B5%E7%BB%93%E6%9E%84.png?raw=true" alt="栈帧的概念结构"></p><h4 id="1、局部变量表"><a href="#1、局部变量表" class="headerlink" title="1、局部变量表"></a>1、局部变量表</h4><p>局部变量表(<code>Local Variable table</code>)是一组变量值存储空间，用于存放方法参数和方法内部定义的局部变量。在Java程序编译为Class文件时，就在方法的Code属性的<code>max_locals</code>数据项中确定了该方法所需要分配的局部变量表的最大容量。</p><p>局部变量表的容量以变量槽(<code>Variable Slot</code>)为最小单位，虚拟机规范中并没有明确指明一个<code>Slot</code>应占用的内存空间大小，只是很有导向性地说道每个<code>Slot</code>都应该能存放一个<code>boolean</code>、<code>byte</code>、<code>char</code>、<code>short</code>、<code>int</code>、<code>float</code>、<code>reference</code>或<code>returnAddress</code>类型的数据，这8种数据类型，都可以使用32位或更小的物理内存来存放。</p><p>Java中占用32位以内的数据类型有<code>boolean</code>、<code>byte</code>、<code>char</code>、<code>short</code>、<code>int</code>、<code>float</code>、<code>reference</code>和<code>returnAddress</code>8种类型。<code>reference</code>类型表示对一个对象实例的引用，虚拟机规范既没有说明它的长度，也没有明确指出这种引用应有怎样的结构。但一般来说，虚拟机实现至少都应当能通过这个引用做到两点：</p><ul><li>一是从此引用中直接或间接地查找到对象在Java堆中的数据存放的起始地址索引；</li><li>二是此引用中直接或间接地查找到对象所属数据类型在方法区中的存储的类型信息，否则无法实现Java语言规范中定义的语法约束约束。</li></ul><p><code>returnAddress</code>类型目前很少见了，它为字节码指令jsr、jsr_w和ret服务的，执行一条字节码指令的地址，很古老的Java虚拟机曾经使用这几条指令来实现异常处理，现在已经由异常表代替。</p><p>Java语言中明确的64位数据类型只有<code>long</code>和<code>double</code>两种，虚拟机会以高位对齐的方式为其分配两个连续的<code>Slot</code>空间。</p><p>虚拟机通过索引定位的方式使用局部变量表，索引值的范围是从0开始至局部变量表的最大的<code>Slot</code>数量。如果访问的是32位的数据类型的变量，索引n就代表了使用第n个<code>Slot</code>，如果是64位数据的两个<code>Slot</code>，则说明会同时使用n和n+1两个<code>Slot</code>，并且不允许采用任何方式单独访问其中某一个，Java虚拟机规范要求如果遇到这种操作的字节码序列，虚拟机应该在类加载的校验阶段抛出异常。</p><p>在执行方法时，虚拟机是使用局部变量表完成参数值到参数变量列表的传递过程的，如果执行的是实例方法(非static 的方法)，局部变量表中第0位索引的<code>Slot</code>默认是用于传递方法所属对象实例的引用，在方法中可以通过关键字“this”来访问到这个隐含的参数。其余参数则按照参数表的顺序排列，占用从1开始的局部变量<code>Slot</code>，参数表分配完毕后，再根据方法体内部定义的变量顺序和作用域分配其余的<code>Slot</code>。</p><p>局部变量表中的<code>Slot</code>是可以重用的，方法体中定义的变量，其作用域并不一定会覆盖整个方法体，如果当前字节码PC计数器的值已经超出了某个变量的作用域，那这个变量对应的<code>Slot</code>就可以交给其他变量使用。副作用就是某些情况下，<code>Slot</code>复用会直接影响到系统的垃圾收集行为。</p><h4 id="2、操作数栈"><a href="#2、操作数栈" class="headerlink" title="2、操作数栈"></a>2、操作数栈</h4><p>操作数栈(<code>Operand Stack</code>)也常称为操作栈，它是一个后入先出(<code>Last In First Out</code>，<code>LIFO</code>)栈。操作数栈的最大深度也是在编译的时候写入到Code属性的max_stacks数据项中。操作数栈的每一个元素都可以是任意的Java数据类型，包括<code>long</code>和<code>double</code>。32位数据类型所占的栈容量为1，64位数据类型所占的栈容量为2.在方法执行的任何时候，操作数栈的深度都不会超过max_stacks数据项中设定的最大值。</p><p>当一个方法刚刚开始执行的时候，这个方法的操作数栈是空的，在方法的执行过程中，会有各种字节码指令往操作数栈中写入和提取内容，也就是出栈/入栈操作。例如，在做算术运算的时候是通过操作数栈来进行的，又或者在调用其他方法的时候是通过操作数栈来进行参数传递的。</p><h4 id="3、动态连接"><a href="#3、动态连接" class="headerlink" title="3、动态连接"></a>3、动态连接</h4><p>每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态连接(<code>Dynamic Linking</code>)。Class文件的常量池中存有大量的符号引用，字节码中的方法调用指令就以常量池中指向方法的符号引用作为参数。这些符号引用一部分会在类加载阶段或者第一次使用的时候就转化为直接引用，这种转化成为静态解析。另外一部分将在每一次运行期间转化为直接引用，这部分成为动态连接。</p><h4 id="4、方法返回地址"><a href="#4、方法返回地址" class="headerlink" title="4、方法返回地址"></a>4、方法返回地址</h4><p>当一个方法开始执行后，只有两种方式可以退出这个方法。</p><ul><li>第一种是执行引擎遇到任意方法返回的字节码指令，这个时候会有返回值传递到上层的方法调用者，是否有返回值和返回值的类型将根据遇到何种方法返回指令来决定，这种退出方式成为正常完成出口(<code>Normal Method Invocation Completion</code>)。</li><li>另一种退出方式是在方法执行过程中遇到了异常，并且这个异常没有在方法体内得到处理，无论是Java虚拟机内部产生的异常，还是代码中使用athrow字节码指令产生的异常，只要在本方法的异常表没有搜索到匹配的异常处理器，就会导致方法退出，这种退出方法方式称为异常完成出口(<code>Abrupt Method Invocation Completion</code>)。一个方法使用异常完成出口的方式退出，是不会给它的上层调用者产生任何返回值的。</li></ul><p>在方法退出后，都需要返回方法被调用的位置，程序才能继续执行，方法返回时可能需要在栈帧中保存一些信息，用来帮助恢复它的上层方法的执行状态。一般，方法正常退出时，调用者的PC计数器的值可以作为返回地址，栈帧中很可能保存这个计数器值。而方法异常退出时，返回地址是要通过异常处理器表来确定的，栈帧中一般不会保存这部分信息。</p><p>方法退出的过程实际上就等于把当前栈帧出栈，因此退出时可能执行的操作有：恢复上层方法的局部变量表和操作数栈，把返回值压入调用者栈帧的操作数栈中，调整PC计数器的值以指向方法调用指令后面的一条指令等。</p><h4 id="5、附加信息"><a href="#5、附加信息" class="headerlink" title="5、附加信息"></a>5、附加信息</h4><p>虚拟机规范允许具体的虚拟机实现增加一些规范里没有的描述的信息到栈帧之中，例如与调试相关的信息，这部分信息完全取决于具体的虚拟机实现。</p><h3 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h3><p>方法调用并不等于方法执行，方法调用阶段唯一的任务就是确定被调用方法的版本(即调用哪一个方法)，暂时还不涉及方法内部的具体运行过程。</p><h4 id="1、解析"><a href="#1、解析" class="headerlink" title="1、解析"></a>1、解析</h4><p>所有方法调用的目标方法在Class文件里面都是一个常量池中的符号引用，在类加载的解析阶段，会将其中的一部分符号引用转化为直接引用，这种解析能成立的前提是：方法在程序真正运行之前就有一个可确定的调用版本，并且这个方法的调用版本在运行期是不可改变的。也就是调用目标在程序代码写好、编译器进行编译时就必须确定下来。这类方法的调用称为解析(<code>Resolution</code>)。</p><p>符合“编译期可知，运行期不可变”这个要求的方法，主要包括静态方法和私有方法两大类，前者与类型直接关联，后者在外部不可被访问，这两种方法各自的特点决定了它们都不可能通过继承或别的方法重写其他版本，因此适合在类加载阶段进行解析。</p><p>与之相对应的是，在Java虚拟机里面提供了5条方法调用字节码指令，分别如下。</p><ul><li><code>invokestatic</code>：调用静态方法。</li><li><code>invokespecial</code>：调用实例构造器<init>方法、私有方法和父类方法。</init></li><li><code>invokevirtual</code>：调用所有的虚方法。</li><li><code>invokeinterface</code>：调用接口方法，会在运行时再确定一个实现此接口的对象。</li><li><code>invokedynamic</code>：现在运行时动态解析出调用点限定符所引用的方法，然后再执行该方法，在此之前的4条调用指令，分派逻辑是固化在Java虚拟机内部的，而该方法指令的分派逻辑是由用户所设定的引导方法决定的。</li></ul><p>只要能被<code>invokestatic</code>和<code>invokespecial</code>指令调用的方法，都可以在解析阶段中确定唯一的调用版本，称为非虚方法，与之相反，其他方法称为虚方法(除去final方法)。</p><p>解析调用一定四个静态的过程，在编译期间就完全确定，在类装载的解析阶段就会把涉及的符号引用全部转变为可确定的直接引用，不会延迟到运行期再去完成。而分派(<code>Dsipatch</code>)调用则可能是静态的也可能是动态的，根据分派依据的宗量数可分为单分派和多分派。这两类分派方式的两两组合就构成了静态单分派、静态多分派、动态单分派、动态多分派4种分派组合情况。</p><h4 id="2、分派"><a href="#2、分派" class="headerlink" title="2、分派"></a>2、分派</h4><h5 id="2-1-静态分派"><a href="#2-1-静态分派" class="headerlink" title="2.1  静态分派"></a>2.1  静态分派</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 方法静态分派演示 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticDispatch</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Woman</span> <span class="token keyword">extends</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>Human guy<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello,guy!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>Man guy<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello,gentleman!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>Woman guy<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello,lady!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Human man <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Human woman <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Woman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StaticDispatch staticDispatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaticDispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        staticDispatch<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span>man<span class="token punctuation">)</span><span class="token punctuation">;</span>        staticDispatch<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span>woman<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>运行结果：hello<span class="token punctuation">,</span>guy<span class="token operator">!</span>hello<span class="token punctuation">,</span>guy<span class="token operator">!</span></code></pre><p><code>Human man = new Man();</code></p><p>上面的<code>Human</code>称为变量的静态类型(<code>Static Type</code>)，或者叫做外观类型(<code>Apparent Type</code>)，后面的<code>Man</code>称为变量的实际类型(<code>Actual Type</code>)，静态类型和实际类型在程序中都可以发生一些变化，区别是静态类型的变化仅仅在使用时发生，变量本身的静态类型不会被改变，并且最终的静态类型是在编译期可知的；而实际类型变化的结果在运行期才可确定，编译器在编译程序的时候并不知道一个对象的实际类型是什么。例如以下代码“</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 实际类型变化</span>Human man <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>man <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Woman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 静态类型变化</span>staticDispatch<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Man<span class="token punctuation">)</span> man<span class="token punctuation">)</span><span class="token punctuation">;</span>staticDispatch<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Woman<span class="token punctuation">)</span> man<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面演示案例中，<code>man</code>和<code>woman</code>是两个静态类型相同而实际类型不同的变量，但虚拟机(准确说是编译器)在重载时是通过参数的静态类型而不是实际类型作为判断依据的。而且静态类型是编译期可知的，因此，在编译阶段，Javac编译器会根据参数的静态类型决定使用哪个重载版本，所以选择<code>sayHello(Human)</code>作为调用目标，并把这个方法的符号引用写到<code>main()</code>方法里的两条<code>invokevirtual</code>指令的参数中。</p><p>所有依赖静态类型来定位方法执行版本的分派动作称为静态分派。静态分派的典型应用就是方法重载。静态分派发生在编译阶段，因此确定静态分派的动作实际上不是由虚拟机来执行的。另外，编译器虽然能确定出方法的重载版本，但在很多情况下这个重载版本不是“唯一的”，往往只能确定一个“更加合适的”版本。产生模糊的主要原因是字面量不需要定义，所以字面量没有显式的静态变量，它的静态类型只能通过语言上的规则去理解和推断。如已下代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> jvm<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Overload</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>Object arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello object"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello int"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token keyword">long</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello long"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>Character arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello Character"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token keyword">char</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello char"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello char..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>Serializable arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello Serializable"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面代码运行后输出：</p><p><code>hello char</code></p><p><code>‘a’</code>是一个<code>char</code>类型的数据，自然寻找参数类型为<code>char</code>的重载方法，如果注释掉<code>sayHello(char arg)</code>方法，那么输出会变成：</p><p><code>hello int</code></p><p>这是发生一次自动类型转换，<code>‘a’</code>除了可以代表一个字符串，还可以代表数字97。继续注释掉<code>sayHello(int arg)</code>方法，输出变成：</p><p><code>hello long</code></p><p>这时发生两次自动类型转换，<code>’a’</code>转型为整数97之后，进一步转型为长整数97L，匹配<code>long</code>的重载。实际上自动转型还能继续发生多次，按照<code>char-&gt;int-&gt;long-&gt;float-&gt;double</code>的顺序转型进行匹配。但不会匹配到<code>byte</code>和<code>short</code>类型的重载，因为<code>char</code>到<code>byte</code>或<code>short</code>的转型是不安全的。注释掉<code>sayHello(long arg)</code>,输出结果变为：</p><p><code>hello Character</code></p><p>这时发生一次自动装箱，<code>‘a’</code>被包装为它的封装类型<code>java.lang.Character</code>，所以匹配到了参数类型为<code>Character</code>的重载，继续注释<code>sayHello(Character arg)</code>方法，输出变成：</p><p><code>hello Serializable</code></p><p>因为<code>java.lang.Serializable</code>是<code>java.lang.Character</code>类实现的一个接口，当自动装箱之后还找不到装箱类，但是找到装箱类实现了的接口类型，所以紧接着又发生一次自动转型。<code>char</code>可以转型成<code>int</code>，但是<code>Character</code>是绝对不会转型为<code>Integer</code>的，它只能安全地转型为它实现的接口类型或父类。继续注释掉<code>sayHello(Serializable arg)</code>方法，输出变为：</p><p><code>hello object</code></p><p>注释<code>sayHello(Object arg)</code>，输出变为：</p><p><code>hello char…</code></p><h5 id="2-2-动态分派"><a href="#2-2-动态分派" class="headerlink" title="2.2 动态分派"></a>2.2 动态分派</h5><p>动态分派和多态性的另一个重要体现——重写(<code>Override</code>)有着很密切的关联。如下代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 方法动态分派演示 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicDispatch</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"man say hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Woman</span> <span class="token keyword">extends</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"woman say hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>Human guy<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello,guy!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>Man guy<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello,gentleman!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>Woman guy<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello,lady!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Human man <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Human woman <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Woman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        man<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        woman<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        man <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Woman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        man<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>运行结果：man say hellowoman say hellowoman say hello</code></pre><h5 id="2-3-单分派与多分派"><a href="#2-3-单分派与多分派" class="headerlink" title="2.3 单分派与多分派"></a>2.3 单分派与多分派</h5><p>根据分派基于多少种宗量，可以将分派划分为单分派和多分派两种。单分派是根据一个宗量对目标方法进行选择，多分派则是根据多于一个宗量对于目标方法进行选择。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> jvm<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 单分派、多分派演示 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dispatch</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">QQ</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">_360</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hardChoice</span><span class="token punctuation">(</span>QQ arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"father choose qq"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hardChoice</span><span class="token punctuation">(</span>_360 arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"father choose 360"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hardChoice</span><span class="token punctuation">(</span>QQ arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"son choose qq"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hardChoice</span><span class="token punctuation">(</span>_360 arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"son choose 360"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Father father <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Father son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        father<span class="token punctuation">.</span><span class="token function">hardChoice</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">_360</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        son<span class="token punctuation">.</span><span class="token function">hardChoice</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">QQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>运行结果：father choose <span class="token number">360</span>son choose qq</code></pre><p>编译阶段编译器的选择过程，也就是静态分派的过程。这时选择目标方法的依据有两点，一是静态类型是<code>Father</code>还是<code>Son</code>，二是方法参数是<code>QQ</code>还是<code>360</code>。选择结果的最终产物是产生了两条<code>invokevirtual</code>指令，这两条指令的参数分别为常量池中指向<code>Father.hardChoice(360)</code>及<code>Father.hardChoice(QQ)</code>方法的符号引用。因为是根据两个宗量进行选择，所以Java语言的静态分派属于多分派类型。</p><p>运行阶段虚拟机的选择，也就是动态分派的过程，在执行<code>son.hardChoice(new QQ());</code>时，准确地说是在执行这句代码所对应的<code>invokevirtual</code>指令时，由于编译期已经决定目标签名必须为<code>hardChoice(QQ)</code>，虚拟机此时不会关心传递过来的参数<code>QQ</code>到底是<code>腾讯QQ</code>还是<code>奇瑞QQ</code>，因为这时参数的静态类型、实际类型都对方法的选择不会构成任何影响，唯一可以影响虚拟机选择的因素只有此方法的接受者的实际类型是<code>Father</code>还是<code>Son</code>。因为只有一个宗量作为选择依据，所以Java语言的动态分派属于单分派类型。</p><h5 id="2-4-虚拟机动态分派的实现"><a href="#2-4-虚拟机动态分派的实现" class="headerlink" title="2.4 虚拟机动态分派的实现"></a>2.4 虚拟机动态分派的实现</h5><p>虚拟机在类的方法区建立一个虚方法表(<code>Virtual Method table</code>，也称为<code>vtable</code>，与此对应的，在<code>invokeinterface</code>执行时也会用到接口方法表——<code>Interface Method table</code>，也称为<code>itable</code>)，使用虚方法表索引来代替元数据查找以提高性能。</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E8%99%9A%E6%96%B9%E6%B3%95%E8%A1%A8.png?raw=true" alt="虚方法表"></p><p>虚方法表中存放着各个方法的实际入口地址。如果某个方法在子类中没有被重写，那么子类的虚方法表里面的地址入口和父类相同的地址入口是一致的，都指向父类的实现入口。如果子类重写了这个方法，子类方法表中的地址将会替换为指向子类实现版本的入口地址。</p><p>如图，<code>Son</code>重写了来自<code>Father</code>的全部方法，因此<code>Son</code>的方法表没有指向<code>Father</code>类型数据的箭头。但是<code>Son</code>和<code>Father</code>都没有重写来自<code>object</code>的方法，所以他们的方法表中所有从<code>Object</code>继承来的方法都指向了<code>Object</code>的数据类型。</p><h3 id="基于栈的字节码解释执行引擎"><a href="#基于栈的字节码解释执行引擎" class="headerlink" title="基于栈的字节码解释执行引擎"></a>基于栈的字节码解释执行引擎</h3><h4 id="1、解释执行"><a href="#1、解释执行" class="headerlink" title="1、解释执行"></a>1、解释执行</h4><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B.png?raw=true" alt="编译过程"></p><p>大部分的程序代码到物理机的目标代码或虚拟机能执行的指令集之前，都需要经过上图的各个步骤。上图的下面那条分支，就是传统编译原理中程序代码到目标机器代码的生成过程，中间那条分支，就是解释执行的过程。</p><p>Java语言中，Javac编译器完成了程序代码经过词法分析、语法分析、语法分析到抽象语法树，再遍历语法树生成线性的字节码指令流的过程。因为这一部分动作是在Java虚拟机之外进行的，而解释器在虚拟机的内部，所以Java程序的编译就是半独立的实现。</p><h4 id="2、基于栈的指令集与基于寄存器的指令集"><a href="#2、基于栈的指令集与基于寄存器的指令集" class="headerlink" title="2、基于栈的指令集与基于寄存器的指令集"></a>2、基于栈的指令集与基于寄存器的指令集</h4><p>Java编译器输出的指令流，基本上是基于栈的指令集架构(<code>Instruction Srt Architecture,ISA</code>)，指令流中的指令大部分都是零地址指令，它们依赖操作数栈进行工作。与之相对的另一套常用的指令集架构是基于寄存器的指令集，最典型的就是x86的二地址指令集，通俗点就是现在我们主流PC机中直接支持的指令集架构，这些指令依赖寄存器进行工作。那么它们的区别是什么呢。</p><p>举个简单的例子，分别用这两种指令集计算“1+1”的结果，基于栈的指令集会是这样：</p><pre class=" language-java"><code class="language-java">iconst_1iconst_1iaddistore_0</code></pre><p>两条<code>iconst_1</code>指令连续把两个常量1压入栈后，<code>iadd</code>指令把栈顶的两个值出栈、相加，然后把结果放回栈顶，最后<code>istore_0</code>把栈顶的值放到局部变量表的第0个<code>Slot</code>中。</p><p>如果基于寄存器，那程序可能会是这样：</p><pre class=" language-java"><code class="language-java">mov eax<span class="token punctuation">,</span> <span class="token number">1</span>add eax<span class="token punctuation">,</span> <span class="token number">1</span></code></pre><p><code>mov</code>指令把EAX寄存器的值设为1，然后<code>add</code>指令再把这个值加1，结果就保存在EAX寄存器里面。</p><p>优缺点：</p><ul><li>基于栈的指令集的主要优点就是可移植，寄存器由硬件直接提供，程序直接依赖这些硬件寄存器则不可避免地收到硬件的约束。</li><li>栈架构的指令集的主要缺点就是执行速度会相对慢一点。</li></ul><h4 id="3、基于栈的解释器执行过程"><a href="#3、基于栈的解释器执行过程" class="headerlink" title="3、基于栈的解释器执行过程"></a>3、基于栈的解释器执行过程</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>用<code>javap</code>查看字节码指令</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>I    flags<span class="token operator">:</span> ACC_PUBLIC    Code<span class="token operator">:</span>      stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>         <span class="token number">0</span><span class="token operator">:</span> bipush        <span class="token number">100</span>         <span class="token number">2</span><span class="token operator">:</span> istore_1         <span class="token number">3</span><span class="token operator">:</span> bipush        <span class="token number">200</span>         <span class="token number">5</span><span class="token operator">:</span> istore_2         <span class="token number">6</span><span class="token operator">:</span> sipush        <span class="token number">300</span>         <span class="token number">9</span><span class="token operator">:</span> istore_3        <span class="token number">10</span><span class="token operator">:</span> iload_1        <span class="token number">11</span><span class="token operator">:</span> iload_2        <span class="token number">12</span><span class="token operator">:</span> iadd        <span class="token number">13</span><span class="token operator">:</span> iload_3        <span class="token number">14</span><span class="token operator">:</span> imul        <span class="token number">15</span><span class="token operator">:</span> ireturn      LineNumberTable<span class="token operator">:</span>        line <span class="token number">7</span><span class="token operator">:</span> <span class="token number">0</span>        line <span class="token number">8</span><span class="token operator">:</span> <span class="token number">3</span>        line <span class="token number">9</span><span class="token operator">:</span> <span class="token number">6</span>        line <span class="token number">10</span><span class="token operator">:</span> <span class="token number">10</span></code></pre><p><code>javap</code>提示需要深度为2的操作数栈和4个<code>Slot</code>的局部变量空间。</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%89%A7%E8%A1%8C1.png?raw=true" alt="解释器执行"></p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%89%A7%E8%A1%8C2.png?raw=true" alt="解释器执行"></p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%89%A7%E8%A1%8C3.png?raw=true" alt="解释器执行"></p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%89%A7%E8%A1%8C4.png?raw=true" alt="解释器执行"></p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%89%A7%E8%A1%8C5.png?raw=true" alt="解释器执行"></p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%89%A7%E8%A1%8C6.png?raw=true" alt="解释器执行"></p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%89%A7%E8%A1%8C7.png?raw=true" alt="解释器执行"></p><hr><p>该文章来源《深入理解Java虚拟机》</p><hr><h3 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Java虚拟机(2)之十二-类加载器</title>
      <link href="/2019/07/06/shen-ru-li-jie-java-xu-ni-ji-2-zhi-shi-er-lei-jia-zai-qi/"/>
      <url>/2019/07/06/shen-ru-li-jie-java-xu-ni-ji-2-zhi-shi-er-lei-jia-zai-qi/</url>
      
        <content type="html"><![CDATA[<p>虚拟机团队把类加载阶段中的“通过一个类的全限定名来获取描述此类的二进制字节流”这个动作放到Java虚拟机外部去实现，以便让应用程序自己决定如何去获取所需要的类。实现这个动作的代码模块称为“类加载器”。</p><h4 id="类与类加载器"><a href="#类与类加载器" class="headerlink" title="类与类加载器"></a>类与类加载器</h4><p>比较两个类是否“相等”，只有在这两个类是由同一个类加载器加载的前提先才有意义，否则，即时这两个类来源同一个Class文件，被同一个虚拟机加载，只要加载它们的类加载器不同，那这两个类就必定不相等。</p><p>这里的“相等”，包括代表类的Class对象的<code>equal()</code>方法、<code>isAssignableFrom()</code>方法、<code>isInstance()</code>方法的返回结果，也包括使用<code>instanceof</code>关键字做对象所属关系判定等情况。</p><h4 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h4><p>从Java虚拟机的角度来讲，只存在两种不同的类加载器：</p><ul><li>一种是启动类加载器(<code>Bootstrap ClassLoader</code>)，这个类加载器使用C++语言实现，是虚拟机自身的一部分；</li><li>另一种就是所有其他的类加载器，这些类加载器都是由Java语言实现，独立于虚拟机外部，并且全都继承自抽象类<code>java.lang.Classloader</code>。</li></ul><p>从Java开发人员的角度来看，类加载器还可以划分得更细致一些，绝大部分Java程序都会使用到以下3种系统提供的类加载器。</p><ul><li>启动类加载器(<code>Bootstrap ClassLoader</code>)：这个类加载器负责将存放在<code>&lt;JAVA_HOME&gt;\lib</code>目录中的，或者被<code>-Xbootclasspath</code>参数所指定的路径中的，并且是虚拟机识别的(仅按照文件名识别，如rt.jar)类库加载到虚拟机内存中。启动类加载器无法被Java程序直接引用，用户在编写自定义类加载器时，如果需要把加载请求委派给引导类加载器，那直接使用null代替即可。</li><li>扩展类加载器(<code>Extension ClassLoader</code>)：这个加载器由<code>sun.misc.Launcher$ExtClassLoader</code>实现，它负责加载<code>&lt;JAVA_HOME&gt;\lib\ext</code>目录中，或者被<code>java.ext.dirs</code>系统变量所指定的路径中的所有类库，开发者可以直接使用扩展类加载器。</li><li>应用程序类加载器(<code>Application ClassLoader</code>)：这个加载器由<code>sun.misc.Launcher$AppClassLoader</code>实现。由于这个类加载器是<code>ClassLoader</code>中的<code>getSystemClassLoader()</code>的返回值，所以一般也称它为系统类加载器。它负责加载用户类路径(<code>ClassPath</code>)上所指定的类库，开发者可以直接使用这个类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。</li></ul><p>我们的应用程序都是由这3种类加载器相互配合进行加载的，如果有必要，还可以加入自己定义的类加载器。</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B.png?raw=true" alt="双亲委派模型"></p><p>图中展示的类加载器之间的这种层次关系，称为类加载器的双亲委派模型(<code>Parents Delegation Model</code>)。双亲委派模型要求除了顶层的启动类加载器外，其余的类加载器都应当有自己的父类加载器。这里的类加载器之间的父子关系一般不会以继承(<code>Inheritance</code>)的关系来实现，而是都使用组合(<code>Compositon</code>)关系来复用父加载器的代码。</p><p>双亲委派模型的工作过程：</p><ol><li>如果一个类加载器收到了类加载的请求，它首先不会自己尝试去加载这个类，而是把这个请求委派给父类加载器去完成，每个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中。</li><li>只有当父加载器反馈自己无法完成这个加载请求(它的搜索范围中没有找到所需的类)时，子加载器才会尝试自己去加载。</li></ol><p>使用双亲委派模型来组织类加载器之间的关系，一个显而易见的好处就是Java类随着它的类加载器一起具备了一种带有优先级的层次关系，例如<code>java.lang.Object</code>，它存放在rt.jar之中，无论哪一个类要加载这个类，最终都是委派给处于模型最顶端的启动类加载器进行加载，因此Object类在程序的各种类加载器环境中都是同一个类。相反，如果没有使用双亲委派模型，由各个类加载器自行去加载的话，如果用户自己编写一个称为<code>java.lang.Object</code>的类，并放在程序的ClassPath中，那系统将会出现多个不同的Object类，Java类型体系中最基础的行为也就无法保证，应用程序也将会变得一片混乱。</p><h4 id="破坏双亲委派模型"><a href="#破坏双亲委派模型" class="headerlink" title="破坏双亲委派模型"></a>破坏双亲委派模型</h4><ol><li><p>双亲委派模型第一次“被破坏”发生在双亲委派模型出现之前——即<code>JDK 1.2</code>发布之前。由于双亲委派模型在<code>JDK 1.2</code>之后才被引入，而类加载器和抽象类<code>java.lang.ClassLoader</code>则在<code>JDK 1.0</code>时代就已经存在，面对已经存在的用户自定义类加载器的实现代码，Java设计者引入双亲委派模型时不得不做出一些妥协。为了向前兼容，<code>JDK 1.2</code>之后的<code>java.lang.ClassLoader</code>添加了一个新的protected方法<code>findClass()</code>，在此之前，用户去继承<code>java.lang.ClassLoader</code>的唯一目的就是为了重写<code>loadClass()</code>方法，因为虚拟机在进行类加载的时候会调用加载器的私有方法<code>loadClassInternal()</code>，而这个方法的唯一逻辑就是去调用自己的<code>loadClass()</code>。</p><p><code>JDK 1.2</code>之后的已不提倡用户再去覆盖<code>loadClass()</code>方法，而应当把自己的类加载逻辑写到<code>findClass()</code>方法中，在<code>loadClass()</code>方法的逻辑里如果父类加载失败，则会调用自己的<code>findClass()</code>方法来完成架子啊，这样就可以保证新写出来的类加载器是符合双亲委派规则的。</p></li><li><p>双亲委派模型第二次“被破坏”是由于这个模型自身的缺陷所导致的，双亲委派很好地解决了各个类加载器的基础类的统一问题，基础类之所以成为“基础”，是因为他们总是作为被用户代码调用的API，但是如果基础类又要调用用户的代码，那该怎么办？</p><p>一个典型的例子便是<code>JNDI</code>服务，<code>JNDI</code>现在已经是Java的标准服务，它的代码由启动类加载器去加载(在<code>JDK 1.3</code>时放进去的rt.jar)，但<code>JNDI</code>的目的就是对资源进行集中管理和查找，它需要调用由独立厂商实现并部署在应用程序的ClassPath下的<code>JNDI</code>接口提供者(<code>SPi</code>，<code>Service Provider Inrerface</code>)的代码，但启动类加载器不可能“认识”这些代码，那该怎么办？</p><p>为了解决这个问题，Java设计团队只好引入一个不太优雅的设计：线程上下文类加载器(<code>Thread Context ClassLoader</code>)。这个类加载器可以通过<code>java.lang.Thread</code>类的<code>setContextClassLoader()</code>方法进行设置，如果创建线程时还未设置，它将会从父线程中继承一个，如果在应用程序的全局范围内都没有设置过，那这个类加载器默认就是应用程序类加载器。</p><p>有了线程上下文类加载器，<code>JNDI</code>服务使用这个线程上下文类加载器去加载所需要的<code>SPI</code>代码，也就是父类加载器请求子类加载器去完成类加载的动作，这种行为实际上就是打通了双亲委派模型的层次结构来逆向使用类加载器，实际上已经违背了双亲委派模型的一般性原则，但这也是无可奈何的事情。Java中所有涉及<code>SPI</code>的加载动作基本都是采用这种方法，例如<code>JNDI</code>、<code>JDBC</code>、<code>JCE</code>、<code>JAXB</code>和<code>JBI</code>等。</p></li><li><p>双亲委派模型第三次“被破坏”是由于用户对程序动态性的追求而导致的，这里所说的“动态性”指的是当前一些非常“热门”的名词：代码热替换(<code>HotSwap</code>)、模块热部署(<code>Hot Deployment</code>)等。</p><p>目前<code>OSGi</code>已经成为业界Java模块化标准，而<code>OSGi</code>实现模块化热部署的关键则是它自定义的类加载器机制的实现。每一个程序模块(<code>OSGi</code>中称为<code>Bundle</code>)都有一个自己的类加载器，当需要更换一个<code>Bundle</code>时，就把<code>Bundle</code>连同类加载器一起换掉以实现代码的热替换。</p><p>在<code>OSGi</code>环境下，类加载器不再是双亲委派模型中的树状结构，而是进一步发展为更加复杂的网状结构，当收到类加载请求时，<code>OSGi</code>将按照下面的顺序进行类搜索：</p><ul><li>将以<code>java.*</code>开头的类委派给父类加载器加载。</li><li>否则，将委派列表名单内的类委派给父类加载器加载。</li><li>否则，将<code>Import</code>列表中的类委派给<code>Export</code>这个类的<code>Bundle</code>的类加载器加载。</li><li>否则，查找当前<code>Bundle</code>的ClassPath，使用自己的类加载器加载。</li><li>否则，查找类是否在自己的<code>Fragment Bundle</code>中，如果在，则委派给<code>Fragment Bundle</code>的类加载器加载。</li><li>否则，查找<code>Dynamic Import</code>列表的<code>Bundle</code>，委派给对应的<code>Bundle</code>的类加载器加载。</li><li>否则，类查找失败。</li></ul><p>上面的查找顺序只有开头两点仍然符合双亲委派规则，其余的类查找都是在平级的类加载器中进行的。</p></li></ol><hr><p>该文章来源《深入理解Java虚拟机》</p><hr><h4 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h4><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Java虚拟机(2)之十一-虚拟机类加载机制</title>
      <link href="/2019/07/04/shen-ru-li-jie-java-xu-ni-ji-2-zhi-shi-yi-xu-ni-ji-lei-jia-zai-ji-zhi/"/>
      <url>/2019/07/04/shen-ru-li-jie-java-xu-ni-ji-2-zhi-shi-yi-xu-ni-ji-lei-jia-zai-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h4 id="类加载的时机"><a href="#类加载的时机" class="headerlink" title="类加载的时机"></a>类加载的时机</h4><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E7%9A%84%E6%97%B6%E6%9C%BA.jpg?raw=true" alt="类加载的时机"></p><p>加载、验证、准备、初始化和卸载这5个阶段的顺序是确定的，类的加载过程必须按照这种顺序按部就班地开始，而解析阶段则不一定：它在某些情况下可以在初始化阶段之后再开始，这是为了支持Java语言的运行时绑定(也称为动态绑定或晚期绑定)。</p><p>什么情况下需要开始类加载过程的第一个阶段：加载？Java虚拟机规范并没有进行强制约束，这点可以交给虚拟机的具体实现来自由把我。但是对于初始化阶段，虚拟机规范则是严格规定了<strong>有且只有</strong>5种情况必须立即对类进行“初始化”(加载、验证、准备在此之前)：</p><ol><li>遇到<code>new</code>、<code>getstatic</code>、<code>putstatic</code>或<code>invokestatic</code>这4条字节码指令时，如果类没有进行过初始化，则需要先触发其初始化。生成这4条指令的最常见的Java代码场景是：使用new关键字实例化对象的时候、读取或设置一个类的静态字段(被final修饰、已在编译期把结果放入常量池的静态字段除外)的时候，以及调用一个类的静态方法的时候。</li><li>使用<code>java.lang.reflect</code>包的方法对类进行反射调用的时候，如果类没有进行过初始化，则需要进行先触发其初始化。</li><li>当初始化一个类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化。</li><li>当虚拟机启动时，用户需要指定一个要执行的主类(包含main()方法的类)，虚拟机会先初始化这个主类。</li><li>当使用<code>JDK 1.7</code>的动态语言支持时，如果一个<code>java.lang.invoke.MethodHandle</code>实例最后的解析结果<code>REF_getStatic</code>、<code>REF_putStatic</code>、<code>REF_invokeStatic</code>的方法句柄，并且这个方法句柄所对应的类没有进行过初始化，则需要先触发其初始化。</li></ol><h4 id="类加载的过程"><a href="#类加载的过程" class="headerlink" title="类加载的过程"></a>类加载的过程</h4><p>Java虚拟机中类加载的全过程，也就是加载、验证、准备、解析和初始化这5个阶段所执行的具体动作。</p><h5 id="1、加载"><a href="#1、加载" class="headerlink" title="1、加载"></a>1、加载</h5><p>“加载”是“类加载”(Class Loading)过程的一个阶段，在加载阶段，虚拟机需要完成以下3件事：</p><ul><li><p>通过一个类的全限定名来获取定义此类的二进制字节流。</p></li><li><p>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</p></li><li><p>在内存中生成一个代表这个类的<code>java.lang.Class</code>对象，作为方法区这个类的各种数据的访问入口。</p></li></ul><p>相对于类加载过程的其他阶段，一个非数组类的加载阶段(加载阶段中获取类的二进制字节流的动作)是开发人员可控性最强的，因为加载阶段既可以使用系统提供的引导类加载器来完成，也可以由用户自定义的类加载器去完成，开发人员可以通过定义自己的类加载器去控制字节流的获取方式(即重写一个类加载器的<code>loadClass()</code>方法)。</p><p>对于数组类。数组类本身不通过类加载器创建，它是由Java虚拟机直接创建的。但数组类与类加载器仍然有很密切的关系，因为数组类的元素类型(<code>Element Type</code>，指的是数组去掉所有维度的类型)最终靠类加载器去创建，一个数组类的创建遵循以下规则：</p><ul><li><p>如果数组的组件类型(<code>Component Type</code>，指的是数组去掉一个维度的类型)是引用类型，那就递归采用以上的加载过程去加载这个组件类型，数组将在加载该组件类型的类加载器的类名称空间上被标记。</p></li><li><p>如果数组的组件类型不是引用类型(例如int[]数组)，Java虚拟机将会把数组标记为与引导类加载器关联。</p></li><li><p>数组的可见性与它的组件类型的可见性一致，如果组件不是引用类型，那数组类的可见性默认为public。</p></li></ul><p>加载阶段完成后，虚拟机外部的二进制字节流就按照虚拟机所需的格式存储在方法区之中，方法区中的数据存储格式由虚拟机实现自行定义，虚拟机规范未规定此区域的具体数据结构。然后在内存中实例化一个<code>java.lang.Class</code>类的对象(没有明确规定是在Java堆中，对于<code>HotSpot</code>虚拟机而言，Class对象比较特殊，虽然是对象，但是存放在方法区里面)，这个对象将作为程序访问方法区中的这些类型数据的外部接口。</p><p>加载阶段与连接阶段的部分内容(如一部分字节码文件格式验证动作)是交叉进行的，加载阶段尚未完成，连接阶段可能已经开始，但这些夹在加载阶段中的动作，仍然属于连接阶段的内容，这两个阶段的开始时间仍然保持着固定的先后顺序。</p><h5 id="2、验证"><a href="#2、验证" class="headerlink" title="2、验证"></a>2、验证</h5><p>验证是连接阶段的第一步，这一阶段的目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。</p><ol><li><p><strong>文件格式验证</strong></p><p>这一阶段要验证字节流是否符合Class文件格式的规范，并且能被当前版本虚拟机处理。包含以下验证点：</p><ul><li><p>是否以魔数<code>0xCAFEBABE</code>开头。</p></li><li><p>主、次版本号是否在当前虚拟机处理的范围内。</p></li><li><p>常量池的常量中是否有不被支持的常量类型(检查常量的tag标志)。</p></li><li><p>指向常量的各种索引值中是否有指向不存在的常量或不符合类型的常量。</p></li><li><p><code>CONSTANT_Utf8_info</code>型的常量中是否有不符合UTF8编码的数据。</p></li><li><p>Class文件中各个部分及文件本身是否有被删除的或附加的其他信息。</p></li></ul><p>……</p><p>该验证阶段主要目的是保证输入的字节流能正确解析并存储于方法区之内，格式上符合描述一个Java类型信息的要求。这阶段的验证是基于二进制字节流进行的，只有通过了这个阶段的验证后，自己了才会进入内存的方法区中进行存储，所以后面的3个验证阶段全部是基于方法区的存储结构进行的，不会再直接操作字节流。</p></li><li><p><strong>元数据验证</strong></p><p>第二阶段是对字节码描述的信息进行语义分析，以保证其描述的信息符合Java语言规范的要求，包含以下验证点：</p><ul><li><p>这个类是否有父类(除了<code>java.lang.Object</code>之外，所有的类都应当有父类)。</p></li><li><p>这个类的父类是否继承了不被允许被继承的类(被final修饰的类)。</p></li><li><p>如果这个类不是抽象类，是否实现了其父类或接口之中要求实现的所有方法。</p></li><li><p>类中的字段、方法是否与父类产生矛盾(例如覆盖了父类的final字段，或者出现不符合规则的方法重载，例如方法参数都一致，但返回值类型不同等)。</p></li></ul><p>……</p></li><li><p><strong>字节码验证</strong></p><p>主要目的是通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。在第二阶段对元数据信息中的数据类型做完校验后，这个阶段将对垒的方法体进行校验分析，保证被校验类的方法在运行时不会做出危害虚拟机安全的事件，例如：</p><ul><li><p>保证任意时刻操作数栈的数据类型与指令代码序列都能配合工作，例如不会出现类似：在操作栈中放置一个int类型的数据，使用时却按long类型来加载入本地变量表。</p></li><li><p>保证跳转指令不会跳转到方法体以外的字节码指令上。</p></li><li><p>保证方法体中的类型转换是有效的。</p></li></ul><p>……</p></li><li><p><strong>符号引用验证</strong></p><p>此校验发生在虚拟机将符号引用转化为直接引用的时候，这个转化动作将在连接的第三个阶段——解析阶段中发生。符号引用验证可以看做是对类自身以外(常量池中各种符号引用)的信息进行匹配性校验，通常需要校验已下内容：</p><ul><li><p>符号引用中通过字符串描述的全限定名是否能找到对应的类。</p></li><li><p>在指定类中是否存在符合方法的字段描述符以及简单名称所描述的方法和字段。</p></li><li><p>符号引用中的类、字段、方法的访问性(private、protected、public、default)是否可被当前类访问。</p></li></ul><p>……</p></li></ol><h5 id="3、准备"><a href="#3、准备" class="headerlink" title="3、准备"></a>3、准备</h5><p>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些变量所使用的内存都将在方法区中被分配。这里的类变量仅包括类变量(被static修饰的变量)，而不包括实例变量，实例变量将会在对象实例化时随着对象一起分配在Java堆。</p><p>假设一个类变量定义为：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span></code></pre><p>那么变量value在准备阶段过后初始值为0而不是123，因为这时候尚未开始执行任何Java方法，而把value赋值为123的<code>putstatic</code>指令是程序被编译后，存放于类构造器<code>&lt;clinit&gt;()</code>方法之中，索引把value赋值为123的动作将在初始化阶段才会执行。</p><p>如果类字段的字段属性表中存在<code>ConstantValue</code>属性，那么准备阶段变量value就会被初始化为<code>ConstantValue</code>属性所指定的值，假设上面的类变量value定位变为：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span></code></pre><p>编译时javac将会为value生成<code>ConstantValue</code>属性，在准备阶段虚拟机就会根据<code>ConstantValue</code>的设置将value赋值为123。</p><h5 id="4、解析"><a href="#4、解析" class="headerlink" title="4、解析"></a>4、解析</h5><p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。</p><ul><li><strong>符号引用(Symbolic References)</strong>：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。符号引用于虚拟机实现的内存布局无关，引用的目标并不一定已经加载到内存中。各种虚拟机实现的内存布局可以各不相同，但是它们能够接受的符号引用必须都是一致的，因为符号引用的字面量形式明确定义在Java虚拟机规范的Class文件格式中。</li><li><strong>直接引用(Direct References)</strong>：直接引用可以是直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。直接引用是和虚拟机实现的内存布局相关的，同一个符号引用在不同虚拟机实例上翻译出来的直接引用一般不会相同，如果有了直接引用，那引用的目标必定已经在内存中存在。</li></ul><p>虚拟机规范并未规定解析阶段发生的具体时间，只要求在执行<code>anewarray</code>、<code>checkcast</code>、<code>getfield</code>、<code>getstatic</code>、<code>instanceof</code>、<code>invokedynamic</code>、<code>invokeinterface</code>、<code>invokespecial</code>、<code>invokestatic</code>、<code>invokevirtial</code>、<code>ldc</code>、<code>ldc_w</code>、<code>multianewarry</code>、<code>new</code>、<code>putfield</code>和<code>putstatic</code>这16个用于操作符号引用的字节码指令之前，先对它们所使用的符号引用进行解析。所以虚拟机实现可以根据需要来判断到底是在类被加载器加载时对常量池中的符号引用进行解析，还是等到一个符号引用将要被使用前采取解析它。</p><p>解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用点限定符7类符号引用进行，分别对应常量池的<code>CONSTANT_Class_info</code>、<code>CONSTANT_Fieldref_info</code>、<code>CONSTANT_Methodref_info</code>、<code>CONSTANT_InterfaceMethodref_info</code>、<code>CONSTANT_MethodType_info</code>、<code>CONSTANT_MethodHandle_info</code>、<code>CONSTANT_InvokeDynamic_info</code>7种常量类型。</p><h5 id="5、初始化"><a href="#5、初始化" class="headerlink" title="5、初始化"></a>5、初始化</h5><p>类初始化阶段是类加载过程的最后一步，前面的类加载过程中，除了在加载阶段用户程序可以通过自定义类加载器参与之外，其余动作完全由虚拟机主导和控制。到了初始化阶段，才真正开始执行类中定义的Java程序代码。</p><p>初始化阶段是执行类构造器<code>&lt;clinit&gt;()</code>方法的过程。</p><ul><li><code>&lt;clinit&gt;()</code>方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块(static{}块)中的语句合并产生的，编译器收集的顺序是由语句在源文件中出现的顺序决定的，静态语句块中只能访问定义在静态语句块之前的变量，定义在它之后的变量，在前面的静态语句块可以赋值，但不能访问。</li><li><code>&lt;clinit&gt;()</code>方法与类构造函数(或者说实例构造器<code>&lt;init&gt;()</code>方法)不同，它不需要显式地调用父类构造器，虚拟机会保证在子类的<code>&lt;clinit&gt;()</code>方法执行之前，父类的<code>&lt;clinit&gt;()</code>方法已经执行完毕。因此在虚拟机中第一个被执行<code>&lt;clinit&gt;()</code>方法的类肯定是<code>java.lang.Object</code>。</li><li>由于父类的<code>&lt;clinit&gt;()</code>方法先执行，也就意味着父类中定义的静态语句块要优于子类的变量赋值操作。</li><li><code>&lt;clinit&gt;()</code>方法对于类或接口来说不是必需的，如果一个类没有静态语句块，也没有对变量的赋值操作，那么编译器可以不为这个类生成<code>&lt;clinit&gt;()</code>方法。</li><li>接口中不能使用静态语句块，但仍然有变量初始化的赋值操作，因此接口与类一样都会生成<code>&lt;clinit&gt;()</code>方法。但接口和类不一样的是，执行接口的<code>&lt;clinit&gt;()</code>方法不需要先执行父接口的<code>&lt;clinit&gt;()</code>方法。只有当父接口中定义的变量使用时，父接口才会初始化。另外接口的实现类在初始化时也一样不会执行接口的<code>&lt;clinit&gt;()</code>方法。</li><li>虚拟机会保证一个类的<code>&lt;clinit&gt;()</code>方法在多线程环境中被正确地加锁、同步，如果多个线程同时去初始化一个类，那只会有一个线程去执行这个类的<code>&lt;clinit&gt;()</code>方法，其他线程都需要阻塞等待，知道活动线程执行<code>&lt;clinit&gt;()</code>方法方法完毕。</li></ul><hr><p>该文章来源《深入理解Java虚拟机》</p><hr><h4 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h4><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Java虚拟机(2)之十-类文件结构</title>
      <link href="/2019/07/02/shen-ru-li-jie-java-xu-ni-ji-2-zhi-shi-lei-wen-jian-jie-gou/"/>
      <url>/2019/07/02/shen-ru-li-jie-java-xu-ni-ji-2-zhi-shi-lei-wen-jian-jie-gou/</url>
      
        <content type="html"><![CDATA[<h4 id="Class类文件的结构"><a href="#Class类文件的结构" class="headerlink" title="Class类文件的结构"></a>Class类文件的结构</h4><p>Class文件是一组以8字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑地排列在Class文件之中，中间没有任何分隔符，这使得整个Class文件中存储的内容几乎全部是程序运行的必要数据，没有空隙存在。当遇到需要占用8位字节以上的空间的数据项时，则会按照高位在前的方式分隔成若干个8位字节进行存储。</p><p>根据Java虚拟机规范的规定，Class文件格式采用一种类似于C语言结构体的伪结构来存储数据，这种伪结构中只有两种数据结构：<code>无符号数</code>和<code>表</code>。</p><ul><li><strong>无符号数</strong>：属于基本的数据类型，以u1、u2、u4、u8来分类表示1个字节、2个字节、4个字节和8个字节的无符号数，无符号数可以用来描述数组、索引引用、数量值或者按照UTF-8编码构成字符串值。</li><li><strong>表</strong>：由多个无符号数或者其他表作为数据项构成的复合数据类型，所有表都习惯性地以“_info”结尾。表用于描述有层次关系的复合结构的数据，整个Class文件本质上就是一张表。</li></ul><p>无论是无符号数还是表，当需要描述同一类型但数量不定的多个数据时，经常会使用一个前置的容器计数器加若干个连续的数据项的形式，这时称这一系列连续的某一类型的数据为某一类型的集合。</p><p>对于一个简单的Java文件：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Java4</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>编译之后用<code>010Editor</code>打开：</p><pre class=" language-java"><code class="language-java">  Offset<span class="token operator">:</span> <span class="token number">00</span> <span class="token number">01</span> <span class="token number">02</span> <span class="token number">03</span> <span class="token number">04</span> <span class="token number">05</span> <span class="token number">06</span> <span class="token number">07</span> <span class="token number">08</span> <span class="token number">09</span> 0A 0B 0C <span class="token number">0D</span> 0E <span class="token number">0F</span>     <span class="token number">00000000</span><span class="token operator">:</span> CA FE BA BE <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">34</span> <span class="token number">00</span> <span class="token number">1D</span> 0A <span class="token number">00</span> <span class="token number">06</span> <span class="token number">00</span> <span class="token number">0F</span> <span class="token number">09</span>    J<span class="token operator">~</span><span class="token operator">:</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">00000010</span><span class="token operator">:</span> <span class="token number">00</span> <span class="token number">10</span> <span class="token number">00</span> <span class="token number">11</span> <span class="token number">08</span> <span class="token number">00</span> <span class="token number">12</span> 0A <span class="token number">00</span> <span class="token number">13</span> <span class="token number">00</span> <span class="token number">14</span> <span class="token number">07</span> <span class="token number">00</span> <span class="token number">15</span> <span class="token number">07</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">00000020</span><span class="token operator">:</span> <span class="token number">00</span> <span class="token number">16</span> <span class="token number">01</span> <span class="token number">00</span> <span class="token number">06</span> 3C <span class="token number">69</span> 6E <span class="token number">69</span> <span class="token number">74</span> 3E <span class="token number">01</span> <span class="token number">00</span> <span class="token number">03</span> <span class="token number">28</span> <span class="token number">29</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>&lt;init<span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">00000030</span><span class="token operator">:</span> <span class="token number">56</span> <span class="token number">01</span> <span class="token number">00</span> <span class="token number">04</span> <span class="token number">43</span> <span class="token number">6F</span> <span class="token number">64</span> <span class="token number">65</span> <span class="token number">01</span> <span class="token number">00</span> <span class="token number">0F</span> 4C <span class="token number">69</span> 6E <span class="token number">65</span> 4E    V<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Code<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>LineN<span class="token number">00000040</span><span class="token operator">:</span> <span class="token number">75</span> <span class="token number">6D</span> <span class="token number">62</span> <span class="token number">65</span> <span class="token number">72</span> <span class="token number">54</span> <span class="token number">61</span> <span class="token number">62</span> 6C <span class="token number">65</span> <span class="token number">01</span> <span class="token number">00</span> <span class="token number">04</span> <span class="token number">6D</span> <span class="token number">61</span> <span class="token number">69</span>    umberTable<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>mai<span class="token number">00000050</span><span class="token operator">:</span> 6E <span class="token number">01</span> <span class="token number">00</span> <span class="token number">16</span> <span class="token number">28</span> 5B 4C 6A <span class="token number">61</span> <span class="token number">76</span> <span class="token number">61</span> <span class="token number">2F</span> 6C <span class="token number">61</span> 6E <span class="token number">67</span>    n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">[</span>Ljava<span class="token operator">/</span>lang<span class="token number">00000060</span><span class="token operator">:</span> <span class="token number">2F</span> <span class="token number">53</span> <span class="token number">74</span> <span class="token number">72</span> <span class="token number">69</span> 6E <span class="token number">67</span> 3B <span class="token number">29</span> <span class="token number">56</span> <span class="token number">01</span> <span class="token number">00</span> 0A <span class="token number">53</span> <span class="token number">6F</span> <span class="token number">75</span>    <span class="token operator">/</span>String<span class="token punctuation">;</span><span class="token punctuation">)</span>V<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Sou<span class="token number">00000070</span><span class="token operator">:</span> <span class="token number">72</span> <span class="token number">63</span> <span class="token number">65</span> <span class="token number">46</span> <span class="token number">69</span> 6C <span class="token number">65</span> <span class="token number">01</span> <span class="token number">00</span> 0A 4A <span class="token number">61</span> <span class="token number">76</span> <span class="token number">61</span> <span class="token number">34</span> 2E    rceFile<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Java4<span class="token punctuation">.</span><span class="token number">00000080</span><span class="token operator">:</span> 6A <span class="token number">61</span> <span class="token number">76</span> <span class="token number">61</span> 0C <span class="token number">00</span> <span class="token number">07</span> <span class="token number">00</span> <span class="token number">08</span> <span class="token number">07</span> <span class="token number">00</span> <span class="token number">17</span> 0C <span class="token number">00</span> <span class="token number">18</span> <span class="token number">00</span>    java<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">00000090</span><span class="token operator">:</span> <span class="token number">19</span> <span class="token number">01</span> <span class="token number">00</span> 0B <span class="token number">48</span> <span class="token number">65</span> 6C 6C <span class="token number">6F</span> <span class="token number">20</span> <span class="token number">57</span> <span class="token number">6F</span> <span class="token number">72</span> 6C <span class="token number">64</span> <span class="token number">07</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Hello<span class="token punctuation">.</span>World<span class="token punctuation">.</span>000000a0<span class="token operator">:</span> <span class="token number">00</span> 1A 0C <span class="token number">00</span> 1B <span class="token number">00</span> 1C <span class="token number">01</span> <span class="token number">00</span> <span class="token number">05</span> 4A <span class="token number">61</span> <span class="token number">76</span> <span class="token number">61</span> <span class="token number">34</span> <span class="token number">01</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Java4<span class="token punctuation">.</span>000000b0<span class="token operator">:</span> <span class="token number">00</span> <span class="token number">10</span> 6A <span class="token number">61</span> <span class="token number">76</span> <span class="token number">61</span> <span class="token number">2F</span> 6C <span class="token number">61</span> 6E <span class="token number">67</span> <span class="token number">2F</span> <span class="token number">4F</span> <span class="token number">62</span> 6A <span class="token number">65</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span>java<span class="token operator">/</span>lang<span class="token operator">/</span>Obje000000c0<span class="token operator">:</span> <span class="token number">63</span> <span class="token number">74</span> <span class="token number">01</span> <span class="token number">00</span> <span class="token number">10</span> 6A <span class="token number">61</span> <span class="token number">76</span> <span class="token number">61</span> <span class="token number">2F</span> 6C <span class="token number">61</span> 6E <span class="token number">67</span> <span class="token number">2F</span> <span class="token number">53</span>    ct<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>java<span class="token operator">/</span>lang<span class="token operator">/</span>S000000d0<span class="token operator">:</span> <span class="token number">79</span> <span class="token number">73</span> <span class="token number">74</span> <span class="token number">65</span> <span class="token number">6D</span> <span class="token number">01</span> <span class="token number">00</span> <span class="token number">03</span> <span class="token number">6F</span> <span class="token number">75</span> <span class="token number">74</span> <span class="token number">01</span> <span class="token number">00</span> <span class="token number">15</span> 4C 6A    ystem<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Lj<span class="token number">000000e0</span><span class="token operator">:</span> <span class="token number">61</span> <span class="token number">76</span> <span class="token number">61</span> <span class="token number">2F</span> <span class="token number">69</span> <span class="token number">6F</span> <span class="token number">2F</span> <span class="token number">50</span> <span class="token number">72</span> <span class="token number">69</span> 6E <span class="token number">74</span> <span class="token number">53</span> <span class="token number">74</span> <span class="token number">72</span> <span class="token number">65</span>    ava<span class="token operator">/</span>io<span class="token operator">/</span>PrintStre000000f0<span class="token operator">:</span> <span class="token number">61</span> <span class="token number">6D</span> 3B <span class="token number">01</span> <span class="token number">00</span> <span class="token number">13</span> 6A <span class="token number">61</span> <span class="token number">76</span> <span class="token number">61</span> <span class="token number">2F</span> <span class="token number">69</span> <span class="token number">6F</span> <span class="token number">2F</span> <span class="token number">50</span> <span class="token number">72</span>    am<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>java<span class="token operator">/</span>io<span class="token operator">/</span>Pr<span class="token number">00000100</span><span class="token operator">:</span> <span class="token number">69</span> 6E <span class="token number">74</span> <span class="token number">53</span> <span class="token number">74</span> <span class="token number">72</span> <span class="token number">65</span> <span class="token number">61</span> <span class="token number">6D</span> <span class="token number">01</span> <span class="token number">00</span> <span class="token number">07</span> <span class="token number">70</span> <span class="token number">72</span> <span class="token number">69</span> 6E    intStream<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>prin<span class="token number">00000110</span><span class="token operator">:</span> <span class="token number">74</span> 6C 6E <span class="token number">01</span> <span class="token number">00</span> <span class="token number">15</span> <span class="token number">28</span> 4C 6A <span class="token number">61</span> <span class="token number">76</span> <span class="token number">61</span> <span class="token number">2F</span> 6C <span class="token number">61</span> 6E    tln<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>Ljava<span class="token operator">/</span>lan<span class="token number">00000120</span><span class="token operator">:</span> <span class="token number">67</span> <span class="token number">2F</span> <span class="token number">53</span> <span class="token number">74</span> <span class="token number">72</span> <span class="token number">69</span> 6E <span class="token number">67</span> 3B <span class="token number">29</span> <span class="token number">56</span> <span class="token number">00</span> <span class="token number">21</span> <span class="token number">00</span> <span class="token number">05</span> <span class="token number">00</span>    g<span class="token operator">/</span>String<span class="token punctuation">;</span><span class="token punctuation">)</span>V<span class="token punctuation">.</span>!<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">00000130</span><span class="token operator">:</span> <span class="token number">06</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">02</span> <span class="token number">00</span> <span class="token number">01</span> <span class="token number">00</span> <span class="token number">07</span> <span class="token number">00</span> <span class="token number">08</span> <span class="token number">00</span> <span class="token number">01</span> <span class="token number">00</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">00000140</span><span class="token operator">:</span> <span class="token number">09</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">1D</span> <span class="token number">00</span> <span class="token number">01</span> <span class="token number">00</span> <span class="token number">01</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">05</span> 2A B7 <span class="token number">00</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>*<span class="token number">7</span><span class="token punctuation">.</span><span class="token number">00000150</span><span class="token operator">:</span> <span class="token number">01</span> B1 <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">01</span> <span class="token number">00</span> 0A <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">06</span> <span class="token number">00</span> <span class="token number">01</span> <span class="token number">00</span> <span class="token number">00</span>    <span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">00000160</span><span class="token operator">:</span> <span class="token number">00</span> <span class="token number">01</span> <span class="token number">00</span> <span class="token number">09</span> <span class="token number">00</span> 0B <span class="token number">00</span> 0C <span class="token number">00</span> <span class="token number">01</span> <span class="token number">00</span> <span class="token number">09</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">25</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>%<span class="token number">00000170</span><span class="token operator">:</span> <span class="token number">00</span> <span class="token number">02</span> <span class="token number">00</span> <span class="token number">01</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">09</span> B2 <span class="token number">00</span> <span class="token number">02</span> <span class="token number">12</span> <span class="token number">03</span> B6 <span class="token number">00</span> <span class="token number">04</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">00000180</span><span class="token operator">:</span> B1 <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">01</span> <span class="token number">00</span> 0A <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> 0A <span class="token number">00</span> <span class="token number">02</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span>    <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">00000190</span><span class="token operator">:</span> <span class="token number">04</span> <span class="token number">00</span> <span class="token number">08</span> <span class="token number">00</span> <span class="token number">05</span> <span class="token number">00</span> <span class="token number">01</span> <span class="token number">00</span> <span class="token number">0D</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">02</span> <span class="token number">00</span> 0E       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>Class文件结构：</p><pre class=" language-java"><code class="language-java">ClassFile <span class="token punctuation">{</span>  u4              magic<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 魔数</span>  u2              minor_version<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 次版本号    </span>  u2              major_version<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 主版本号</span>  u2              constant_pool_count<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 常量池容量计数器</span>  cp_info         constant_pool<span class="token punctuation">[</span>constant_pool_count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 常量池</span>  u2              access_flags<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 访问标志</span>  u2              this_class<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 类索引</span>  u2              super_class<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 父类索引</span>  u2              interfaces_count<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 接口索引集合</span>  u2              interfaces<span class="token punctuation">[</span>interfaces_count<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 接口索引集合</span>  u2              fields_count<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 字段表集合</span>  field_info      fields<span class="token punctuation">[</span>fields_count<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 字段表集合</span>  u2              methods_count<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 方法表集合</span>  method_info     methods<span class="token punctuation">[</span>methods_count<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 方法表集合</span>  u2              attributes_count<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 属性表集合</span>  attribute_info  attributes<span class="token punctuation">[</span>attributes_count<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 属性表集合</span><span class="token punctuation">}</span></code></pre><h4 id="1、魔数-magic-与Class文件的版本-minor-version、major-version"><a href="#1、魔数-magic-与Class文件的版本-minor-version、major-version" class="headerlink" title="1、魔数(magic)与Class文件的版本(minor_version、major_version)"></a>1、魔数(<code>magic</code>)与Class文件的版本(<code>minor_version</code>、<code>major_version</code>)</h4><p>每个Class文件的头4字节称为魔数(<code>Magic Number</code>)，它唯一的作用是确定这个文件是否能被一个虚拟机接受的Class文件。</p><p>第5和6个字节是次版本号。</p><p>第7和8个字节是主版本号。</p><h4 id="2、常量池-constant-pool"><a href="#2、常量池-constant-pool" class="headerlink" title="2、常量池(constant_pool)"></a>2、常量池(<code>constant_pool</code>)</h4><p>紧跟主次版本号之后的是常量池入口，常量池可以理解为Class文件之中的资源仓库，它是Class文件结构中与其他项目关联最多的数据类型，也是占用Class文件空间最大的数据项目之一，同时也是Class文件中第一个出现的表类型数据项目。</p><p>由于常量池中常量的数量不是固定的，所以常量池入口需要放置一项u2类型的数据，代表常量池中常量计数器(<code>constant_pool_count</code>)。与Java中语言习惯不一样，这个容量计数计数器是从1开始的而不是0开始。在Class文件格式规范制定之时，设计者将第0项空出来是有特殊考虑的，这样做的目的在于满足后面某些指向常量池的索引值的数据在特殊情况下需要表达“不引用任何一个常量池项目”的含义，这种情况可以把索引值置为0来表示。Class文件中只有常量池的容量计数是从1开始。</p><p>常量池中主要存放两大类常量：</p><ul><li><p><strong>字面量(Literal)</strong>：接近于Java语言层面的常量的概念，如文本字符串、声明为final的常量值等。</p></li><li><p><strong>符号引用(Symbolic References)</strong>：属于编译原理方面的概念：</p><blockquote><p>类和接口的全限定名(Fully Qualified Name)</p></blockquote><blockquote><p>字段的名称和描述符(Descriptor)</p></blockquote><blockquote><p>方法的名称和描述符</p></blockquote><p>Java在进行Javac编译的时候，是在虚拟机加载Class文件的时候进行动态连接。也就是说，在Class文件中不会保存各个方法、字段的最终内存布局信息，因此这些字段、方法的符号引用不经过运行期转换的话无法得到真正的内存入口地址，也就无法直接被虚拟机使用。当虚拟机运行时，需要从常量池获得对应的符号引用，再在类创建时或运行时解析、翻译到具体的内存地址之中。</p></li></ul><h4 id="3、访问标志-access-flags"><a href="#3、访问标志-access-flags" class="headerlink" title="3、访问标志(access_flags)"></a>3、访问标志(<code>access_flags</code>)</h4><p>常量池结束之后的两个字节代表访问标志(<code>access_flags</code>)，这个标志用于识别一些类或者接口层次的访问信息，包括：这个Class是类还是接口；是否定义为public类型，是否定义为abstract类型了；如果是类的话，是否被声明为final等。</p><h4 id="4、类索引-this-class-、父类索引-super-class-与接口索引集合-interfaces"><a href="#4、类索引-this-class-、父类索引-super-class-与接口索引集合-interfaces" class="headerlink" title="4、类索引(this_class)、父类索引(super_class)与接口索引集合(interfaces)"></a>4、类索引(<code>this_class</code>)、父类索引(<code>super_class</code>)与接口索引集合(<code>interfaces</code>)</h4><p>类索引(<code>this_class</code>)、父类索引(<code>super_class</code>)和接口索引集合(<code>interfaces</code>)都是来确定这个类的继承关系。</p><h4 id="5、字段表集合-fields"><a href="#5、字段表集合-fields" class="headerlink" title="5、字段表集合(fields)"></a>5、字段表集合(<code>fields</code>)</h4><p>字段表(<code>fields</code>)用于描述接口或类中声明的变量。字段(field)包括类级变量以及实例级变量，但不包括在方法内部声明的局部变量。</p><p>可包括的信息有：字段的作用域(public、private、protected修饰符)、是实例变量还是类变量(static修饰符)、可变性(final)、并发可见性(volatile修饰符，是否强制从主内存读写)、可否序列化(transient修饰符)、字段数据类型(基本类型、对象、数组)、字段名称。这些信息中，各个修饰符都是布尔值，要么有某个修饰符，要么没有，很适合用标志位来表示。而字段叫什么名字、字段被定义为什么数据类型，这些都没法固定，只能引用常量池的常量来描述。</p><h4 id="6、方法表集合-methods"><a href="#6、方法表集合-methods" class="headerlink" title="6、方法表集合(methods)"></a>6、方法表集合(<code>methods</code>)</h4><p>Class文件存储格式对方法的描述与对字段的描述几乎采用完全一致的方式。仅在访问标志和属性表集合的可选项中有所区别。</p><p>方法里面的Java代码，经过编译器编译成字节码指令后，存放在方法属性表集合中的一个名为“Code”的属性里面。</p><h4 id="7、属性表集合-attributes"><a href="#7、属性表集合-attributes" class="headerlink" title="7、属性表集合(attributes)"></a>7、属性表集合(<code>attributes</code>)</h4><p>在Class文件、字段表、方法表都可以携带自己的属性表集合，以用于描述某些场景专有的信息。</p><ol><li><strong>Code属性</strong>：Java程序方法体中的代码经过Javac编译器处理后，最终变为字节码指令存储在Code属性中。Code属性出现在方法表的属性集合之中，但并非所有分方法表都必须存在这个属性，譬如接口或者抽象类中的方法就不存在Code属性。</li></ol><ol start="2"><li><strong>Exceptions属性</strong>：该属性的作用是列举出方法中可能抛出的受查异常(Checked Exceptions)，也就是方法描述时在throws关键字后列举的异常。</li></ol><ol start="3"><li><strong>LineNumberTable属性</strong>：该属性用于描述Java源码行号与字节码行号(字节码的偏移量)之间的对应关系。它并不是运行时必需的属性，但默认会生成到Class文件之中，可以在Javac中分别使用<code>-g:none</code>或<code>-g:lines</code>选项来取消或要求生成这项信息。如果选择不生成该属性，对程序运行产生最主要的影响就是当抛出异常时，堆栈中将不会显示出错的行号，并且在调试程序的时候，也无法按照源码行来设置断点。</li></ol><ol start="4"><li><p><strong>LocalVariableTable属性</strong>：该属性用于描述栈帧中局部变量表中的变量与Java源码中定义的变量之间的关系，它也不是运行时必需的属性，但默认会生成到Class文件之中，可以在Javac中分别使用<code>-g:none</code>或<code>-g:vars</code>选项来取消或要求生成这项信息。如果没有这项属性，最大的影响就是当其他人引用这个方法时，所有的参数都会丢失，IDE将会使用诸如arg0，arg1之类的占位符代替原来的参数名，这对程序运行没有影响，但对代码编写带来较大不便，而且在调试期间无法根据参数名称从上下文中获取参数值。</p></li><li><p><strong>ConstantValue属性</strong>：该属性的作用是通知虚拟机自动为静态变量赋值。</p></li></ol><ol start="6"><li><strong>InnerClasses属性</strong>：该属性用于记录内部类与宿主类之间的关联。如果一个类定义了内部类，那编译器将会为它以及它所包含的内部类生成<code>InnerClasses</code>属性。</li></ol><ol start="7"><li><p><strong>Deprecated及Synthetic属性</strong>：这两个属性都是属于标志类型的布尔属性。</p><ul><li><strong>Deprecated</strong>用于表示某个类、字段或者方法，已经被程序坐着定位不再推荐使用，可以通过在代码中使用<code>@Deprecated</code>注释进行设置。</li><li><strong>Synthetic</strong>代表此字段或者方法不是由Java源码直接产生的，而是由编译器自行添加的，在<code>JDK 1.5</code>之后，标识一个类、字段或者方法是编译器自动产生的，也可以设置它们的访问标志中的<code>ACC_SYNTHETIC</code>标志位。</li></ul></li></ol><ol start="8"><li><strong>StackMapTable属性</strong>：该属性在<code>JDK 1.6</code>发布后增加到了Class文件规范中，它是一个复杂的变长属性，位于Code属性的属性表中。这个属性会在虚拟机类加载的字节码验证阶段被新类型检查验证器(<code>Type Checker</code>)使用，目的在于替代以前比较消耗性能的基于数据流分析的类型推导验证器。</li></ol><ol start="9"><li><strong>Signature属性</strong>：该属性在<code>JDK 1.5</code>发布后增加到Class文件规范之中，是一个可选的定长属性，可出现在类、属性和方法表结构的属性表中。在<code>JDK 1.5</code>中大幅增强Java语言的语法，再次之后，任何类、接口、初始化方法或成员的泛型签名如果包含了类型变量(<code>Type Variables</code>)或参数化类型(<code>Parameterized Types</code>)，则<strong>Signature</strong>属性会为它记录泛型签名信息。之所以要专门使用这样一个属性去记录泛型类型，是因为Java语言的泛型采用擦除法实现的伪泛型，在字节码(Code属性)中，泛型信息编译(类型变量、参数化类型)之后都统统被擦除掉。擦除法的好处是实现简单、非常容易实现<code>Backport</code>，运行期也能节省一些类型所占的内存空间。但坏处是无法像C#等有真泛型支持的语言那样，将泛型类型与用户定义的普通类型同等对待。<strong>Signature</strong>属性就是为了弥补这个缺陷而增设的，现在Java的反射API能够获取泛型类型，最终的数据来源也就是这个属性。</li></ol><ol start="10"><li><strong>BootstrapMethods属性</strong>：该属性在<code>JDK 1.7</code>发布后增加到Class文件规范之中，是一个复杂的变长属性，位于类文件的属性表中。这个属性用于保存<code>invokedynamic</code>指令引用的引导方法限定符。</li></ol><hr><p>该文章来源《深入理解Java虚拟机》</p><hr><h3 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Java虚拟机(2)之九-内存分配与回收策略</title>
      <link href="/2019/07/01/shen-ru-li-jie-java-xu-ni-ji-2-zhi-jiu-nei-cun-fen-pei-yu-hui-shou-ce-lue/"/>
      <url>/2019/07/01/shen-ru-li-jie-java-xu-ni-ji-2-zhi-jiu-nei-cun-fen-pei-yu-hui-shou-ce-lue/</url>
      
        <content type="html"><![CDATA[<h4 id="对象优先在Eden分配"><a href="#对象优先在Eden分配" class="headerlink" title="对象优先在Eden分配"></a>对象优先在<code>Eden</code>分配</h4><p>大多数情况下，对象在新生代<code>Eden</code>区中分配。但<code>Eden</code>区没有足够的空间进行分配时，虚拟机将发生一次<code>Minor GC</code>。如果当GC发现对象无法全部放入<code>Survivor</code>空间，就会通过分配担保机制提前转移到老年代中。</p><h4 id="大对象直接进入老年代"><a href="#大对象直接进入老年代" class="headerlink" title="大对象直接进入老年代"></a>大对象直接进入老年代</h4><p>大对象指，需要大量连续内存空间的Java对象，最典型的就是那种很长的字符串以及数组。</p><p>虚拟机提供一个<code>-XX:PretenureSizeThreshold</code>参数，令大于这个设置值的对象直接在老年代分配。这样做目的是避免在<code>Eden</code>区以及两个<code>Survivor</code>区之间发生大量的内存复制。</p><h4 id="长期存活的对象将进入老年代"><a href="#长期存活的对象将进入老年代" class="headerlink" title="长期存活的对象将进入老年代"></a>长期存活的对象将进入老年代</h4><p>虚拟机给每个对象定义一个对象年龄(<code>Age</code>)计数器。如果对象在<code>Eden</code>出生并经过第一次<code>Minor GC</code>后仍然存活，并且能被<code>Survivor</code>容纳的话，将被移动到<code>Survivor</code>空间中，并且对象年龄设为1.对象在<code>Survivor</code>区中每熬过一次<code>Minor GC</code>，年龄就增长1岁，当年龄增加到一定程度(默认15岁)，就会被晋升到老年代中。可以通过参数<code>-XX:MaxTenuringThreshold</code>设置年龄阈值。</p><h4 id="动态对象年龄判断"><a href="#动态对象年龄判断" class="headerlink" title="动态对象年龄判断"></a>动态对象年龄判断</h4><p>虚拟机并不是永远要求对象的年龄必须达到<code>MaxTenuringThreshold</code>才能晋升老年代，如果在<code>Survivor</code>空间相同年龄所有对象大小的综合大于<code>Survivor</code>空间的一半，年龄大于等于该年龄的对象就可以直接进入老年代。</p><h4 id="空间分配担保"><a href="#空间分配担保" class="headerlink" title="空间分配担保"></a>空间分配担保</h4><p>在发生<code>Minor GC</code>之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果成立，那么<code>Minor GC</code>确保是安全的。如果不成立，则虚拟机会查看<code>HandlePromotionFailure</code>设置值是否允许担保失败。如果允许，那么会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次<code>Minor GC</code>，尽管这次<code>Minor GC</code>是有风险的；如果小于，或者<code>HandlePromotionFailure</code>设置为不允许冒险，这时改为进行一次<code>Full GC</code>。</p><hr><p>该文章来源《深入理解Java虚拟机》</p><hr><h4 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h4><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Java虚拟机(2)之八-垃圾收集器</title>
      <link href="/2019/06/29/shen-ru-li-jie-java-xu-ni-ji-2-zhi-ba-la-ji-shou-ji-qi/"/>
      <url>/2019/06/29/shen-ru-li-jie-java-xu-ni-ji-2-zhi-ba-la-ji-shou-ji-qi/</url>
      
        <content type="html"><![CDATA[<p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/HotSpot%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8.jpg?raw=true" alt="HotSpot垃圾收集器"></p><p>图为<code>JDK 1.7 update 14</code>之后的<code>HotSpot</code>虚拟机。</p><p>图中展示7种不同分代的收集器，收集器之间有连线说明可以搭配使用。虚拟机所处的区域，表示属于新生代收集器还是老年代收集器。</p><h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><h4 id="并行和并发"><a href="#并行和并发" class="headerlink" title="并行和并发"></a>并行和并发</h4><ul><li><strong>并行(Parallel)</strong>：指多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态。</li><li><strong>并发(Concurrent)</strong>：指用户线程与垃圾收集线程同时执行（但不一定是并行的，可能会交替执行），用户程序在继续运行。而垃圾收集程序运行在另一个CPU上。</li></ul><h4 id="吞吐量-Throughput"><a href="#吞吐量-Throughput" class="headerlink" title="吞吐量(Throughput)"></a>吞吐量(Throughput)</h4><p>吞吐量就是<strong>CPU用于运行用户代码的时间</strong>与<strong>CPU总消耗时间</strong>的比值，即<strong>吞吐量 = 运行用户代码时间 /（运行用户代码时间 + 垃圾收集时间）。</strong></p><p>假设虚拟机总共运行了100分钟，其中垃圾收集花掉1分钟，那吞吐量就是99%。</p><h4 id="Minor-GC-和-Full-GC"><a href="#Minor-GC-和-Full-GC" class="headerlink" title="Minor GC 和 Full GC"></a>Minor GC 和 Full GC</h4><ul><li><strong>新生代GC(Minor GC)</strong>：指发生在新生代的垃圾收集动作，因为Java对象大多都具备朝生夕灭的特性，所以Minor GC非常频繁，一般回收速度也比较快。</li><li><strong>老年代GC(Major GC / Full GC)</strong>：指发生在老年代的GC，出现了Major GC，经常会伴随至少一次的Minor GC（但非绝对的，在Parallel Scavenge收集器的收集策略里就有直接进行Major GC的策略选择过程）。Major GC的速度一般会比Minor GC慢10倍以上。</li></ul><h3 id="新生代收集器"><a href="#新生代收集器" class="headerlink" title="新生代收集器"></a>新生代收集器</h3><h4 id="1-Serial收集器"><a href="#1-Serial收集器" class="headerlink" title="1.Serial收集器"></a>1.<code>Serial</code>收集器</h4><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/serial%E6%94%B6%E9%9B%86%E5%99%A8.jpeg?raw=true" alt="Serial收集器"></p><p><code>Serial</code>收集器是最基本、历史最悠久的收集器。这个收集器是一个单线程的收集器，它的“单线程”并不仅仅说明它只会使用一个CPU或者一条收集线程去完成垃圾收集工作，更重要的是在它进行垃圾收集时，必须暂停其他所有的工作线程，直到它收集结束。</p><p>到现在为止，<code>Serial</code>收集器仍然是虚拟机运行在Client模式下默认的新生代收集器。它有着优于其他收集器的地方：简单高效(与其他收集器的单线程相比)，对于限定单个CPU的环境来说，<code>Serial</code>收集器由于没有线程交互的开销，专心做垃圾收集自然获得最高的单线程收集效率。</p><h4 id="2-ParNew收集器"><a href="#2-ParNew收集器" class="headerlink" title="2.ParNew收集器"></a>2.<code>ParNew</code>收集器</h4><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/parNew%E6%94%B6%E9%9B%86%E5%99%A8.jpeg?raw=true" alt="ParNew收集器"></p><p><code>ParNew</code>收集器实际上是<code>Serial</code>收集器的多线程版本，除了使用多条线程进行垃圾回收以外，其余行为包括<code>Serial</code>收集器可用的所有控制参数(例如：<code>-XX:SurvivorRatio</code>、<code>-XX:PretenureSizeThreshold</code>、<code>-XX:HandlerPromotionFailure</code>等)、收集算法、<code>Stop The World</code>、对象分配规则、回收策略等都与<code>Serial</code>收集器完全一样，在实现上，这两种收集器也公用相当多代码。</p><p><code>ParNew</code>收集器是许多运行在Server模式下的虚拟机中首选的新生代收集器，其中一个重要原因是，除了<code>Serial</code>收集器，目前只有它能与<code>CMS</code>收集器配合工作。</p><p><code>CMS</code>作为老年代收集器，无法与<code>JDK 1.4.0</code>中已经存在的新生代收集器<code>Parallel Scavenge</code>配合工作。所以在<code>JDK 1.5</code>中使用<code>CMS</code>来收集老年代的时候，新生代只能选择<code>ParNew</code>或者<code>Serial</code>收集器的一个。<code>ParNew</code>收集器也是使用<code>-XX:+UseConcMarkSweepGC</code>选项后的默认新生代收集器，也可以使用<code>-XX:+UseParNewGC</code>选项来强制使用它。</p><p><code>ParNew</code>收集器在单CPU环境中绝对不会比<code>Serial</code>有更好的效果，甚至由于存在线程交互的开销，该收集器在通过超线程技术实现的两个CPU环境都不能百分百保证可以超越<code>Serial</code>收集器。当然，随着可以使用的CPU的数量的增加，它对于GC时系统资源的有效利用还是很有好处的。它默认开启的收集线程数与CPU数量相同，在CPU非常多的情况下，可以使用<code>-XX:ParallelGCThreads</code>参数来限制垃圾收集的线程数。</p><h4 id="3-Parallel-Scavenge收集器"><a href="#3-Parallel-Scavenge收集器" class="headerlink" title="3. Parallel Scavenge收集器"></a>3. <code>Parallel Scavenge</code>收集器</h4><p><code>Parallel Scavenge</code>收集器是一个新生代收集器，也是复制算法收集器，又是多线程收集器，那和<code>ParNew</code>有什么区别呢？</p><p><code>Parallel Scavenge</code>收集器的特点在于它的关注点与其他收集器不同，<code>CMS</code>等收集器的关注点是尽可能缩短垃圾收集时用户线程的停顿时间，而<code>Parallel Scavenge</code>收集器的目标是达到一个可控制的吞吐量(<code>Throughput</code>)。吞吐量就是<code>CPU</code>用于运行用户代码的时间与<code>CPU</code>总消耗时间的比值。即吞吐量=运行用户代码/(运行用户代码时间+垃圾收集时间)。</p><p>停顿时间越短越适合需要与用户交互的程序，良好的响应速度能提升用户体验，而高吞吐量则可以高效率地利用CPU时间，尽快完成程序的运算任务，主要适合在后台运算而不需要太多的交互的任务。</p><p><code>Parallel Scavenge</code>收集器提供两个参数用于精确控制吞吐量，分别是控制最大垃圾收集停顿时间<code>-XX:MaxGCPauseMillis</code>参数以及直接设置吞吐量大小的<code>-XX:GCTimeRatio</code>参数。</p><p><code>-XX:MaxGCPauseMillis</code>参数允许的值是一个大于0的毫秒数，收集器将尽可能地保证内存回收花费的时间不超过设定值。将这个值设置小一点并不会使系统的垃圾收集速度变得更快，GC停顿时间缩短是以牺牲吞吐量和新生代空间来换取的：系统把新生代跳小一点，收集300MB新生代比收集500MB快，也直接导致垃圾收集发生更加频繁，原来10秒收集一次、每次停顿100毫秒，现在变成5秒收集一次、每次停顿70毫秒。停顿时间下降了，但吞吐量也下降了。</p><p><code>-XX:GCTimeRatio</code>参数的值应当是一个大于0且小于100的整数，也就是垃圾收集时间占总时间的比率，相当于吞吐量的倒数。如果设置为19，那允许的最大GC时间就占总时间的5%(1/(1+19))，默认为99，就是允许最大1%()1/(1+99))的垃圾收集时间。</p><p><code>Parallel Scavenge</code>收集器经常被称为“吞吐量优先”收集器。<code>Parallel Scavenge</code>收集器还有一个参数<code>-XX:+UseAdaptiveSizePolicy</code>。这是一个开关参数，这个参数打开之后，就不需要手动指定新生代的大小(<code>-Xmn</code>)、<code>Eden</code>与<code>Survivor</code>区的比例(<code>-XX:SurvivorRatio</code>)、晋升老年代对象年龄(<code>-XX:PretenureSizeThreshold</code>)等参数细节，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最适合的停顿时间或最大的吞吐量，这种调节方式成为GC自适应的调节策略(<code>GC Ergonomics</code>)。如果对收集器运行不太了解，手工优化存在困难，使用<code>Parallel Scavenge</code>收集器收集器配合自适应调节策略，把内存管理的调优任务交给虚拟机去完成将是一个不错的选择。只需要把基本的内存数据设置好(如<code>-Xmx</code>设置最大堆)，然后使用<code>-XX:MaxGCPauseMillis</code>参数(更关注最大停顿时间)或<code>-XX:GCTimeRatio</code>参数(更关注吞吐量)给虚拟机设定一个优化目标。那具体细节参数的调节工作由虚拟机完成。自适应调节策略也是<code>Parallel Scavenge</code>收集器与<code>ParNew</code>收集器的一个重要区别。</p><h3 id="老年代收集器"><a href="#老年代收集器" class="headerlink" title="老年代收集器"></a>老年代收集器</h3><h4 id="4-Serial-Old收集器"><a href="#4-Serial-Old收集器" class="headerlink" title="4.Serial Old收集器"></a>4.<code>Serial Old</code>收集器</h4><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/serial%E6%94%B6%E9%9B%86%E5%99%A8.jpeg?raw=true" alt="Serial收集器"></p><p><code>Serila Old</code>是<code>Serial</code>收集器的老年代版本，同样是一个单线程收集器，使用“标记-整理”算法。这个收集器主要意义也是在于给Client模式下的虚拟机使用。如果在Server模式下，主要还有两大用途：一种是在<code>JDK 1.5</code>以及之前的版本中与<code>Parallel Scavenge</code>收集器搭配使用，另一种用途是作为CMS收集器的后备预案，在并发收集发生<code>Concurrent Mode Failure</code>时使用。</p><h4 id="5-Parallel-Old收集器"><a href="#5-Parallel-Old收集器" class="headerlink" title="5.Parallel Old收集器"></a>5.<code>Parallel Old</code>收集器</h4><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/parallelScavenge.jpeg?raw=true" alt="Parallel Scavenge/Parallel Old收集器运行示例"></p><p><code>Parallel Old</code>是<code>Parallel Scavenge</code>收集器的老年代版本，使用多线程和“标记-整理”算法。这个收集器是在<code>JDK 1.6</code>中才开始提供。在此之前，新生代的<code>Parallel Scavenge</code>收集器一直处于比较尴尬的状态。原因是，如果新生代选择<code>Parallel Scavenge</code>收集器，老年代除了<code>Serial Old</code>收集器外别无选择。由于老年代<code>Serial Old</code>收集器在服务端应用性能上的“拖累”，使用<code>Parallel Scavenge</code>收集器也未必能在整体应用上获得吞吐量最大化的效果，由于单线程的老年代收集中无法充分利用服务器多CPU的处理能力，在老年代很大而且硬件比较高级的环境中，这种组合的吞吐量甚至不一定有<code>ParNew</code>加<code>CMS</code>组合给力。</p><p>知道<code>Parallel Old</code>收集器出现，“吞吐量优先”收集器终于有了名副其实的应用组合，在注重吞吐量以及CPU资源敏感的场合，都可以优先考虑<code>Parallel Scavenge</code>加<code>Parallel Old</code>收集器。</p><h4 id="6-CMS收集器"><a href="#6-CMS收集器" class="headerlink" title="6.CMS收集器"></a>6.<code>CMS</code>收集器</h4><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/CMS.jpeg?raw=true" alt="CMS"></p><p><code>CMS</code>(<code>Concurrent Mark Sweep</code>)收集器是一种以获取最短回收停顿时间为目标的收集器。</p><p><code>CMS</code>收集器是基于“标记-清除”算法实现的，它的运作过程分为4个步骤：</p><ul><li><strong>初始标记</strong>(<code>CMS initial mark</code>)</li><li><strong>并发标记</strong>(<code>CMS concurrent mark</code>)</li><li><strong>重新标记</strong>(<code>CMS remark</code>)</li><li><strong>并发清除</strong>(<code>CMS concurrent sweep</code>)</li></ul><p>其中，初始标记、重新标记这两个步骤仍然需要<code>Stop The World</code>。初始标记仅仅是标记一下<code>GC Roots</code>能直接关联到的对象，速度很快，并发标记阶段就是进行进行<code>GC Roots Tracing</code>的过程，而重新标记阶段则是为了修正并发标记期间因为用户程序继续运行而导致标记产生变动的那部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段稍长一些，但远比并发标记的时间短。</p><p>由于整个过程耗时最长的并发标记和清除并发过程收集器线程都是可以与用户线程一起工作，所以，从总体上来说，<code>CMS</code>收集器的内存回收过程是与用户线程一起并发执行的。</p><p><code>CMS</code>是一款优秀的收集器，主要体现在：并发收集、低停顿。但是<code>CMS</code>远远达不到完美的程度，有以下3个明显的缺点：</p><ul><li><code>CMS</code>收集器对CPU资源非常敏感。在并发阶段，虽然不会导致用户线程停顿，但是会因为占用一部分线程(或者说CPU资源)而导致应用程序变慢，总吞吐量会降低。<code>CMS</code>默认启动的回收线程数是(CPU数量+3)/4，也就是当CPU在4个以上时，并发回收时垃圾收集线程不少于25%的CPU资源，并且随着CPU数量的增加而下降。但是当CPU不足4个(譬如2个)时，<code>CMS</code>对用户程序的影响就可能变得很大，如果本来CPU负载就比较大，还分出一半的运算能力去执行收集线程，就可能导致用户程序的执行速度忽然降低50%，让人无法接受。为了应付这种情况，虚拟机提供一种称为“增量式并发收集器”(<code>Incremental Concurrent Mark Sweep/i-CMS</code>)的<code>CMS</code>收集器变种，所做的事情和单CPU年代PC机操作系统使用抢占式来模拟多任务机制的思想一样，就是在并发标记、清理的时候让GC线程、用户线程交替执行，尽量减少GC线程独占资源的时间，这样整个垃圾收集的过程会更长，但对用户程序的影响就会显得少一些，也就是速度下降没那么明显。实践证明，增量式收集器效果一般，在目前版本中，<code>i-CMS</code>已经被声明“deprecated”。</li><li><code>CMS</code>收集器无法处理浮动垃圾(<code>Floating Garbage</code>)，可能出现<code>Concurrent Mode Failure</code>失败导致另一次<code>Full GC</code>的产生。由于<code>CMS</code>并发清理阶段的用户线程还在运行着，伴随程序运行自然会有新的垃圾不断产生，这部分垃圾出现在标记过程之后，<code>CMS</code>无法在当次收集中处理掉它们，只好留到下一次GC时再清除掉。这部分垃圾就称为“浮动垃圾”。也是由于在垃圾收集阶段用户线程还需要运行，也就是还需要预留足够的内存空间给用户线程使用，因此<code>CMS</code>收集器不能像其他收集器那样等到老年代几乎完全被填满了再进行收集，需要预留一部分空间提供并发收集时的程序运作使用。在<code>JDK 1.5</code>默认设置下，<code>CMS</code>收集器当老年代使用68%的空间后被激活，这是一个偏保守的设置，如果老年代增长不是太快，可以适当调高参数<code>-XX:CMSInitiatingOccupancyFraction</code>的值来提高触发百分比，以便降低内存回收次数从而获得更好的性能，在<code>JDK 1.6</code>中，<code>CMS</code>收集器的启动阈值已经提升至92%。要是<code>CMS</code>运行期间预留的内存无法满足程序需要，就会出现一次<code>Concurrent Mode Failure</code>失败，这时虚拟机将启动后备方案：临时启动<code>Serial Old</code>收集器来重新进行老年代的垃圾收集，这样停顿时间就很长。所以说参数<code>-XX:CMSInitiatingOccupancyFraction</code>设置太高很容易导致大量<code>Concurrent Mode Failure</code>失败，性能反而降低。</li><li><code>CMS</code>是一款基于“标记-清除”算法实现的收集器，收集结束会产生大量空间碎片。空间碎片过多时，将会给大对象分配带来很大麻烦，往往出现老年代还有很大空间剩余，但是无法找到足够大的连续空间来分配当前对象，不得不提前触发一次<code>Full GC</code>。为了解决这个问题，<code>CMS</code>收集器提供一个<code>-XX:+UseCMSCompactAtFullCollection</code>开关参数(默认开启)，用于在<code>CMS</code>收集器顶不住要进行<code>Full GC</code>时开启内存碎片的合并整理过程，内存整理的过程是无法并发的，空间碎片问题解决了，但停顿时间不得不变长。虚拟机设计者还提供了另一个参数<code>-XX:CMSFullGCsBeforeCompaction</code>，这个参数是用于设置执行对少次不压缩的<code>Full GC</code>后，跟着来一次带压缩的(默认值为0，表示每次进入<code>Full GC</code>时都进行碎片整理)。</li></ul><h3 id="7-G1收集器"><a href="#7-G1收集器" class="headerlink" title="7.G1收集器"></a>7.<code>G1</code>收集器</h3><p><code>G1</code>是一款面向服务端应用的垃圾收集器。与其他<code>GC</code>收集器相比，<code>G1</code>具备如下特点。</p><ul><li><strong>并行与并发</strong>：<code>G1</code>能够充分利用多CPU、多核环境下的硬件优势，使用多个CPU(CPU或者CPU核心)来缩短<code>Stop The World</code>停顿的时间，部分其他收集器原来需要停顿Java线程执行GC动作，<code>G1</code>收集器仍然可以通过并发方式让Java程序继续执行。</li><li><strong>分代收集</strong>：与其他收集器一样，分代概念在<code>G1</code>中依然得以保留。虽然<code>G1</code>可以不需要其他收集器配合就能独立管理整个GC堆，但它能够采用不同的方式去处理新创建的对象和已经存活了一段时间、熬过多次GC的就对象已获得更好的收集效果。</li><li><strong>空间整合</strong>：与<code>CMS</code>的“标记-整理”算法不同，<code>G1</code>从整体上看是基于“标记-整理”算法实现的收集器，从局部(两个<code>Region</code>之间)上来看是基于“复制”算法实现的，但无论如何，这两种算法都意味着<code>G1</code>运作期间不会产生内存空间碎片，收集后能提供规整的可用内存。这种特性有利于程序长时间运行，分配大对象不会因为无法找到连续内存空间而提前触发下一次GC。</li><li><strong>可预测的停顿</strong>：这是<code>G1</code>相对于<code>CMS</code>的另一大优势，降低停顿时间是<code>G1</code>和<code>CMS</code>的另一个优势，降低停顿时间是<code>G1</code>和<code>CMS</code>共同的关注点，但<code>G1</code>除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒，这几乎已经是实时Java(RTSJ)的垃圾收集器的特征了。</li></ul><p>在<code>G1</code>之前的其他收集器进行收集的范围都是整个新生代或者老年代，而<code>G1</code>不再是这样。使用<code>G1</code>收集器时，Java堆的内存布局就与其他收集器有很大差别，它将整个Java堆划分为多个大小相等的独立区域(<code>Region</code>)，虽然还保留新生代和老年代的概念，但新生代和老年代不再是物理隔离，都是一部分<code>Region</code>(不需要连续)的集合。</p><p><code>G1</code>收集器之所以能建立可预测的停顿时间模型，是因为有计划地避免在整个Java堆中进行全区域的垃圾收集。<code>G1</code>跟踪各个<code>Region</code>里面的垃圾堆积的价值大小(回收所获得的空间大小以及回收所需要时间的经验值)，在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的<code>Region</code>(这也是<code>Garbage-First</code>的由来)。这个按照<code>Region</code>划分内存空间以及优先级的区域回收，保证在有限时间内的尽可能高效收集。</p><p>但是，<code>Region</code>并不是孤立的。一个对象分配在某个<code>Region</code>中，并不是只能被本<code>Region</code>中的其他对象引用，而是可以和任意对象发生引用关系。那在做可达性判定确定对象是否存活的时候，岂不是需要扫描整个Java堆才能保证准确性？</p><p>在<code>G1</code>收集器中，<code>Region</code>之间的对象引用以及其他收集器中的新生代与老年代之间的对象引用，虚拟机都是使用<code>Remembered Set</code>来避免全堆扫描的。<code>G1</code>中每个<code>Region</code>都有一个与之对应的<code>Remembered Set</code>，虚拟机发现程序在对<code>Reference</code>类型的数据进行写操作时，会产生一个<code>Write Barrier</code>暂时中断写操作，检查<code>Reference</code>引用的对象是否处于不同的<code>Region</code>之中，如果是，便通过<code>Cardtable</code>把相关引用信息记录到被引用对象所属的<code>Region</code>的<code>Remembered Set</code>之中。当进行垃圾回收时，在GC根节点的枚举范围中加入<code>Remembered Set</code>即可保证不对全堆扫描也不会遗漏。</p><p><code>G1</code>收集器运作大致可划分以下步骤：</p><ul><li><strong>初始标记</strong>(<code>Initial Marking</code>)</li><li><strong>并发标记</strong>(<code>Concurrent Marking</code>)</li><li><strong>最终标记</strong>(<code>Final Marking</code>)</li><li><strong>筛选回收</strong>(<code>Live Data Counting and Evacuation</code>)</li></ul><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/G1%E6%94%B6%E9%9B%86%E5%99%A8.jpeg?raw=true" alt="G1收集器"></p><p>初始标记只是标记一下<code>GC Roots</code>能直接关联的对象，并且修改<code>TAMS</code>(Next Top at Mark Start)的值，让下一阶段用户程序并发运行时，能在正确可用的<code>Region</code>中创建新对象，这阶段需要停顿线程，但耗时很短。</p><p>并发标记阶段是从<code>GC Roots</code>开始对堆中对象进行可达性分析，找出存活对象，这个阶段耗时较长，但可与用户程序并发执行。</p><p>最终标记阶段则是修正并发标记阶段因用户程序运行而导致标记产生变动的那部分标记记录，虚拟机将这段时间对象变化记录在线程<code>Remembered Set Logs</code>里面，最终标记需要把<code>Remembered Set Logs</code>的数据合并到<code>Remembered Set</code>中，这阶段需停顿线程，但可并行执行。</p><p>筛选回收阶段首先对各个<code>Region</code>的回收价值和成本进行排序，根据用户所期望的GC停顿时间来制定回收计划。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><table><thead><tr><th align="center">收集器</th><th align="center">串行、并行、并发</th><th align="center">新生代/老年代</th><th align="center">算法</th><th align="center">目标</th><th align="center">适用场景</th></tr></thead><tbody><tr><td align="center"><strong>Serial</strong></td><td align="center">串行</td><td align="center">新生代</td><td align="center">复制算法</td><td align="center">响应速度优先</td><td align="center">单CPU环境下的Client模式</td></tr><tr><td align="center"><strong>Serial Old</strong></td><td align="center">串行</td><td align="center">老年代</td><td align="center">标记-整理</td><td align="center">响应速度优先</td><td align="center">单CPU环境下的Client模式、CMS的后备预案</td></tr><tr><td align="center"><strong>ParNew</strong></td><td align="center">并行</td><td align="center">新生代</td><td align="center">复制算法</td><td align="center">响应速度优先</td><td align="center">多CPU环境时在Server模式下与CMS配合</td></tr><tr><td align="center"><strong>Parallel Scavenge</strong></td><td align="center">并行</td><td align="center">新生代</td><td align="center">复制算法</td><td align="center">吞吐量优先</td><td align="center">在后台运算而不需要太多交互的任务</td></tr><tr><td align="center"><strong>Parallel Old</strong></td><td align="center">并行</td><td align="center">老年代</td><td align="center">标记-整理</td><td align="center">吞吐量优先</td><td align="center">在后台运算而不需要太多交互的任务</td></tr><tr><td align="center"><strong>CMS</strong></td><td align="center">并发</td><td align="center">老年代</td><td align="center">标记-清除</td><td align="center">响应速度优先</td><td align="center">集中在互联网站或B/S系统服务端上的Java应用</td></tr><tr><td align="center"><strong>G1</strong></td><td align="center">并发</td><td align="center">both</td><td align="center">标记-整理+复制算法</td><td align="center">响应速度优先</td><td align="center">面向服务端应用，将来替换CMS</td></tr></tbody></table><hr><p>该文章来源《深入理解Java虚拟机》</p><hr><h3 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Java虚拟机(2)之七-垃圾收集算法</title>
      <link href="/2019/06/23/shen-ru-li-jie-java-xu-ni-ji-2-zhi-qi-la-ji-shou-ji-suan-fa/"/>
      <url>/2019/06/23/shen-ru-li-jie-java-xu-ni-ji-2-zhi-qi-la-ji-shou-ji-suan-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="1-标记-清除算法-Mark-Sweep"><a href="#1-标记-清除算法-Mark-Sweep" class="headerlink" title="1.标记-清除算法(Mark-Sweep)"></a>1.标记-清除算法(Mark-Sweep)</h3><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4%E7%AE%97%E6%B3%95.jpg?raw=true" alt="标记清除算法"></p><p>算法分为两个阶段：首先标记出需要回收的对象，在标记完成后统一回收所有被标记的对象。</p><p>该算法主要有两个不足：</p><ul><li>一个是效率问题，标记和清除两个效率都不高。</li><li>另一个是空间问题，标记清除之后会产生大量不连续的内存碎片，碎片太多导致程序运行需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾回收。</li></ul><h3 id="2-复制算法-Copying"><a href="#2-复制算法-Copying" class="headerlink" title="2.复制算法(Copying)"></a>2.复制算法(Copying)</h3><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E5%A4%8D%E5%88%B6%E7%AE%97%E6%B3%95.jpg?raw=true" alt="复制算法"></p><p>将容量划分大小相等的两块，每次只使用其中一块。当这一块内存用完了，就将还存活着的对象复制到另外一块上面，再把已使用过的内存空间一次清理掉。这种算法的代价是将内存缩小为原来的一半。</p><p>现在的商业虚拟机都是采用这种收集算法来回收新生代，IBM研究表明，新生代中的对象98%是“朝生夕死”，所以不需要按照1:1的比例来划分内存空间，而是将内存划分一块较大的<code>Eden</code>空间和两块较小的<code>Survivor</code>空间，每次使用<code>Eden</code>和其中一块<code>Survivor</code>。当回收时，将<code>Eden</code>和<code>Survivor</code>中存活的对象复制到另一块<code>Survivor</code>空间上，最后清理掉<code>Eden</code>和第一块<code>Survivor</code>。<code>HotSpot</code>默认<code>Eden</code>和<code>Survivor</code>比例是8:1，就是说新生代可用内存为整个新生代空间的90%(80%+10%)。当然98%的对象可回收只是一般场景下的数据，没办法保证每次回收都只有不多于10%的对象存活，当<code>Survivor</code>空间不够时，需要依赖其他内存(指老年代)进行分配担保(<code>Handle Promotion</code>)。</p><h3 id="3-标记-整理算法-Mark-Compact"><a href="#3-标记-整理算法-Mark-Compact" class="headerlink" title="3.标记-整理算法(Mark-Compact)"></a>3.标记-整理算法(Mark-Compact)</h3><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E6%A0%87%E8%AE%B0%E6%95%B4%E7%90%86%E7%AE%97%E6%B3%95.jpg?raw=true" alt="标记整理算法"></p><p>复制算法在对象存活率较高的时候就要进行较多的复制操作，效率将会变低。更关键的是，如果不想浪费50%的空间，就需要有额外的空间进行分配担保，以应对被使用的内存中的所有对象都100%存活的极端情况，所以在老年代一般不使用这种算法。</p><p>根据老年代的的特点，提出“标记-整理算法”，标记过程和“标记-清除”算法一样，但是后续不是直接对可回收对象清除，而是让存活对象都向一端移动，然后直接清除掉边界以外的内存。</p><h3 id="4-分代收集算法-Generational-Collection"><a href="#4-分代收集算法-Generational-Collection" class="headerlink" title="4.分代收集算法(Generational Collection)"></a>4.分代收集算法(Generational Collection)</h3><p>分代收集算法根据对象存活周期的不同将内存划分几块。一般是分为新生代和老年代。</p><p>在新生代中，每次垃圾收集时都有大批对象死亡，只有少量存活，那就选择复制算法，只需要付出少量存活对象的复制成本就可以完成收集。</p><p>在老年代中，因为对象存活率高、没有额外空间进行分配担保，就必须使用“标记-清除”或者“标记-整理”算法来进行回收。</p><hr><p>该文章来源《深入理解Java虚拟机》</p><hr><h3 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Java虚拟机(2)之六-HotSpot的算法实现</title>
      <link href="/2019/06/21/shen-ru-li-jie-java-xu-ni-ji-2-zhi-liu-hotspot-de-suan-fa-shi-xian/"/>
      <url>/2019/06/21/shen-ru-li-jie-java-xu-ni-ji-2-zhi-liu-hotspot-de-suan-fa-shi-xian/</url>
      
        <content type="html"><![CDATA[<h3 id="1、枚举根节点"><a href="#1、枚举根节点" class="headerlink" title="1、枚举根节点"></a>1、枚举根节点</h3><p>从可达性分析中从<code>GC Roots</code>节点找引用链这个操作为例，可作为<code>GC Roots</code>的节点主要在全局的引用(例如常量或类静态属性)与执行上下文(例如栈帧中的本地变量表)中，现在很多应用仅仅方法就数百兆，如果逐个检查这里面的引用，必然消耗很多时间。</p><p>另外，可达性分析对执行时间的敏感还体现在<code>GC</code>停顿上，因为这个分析必须在一个能确保一致性的快照中执行——指在整个分析过程中整个执行系统好像被冻结在某个时间点上，不可以出现分析过程中对象引用关系还在不断变化，否则分析的准确性就无法保证。</p><p>目前主流的Java虚拟机都是使用的准确式GC，所以当执行系统停顿下来后，并不需要一个不漏地检查完所有执行上下文和全局的引用位置，虚拟机应该有办法直接得知哪些地方存放着对象引用。在<code>HotSpot</code>中，使用一组<code>OopMap</code>的数据结构来达到这个目的，在类加载完成的时候，<code>HotSpot</code>就把对象内什么偏移量上是什么类型的数据计算出来，在JIT编译过程中，也会在特定的位置记录下栈和寄存器中哪些位置是引用。这样GC在扫描的时候就可以直接指导这些信息。</p><h3 id="2、安全点"><a href="#2、安全点" class="headerlink" title="2、安全点"></a>2、安全点</h3><p>在<code>OopMap</code>协助下，<code>HotSpot</code>可以快速准确完成<code>GC Roots</code>枚举，但是<code>OopMap</code>内容变化的指令非常多，如果为每一条指令都生成对应的<code>OopMap</code>，那将需要大量的额外空间，这样GC成本就很高。</p><p>实际上，<code>HotSpot</code>没有为每条指令都生成<code>OopMap</code>，前面提到只是在“特定的位置”记录这些信息，这些位置称为安全点(<code>Safepoint</code>)，即程序执行时并非在所有地方都能停顿下来开始GC，只有到达安全点才能暂停。<code>Safepoint</code>的选定既不能太少以致于让GC等待时间太长，也不能过于频繁以致于过分增大运行时的负荷。</p><p>安全点的选定基本上是以程序“是否具有让程序长时间执行的特征”为标准进行选定的——因为每条指令执行的时候都很短暂，程序不太可能因为指令流长度太长这个原因而过长时间运行，“长时间执行”的最明显特征就是指令序列复用，例如方法调用、循环跳转、异常跳转等，所以具有这些功能的指令才会产生<code>Safepoint</code>。</p><p>对于<code>Safepoint</code>，另一个需要考虑的问题是如何在GC发生时让所有线程(这里不包括执行JNI调用的线程)都跑到最近的安全点上再停顿下来。有两种方案：</p><ul><li><strong>抢先式中断(Preemptive Suspension)</strong>:不需要线程的执行代码主动去配合，在GC发生时，首先把所有线程全部中断，如果发现有线程中断的地方不在安全点，就恢复线程，让它跑到安全点。现在几乎没有虚拟机实现采用抢先式中断来暂停线程从而响应GC事件。</li><li><strong>主动式中断(Voluntary Suspension)</strong>:当GC需要中断线程的时候，不直接对线程操作，仅仅简单地设置一个标志，各个线程执行时主动去轮询这个标志，发现中断标志为真就自己中断挂起。轮询标志的地方和安全点是重合的，另外再加上创建对象需要分配内存的地方。</li></ul><h3 id="3、安全区域"><a href="#3、安全区域" class="headerlink" title="3、安全区域"></a>3、安全区域</h3><p>使用<code>Safepoint</code>机制保证了程序执行时，在不太长的时间内就会遇到可进入GC的<code>Safepoint</code>。</p><p>如果程序不执行，就是没有分配CPU时间，典型的例子就是线程处于Sleep或者Blocked状态，这时候线程无法响应JVM的中断请求，走到安全的地方去中断挂起，JVM也不太可能等待线程重新分配CPU时间。对于这种情况，就需要安全区域(<code>Safe Region</code>)来解决。</p><p>安全区域是指在一段代码片段中，引用关系不会发生变化。在这个区域中任何地方开始GC都是安全的。可以把<code>Safe Region</code>看做是被扩展的<code>Safepoint</code>。</p><p>在线程执行到<code>Safe Region</code>中的代码时，首先标识自己进入了<code>Safe Region</code>，那样，当这段时间JVM要发起GC时，就不用管标识自己为<code>Safe Region</code>的线程了。在线程要离开<code>Safe Region</code>时，它要检查是否已经完成根节点枚举(或者是整个GC过程)，如果完成了，线程继续执行，否则就必须等待知道收到可以安全离开<code>Safe Region</code>的信号为止。</p><hr><p>该文章来源《深入理解Java虚拟机》</p><hr><h3 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Java虚拟机(2)之五-对象的死亡判定</title>
      <link href="/2019/06/20/shen-ru-li-jie-java-xu-ni-ji-2-zhi-wu-dui-xiang-de-si-wang-pan-ding/"/>
      <url>/2019/06/20/shen-ru-li-jie-java-xu-ni-ji-2-zhi-wu-dui-xiang-de-si-wang-pan-ding/</url>
      
        <content type="html"><![CDATA[<h3 id="对象存活判定算法"><a href="#对象存活判定算法" class="headerlink" title="对象存活判定算法"></a>对象存活判定算法</h3><h4 id="1-引用计数算法"><a href="#1-引用计数算法" class="headerlink" title="1.引用计数算法"></a>1.引用计数算法</h4><p>给对象添加一个引用计数器，每当有一个地方引用它时，计数器值就加1；当引用失效时，计数器值就减1；任何时刻计数器为0的对象就是不可能再被使用的。</p><p>引用计数算法的实现简单，判定效率也很高，在大部分情况下都是一个不错的算法，但是，主流的Java虚拟机没有选用引用计数算法来管理内存，最主要的原因是它很难解决对象之间相互循环引用的问题。</p><h4 id="2-可达性分析算法"><a href="#2-可达性分析算法" class="headerlink" title="2.可达性分析算法"></a>2.可达性分析算法</h4><p>在主流的商用程序语言的主流实现中，都是称通过可达性分析来判定对象是否存活的。</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E5%8F%AF%E8%BE%BE%E6%80%A7%E5%88%86%E6%9E%90%E7%AE%97%E6%B3%95.jpg?raw=true" alt="可达性分析算哒"></p><p>可达性分析算法基本思路就是通过一系列称为<code>GC Roots</code>的对象作为起始点，从这些节点开始向下搜索，搜索所走的路径称为引用链(<code>Reference Chain</code>)，当一个对象到<code>GC Roots</code>没有任何引用链相连时(就是<code>GC Roots</code>到这个对象不可达)，则证明对象不可用。</p><p>在Java中，可作为<code>GC Roots</code>的对象包括：</p><ul><li>虚拟机栈(栈帧中的本地变量表)中引用的对象。</li><li>方法区中类静态属性引用的对象。</li><li>方法区中常量引用的对象。</li><li>本地方法栈中JNI(即Native方法)引用的对象。</li></ul><h4 id="3-再谈引用"><a href="#3-再谈引用" class="headerlink" title="3.再谈引用"></a>3.再谈引用</h4><p>无论通过引用计数判断对象引用数量，还是通过可达性分析判断对象的引用链是否可达，判定对象是否存活都与“引用”有关。</p><p>在JDK1.2以前，Java的引用定义很传统：如果reference类型的数据中存储的数值代表的是另外一块内存的起始地址，就称这块内存代表一个引用。</p><p>在JDK1.2之后，Java对引用的概念进行了扩充，分为强引用(<code>Strong Reference</code>)、软引用(<code>Soft Reference</code>)、弱引用(<code>Weak Reference</code>)、虚引用(<code>Phantom Reference</code>)4种引用，这4种引用强度依次逐渐减弱。</p><ul><li>强引用就是指在代码中普遍存在的，类似<code>Object obj = new Object()</code>这类的引用，只要强引用还存在，垃圾收集器永远不会回收被引用的对象。</li><li>软引用是用来描述一些还有用但并非必需的对象。对于软引用关联的对象。在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围中进行第二次回收。如果这次回收还没有足够的内存，才会抛出内存溢出异常。JDK1.2之后，提供<code>SoftReference</code>类来实现软引用。</li><li>弱引用也是用来描述非必需的对象，它的强度比软引用更弱，被弱引用关联的对象只能生存到下一次垃圾收集发生之前。当垃圾收集器工作时，无论内存是否足够，都会回收掉只被弱引用关联的对象。JDK1.2之后，提供<code>WeakReference</code>类来实现弱引用。</li><li>虚引用也称幽灵引用或者幻影引用，也是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用的唯一目的就是能在这个对象被收集器回收的时候收到一个系统通知。JDK1.2之后，提供<code>PhantomReference</code>类来实现虚引用。</li></ul><h4 id="4-生存还是死亡"><a href="#4-生存还是死亡" class="headerlink" title="4.生存还是死亡"></a>4.生存还是死亡</h4><p>即时在可达性分析算法中不可达的对象，也并非非死不可，要真正宣告一个对象死亡，至少经历两次标记过程：如果对象在进行可达性分析后发现没有与<code>GC Roots</code>相连的引用链，将会被第一次标记并进行一次筛选，筛选的条件是此对象是否有必要执行<code>finalize()</code>方法。当对象没有覆盖<code>finalize()</code>方法，或者<code>finalize()</code>已经被虚拟机调用过，虚拟机将这两种情况都视为“没有必要执行”。</p><p>如果这个对象被判定有必要执行<code>finalize()</code>方法，那么这个对象会被放入一个<code>F-Queue</code>队列中，并稍后由一个由虚拟机自动建立、低优先级的<code>Finalizer</code>线程去执行它。这里的“执行”指虚拟机会触发这个方法，但并不承诺会运行结束，这样做的原因是，如果一个对象在<code>finalize()</code>方法执行缓慢，或者发生死循环，将可能导致<code>F-Queue</code>对垒中其他对象永久处于等待，甚至导致整个内存回收系统崩溃。<code>finalize()</code>方法是对象逃脱死亡的最后一次机会，<code>GC</code>将对<code>F-Queue</code>队列中的对象进行第二次小规模的标记，如果对象要在<code>finalize()</code>中成功拯救自己——只要重新与引用链上的任何一个对象建立联系即可，譬如把自己(this)赋值给某个类变量或者对象的成员变量，那么第二次标记时将被移出“即将回收的集合”；如果对象这个时候还没逃脱，基本就真的被回收了。</p><p>以下为一次对象的自我拯救：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FinalizeEscapeGC</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> FinalizeEscapeGC SAVE_HOOK <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"yes, i am still alive :)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finalize method executed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FinalizeEscapeGC<span class="token punctuation">.</span>SAVE_HOOK <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        SAVE_HOOK <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FinalizeEscapeGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        对象第一次拯救自己</span>        SAVE_HOOK <span class="token operator">=</span> null<span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        因为finalize方法优先级低，暂停0.5秒等待</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>SAVE_HOOK <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            SAVE_HOOK<span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"no, i am dead :("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        这段代码与上面完全一致，这次自救失败</span>        SAVE_HOOK <span class="token operator">=</span> null<span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        因为finalize方法优先级低，暂停0.5秒等待</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>SAVE_HOOK <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            SAVE_HOOK<span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"no, i am dead :("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><pre class=" language-java"><code class="language-java">finalize method executed<span class="token operator">!</span>yes<span class="token punctuation">,</span> i am still alive <span class="token operator">:</span><span class="token punctuation">)</span>no<span class="token punctuation">,</span> i am dead <span class="token operator">:</span><span class="token punctuation">(</span></code></pre><p>从代码来看，<code>SAVE_HOOK</code>对象的<code>finalize()</code>方法确实被<code>GC</code>收集器触发过，并且在被收集前逃脱。</p><p>另外一个值得注意的地方，代码中有两段完全相同的代码，执行结果却是一次逃脱成功，一次失败，这是因为任何一个对象的<code>finalize()</code>方法都只会被系统调用一次。</p><h4 id="5-回收方法区"><a href="#5-回收方法区" class="headerlink" title="5.回收方法区"></a>5.回收方法区</h4><p>在方法区中进行垃圾回收“性价比”比较低：在堆中，尤其是在新生代中，常规应用进行一次垃圾收集 一般可以回收70%~95%的空间，方法区的垃圾收集效率远低于此。</p><p>方法区主要回收两部分：废弃常量和无用的类。回收废弃常量和Java堆总共的对象非常类似。假如没有任何对象引用常量池中的常量，这时发生内存回收，并且必要的话，常量就会被系统清理出常量池。常量池中的字面量，类(接口)、方法、字段的符号引用都是如此。</p><p>判定一个类是否是“无用的类”，要同时满足以下3个条件：</p><ul><li>该类所有的实例都被回收，也就是Java堆中不存在该类的任何实例。</li><li>加载该类的<code>ClassLoader</code>被回收。</li><li>该类对一个的<code>java.lang.Class</code>对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</li></ul><p>是否进行回收，<code>HotSpot</code>提供了<code>-Xnoclassgc</code>参数进行控制，还可以使用<code>-verbose:class</code>以及<code>-XX:+TraceClassLoading</code>、<code>-XX:+TraceClassUnLoading</code>查看类加载和卸载信息，其中<code>-verbose:class</code>和<code>-XX:+TraceClassLoading</code>可以在<code>Product</code>版虚拟机中使用，<code>-XX:+TraceClassUnLoading</code>参数需要<code>FastDebug</code>版虚拟机支持。</p><p>在大量使用反射、动态代理、<code>CGLib</code>等<code>ByteCode</code>框架、动态生成<code>JSP</code>以及<code>OSGi</code>这类频繁自定义<code>ClassLoader</code>的场景都需要虚拟机具备卸载的功能，以保证方法区不会移出。</p><hr><p>该文章来源《深入理解Java虚拟机》</p><hr><h3 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Java虚拟机(2)之四-OutOfMemoryError异常实战</title>
      <link href="/2019/06/17/shen-ru-li-jie-java-xu-ni-ji-2-zhi-si-outofmemoryerror-yi-chang-shi-zhan/"/>
      <url>/2019/06/17/shen-ru-li-jie-java-xu-ni-ji-2-zhi-si-outofmemoryerror-yi-chang-shi-zhan/</url>
      
        <content type="html"><![CDATA[<p>Java虚拟机规范描述中，除了程序计数器虚拟机内存的其他几个运行时区域都有发生OutOfMemoryError(OOM)异常的可能。</p><h4 id="Java堆溢出"><a href="#Java堆溢出" class="headerlink" title="Java堆溢出"></a>Java堆溢出</h4><p>Java堆用于存储对象实例，只要不断创建对象，并且保证<code>GC Roots</code>到对象之间有可达路径来避免垃圾回收机制清除这些对象，那么在对象数量到达最大堆的容量限制就会产生内存溢出异常。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * VM args: -Xms20m -Xmx20m -XX:+HeapDumpOnOutOfMemoryError * -Xms20m -Xmx20m  限制Java堆大小为20m * -XX:+HeapDumpOnOutOfMemoryError  让虚拟机在出现内存溢出异常时Dump出当前内存堆转储快照以便事后进行分析 * * @author LeoQin * @date 2019-05-27 22:10 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeapOOM</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">OOMObject</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>OOMObject<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OOMObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行：</p><p><code>java -Xms20m -Xmx20m -XX:+HeapDumpOnOutOfMemoryError HeapOOM</code></p><p>结果：</p><pre class=" language-java"><code class="language-java">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>OutOfMemoryError<span class="token operator">:</span> Java heap spaceDumping heap to java_pid2557<span class="token punctuation">.</span>hprof <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Heap dump file created <span class="token punctuation">[</span><span class="token number">27584567</span> bytes in <span class="token number">0.108</span> secs<span class="token punctuation">]</span>Exception in thread <span class="token string">"main"</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>OutOfMemoryError<span class="token operator">:</span> Java heap space        at java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">3210</span><span class="token punctuation">)</span>        at java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">3181</span><span class="token punctuation">)</span>        at java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">.</span><span class="token function">grow</span><span class="token punctuation">(</span>ArrayList<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">265</span><span class="token punctuation">)</span>        at java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">.</span><span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span>ArrayList<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">239</span><span class="token punctuation">)</span>        at java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">.</span><span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>ArrayList<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">231</span><span class="token punctuation">)</span>        at java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ArrayList<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">462</span><span class="token punctuation">)</span>        at oom<span class="token punctuation">.</span>HeapOOM<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>HeapOOM<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">22</span><span class="token punctuation">)</span></code></pre><p>Java堆内存的OOM异常是实际应用中常见的内存溢出异常情况。当出现Java堆内存溢出时，就会出现以上信息。</p><p>要解决这个区域的异常，需要分清到底是出现内存泄漏(Memory Leak)还是内存溢出(Memory Overflow)。</p><p>如果是内存泄漏，可通过工具检查泄漏对象到<code>GC Roots</code>的引用链。就能找到泄漏对象是通过怎样的路径与<code>GC Roots</code>相关联并导致垃圾收集器无法自动回收它们。</p><p>如果不是泄漏，检查虚拟机的堆参数(-Xms和-Xmx)，从代码上检查是否存在某些对象生命周期过长、持有状态时间过长，尝试减少程序运行期的内存消耗。</p><hr><h4 id="虚拟机栈和本地方法栈溢出"><a href="#虚拟机栈和本地方法栈溢出" class="headerlink" title="虚拟机栈和本地方法栈溢出"></a>虚拟机栈和本地方法栈溢出</h4><p><code>HotSpot</code>虚拟机不区分虚拟机栈和本地方法栈，因此对于<code>HotSpot</code>来说，虽然<code>-Xoss</code>参数(设置本地方法栈大小)存在，但实际是无效的，栈容量只由<code>-Xss</code>参数设定。关于虚拟机栈和本地方法栈，Java虚拟机规范中描述了两种异常：</p><ul><li><p>如果线程请求的栈深度大于虚拟机所允许的最大深度，将抛出<code>StackOverError</code>异常。</p></li><li><p>如果虚拟机在扩展栈时无法申请到足够的内存空间，则抛出<code>OutOfMemoryError</code>异常。</p></li></ul><p>这两种异常存在相互重叠的地方：当栈空间无法继续分配时，到底是内存太小，还是已使用的栈空间太大，其本质上只是对同一件事情的两种描述而已。</p><p>尝试以下两种方法均无法让虚拟机产生OOM异常，都是获得<code>StackOverError</code>异常。</p><ul><li>使用<code>-Xss</code>参数减少栈内存容量。结果：抛出<code>StackOverError</code>异常，异常出现时输出的堆栈深度相应缩小。</li><li>定义大量本地变量，增大此方法帧中本地变量表的长度。结果：抛出<code>StackOverError</code>异常，异常出现时输出的堆栈深度相应缩小。</li></ul><p>第一种方法的测试程序：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * VM args: -Xss160k * * @author LeoQin * @date 2019-05-27 22:44 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaVMStackSOF</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> stackLength <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stackLeak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        stackLength<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">stackLeak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        JavaVMStackSOF oom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaVMStackSOF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            oom<span class="token punctuation">.</span><span class="token function">stackLeak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stack length:"</span> <span class="token operator">+</span> oom<span class="token punctuation">.</span>stackLength<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行：</p><p><code>java -Xss160k JavaVMStackSOF</code></p><p>结果：</p><pre class=" language-java"><code class="language-java">stack length<span class="token operator">:</span><span class="token number">772</span>Exception in thread <span class="token string">"main"</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>StackOverflowError</code></pre><hr><h4 id="方法区和运行时常量池溢出"><a href="#方法区和运行时常量池溢出" class="headerlink" title="方法区和运行时常量池溢出"></a>方法区和运行时常量池溢出</h4><p><code>String.intern()</code>是一个<code>Native</code>方法，它的作用是：如果字符串常量池包含一个等于此String对象的字符串，则返回代表池中这个字符串的String对象；否则，将此String对象包含的字符串添加到常量池中，并返回此String对象的引用。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * VM args: -XX:PermSize=10M -XX:MaxPermSize=10M * 限制方法区大小 * * @author LeoQin * @date 2019-05-27 22:56 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RuntimeConstantPoolOOM</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        使用list保持常量池引用，避免Full GC回收常量池行为</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行：</p><p><code>java -XX:PermSize=10M -XX:MaxPermSize=10M RuntimeConstantPoolOOM.class</code></p><p>结果：</p><pre class=" language-java"><code class="language-java">Java <span class="token function">HotSpot</span><span class="token punctuation">(</span>TM<span class="token punctuation">)</span> <span class="token number">64</span><span class="token operator">-</span>Bit Server VM warning<span class="token operator">:</span> ignoring option PermSize<span class="token operator">=</span>10M<span class="token punctuation">;</span> support was removed in <span class="token number">8.0</span>Java <span class="token function">HotSpot</span><span class="token punctuation">(</span>TM<span class="token punctuation">)</span> <span class="token number">64</span><span class="token operator">-</span>Bit Server VM warning<span class="token operator">:</span> ignoring option MaxPermSize<span class="token operator">=</span>10M<span class="token punctuation">;</span> support was removed in <span class="token number">8.0</span>类的元数据<span class="token punctuation">,</span> 字符串池<span class="token punctuation">,</span> 类的静态变量将会从永久代移除<span class="token punctuation">,</span> 放入Java heap或者<span class="token keyword">native</span> memory<span class="token punctuation">.</span> 其中建议JVM的实现中将类的元数据放入<span class="token keyword">native</span> memory<span class="token punctuation">,</span> 将字符串池和类的静态变量放入java堆中<span class="token punctuation">.</span> 这样可以加载多少类的元数据就不在由MaxPermSize控制<span class="token punctuation">,</span> 而由系统的实际可用空间来控制。</code></pre><h4 id="本机直接内存溢出"><a href="#本机直接内存溢出" class="headerlink" title="本机直接内存溢出"></a>本机直接内存溢出</h4><p>DirectMemory 容量可通过 <code>-XX：MaxDirectMemorySize</code> 指定，如果不指定，则默认与 Java 堆最大值（ <code>-Xmx</code> 指定）一样，下面程序利用 DirectByteBuffe 模拟直接内存溢出的情况。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * VM Args: -XX:MaxDirectMemorySize=10M * * @author LeoQin * @date 2019-05-27 23:16 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DirectBufferOOM</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> _1M <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>ByteBuffer<span class="token operator">></span> buffers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ByteBuffer byteBuffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocateDirect</span><span class="token punctuation">(</span>_1M<span class="token punctuation">)</span><span class="token punctuation">;</span>            buffers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行：</p><p><code>java -XX:MaxDirectMemorySize=10M DirectBufferOOM</code></p><p>结果：</p><pre class=" language-java"><code class="language-java"><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">4</span><span class="token number">5</span><span class="token number">6</span><span class="token number">7</span><span class="token number">8</span><span class="token number">9</span><span class="token number">10</span>Exception in thread <span class="token string">"main"</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>OutOfMemoryError<span class="token operator">:</span> Direct buffer memory        at java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>Bits<span class="token punctuation">.</span><span class="token function">reserveMemory</span><span class="token punctuation">(</span>Bits<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">694</span><span class="token punctuation">)</span>        at java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>DirectByteBuffer<span class="token punctuation">.</span>&lt;init<span class="token operator">></span><span class="token punctuation">(</span>DirectByteBuffer<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">123</span><span class="token punctuation">)</span>        at java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>ByteBuffer<span class="token punctuation">.</span><span class="token function">allocateDirect</span><span class="token punctuation">(</span>ByteBuffer<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">311</span><span class="token punctuation">)</span>        at oom<span class="token punctuation">.</span>DirectBufferOOM<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>DirectBufferOOM<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">)</span></code></pre><p>ByteBuffer并没有真正向操作系统申请分配内存，而是通过计算得知内存无法分配，于是手动抛出异常。下面的程序利用 <code>Unsafe</code> 类模拟直接内存溢出。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * VM Args: -XX:MaxDirectMemorySize=10M * * @author LeoQin * @date 2019-05-27 23:08 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DirectUnsafeOOM</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _1MB <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Field unsafeField <span class="token operator">=</span> Unsafe<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"theUnsafe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        unsafeField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Unsafe unsafe <span class="token operator">=</span> <span class="token punctuation">(</span>Unsafe<span class="token punctuation">)</span> unsafeField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            unsafe<span class="token punctuation">.</span><span class="token function">allocateMemory</span><span class="token punctuation">(</span>_1MB<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行：</p><p><code>java -XX:MaxDirectMemorySize=10M DirectUnsafeOOM</code></p><p>结果：</p><pre class=" language-java"><code class="language-java">Exception in thread<span class="token string">"main"</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>OutOfMemoryErrorat sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>Unsafe<span class="token punctuation">.</span>allocateMemory（Native Method）at org<span class="token punctuation">.</span>fenixsoft<span class="token punctuation">.</span>oom<span class="token punctuation">.</span>DMOOM<span class="token punctuation">.</span>main（DMOOM<span class="token punctuation">.</span>java：<span class="token number">20</span>）</code></pre><p>由 DirectMemory 导致的内存溢出，一个明显的特征是在 <code>Heap Dump</code> 文件中不会看见明显的异常，如果读者发现 OOM 之后 Dump 文件很小，而程序中又直接或间接使用了 NIO ，那就可以考虑检查一下是不是这方面的原因。</p><hr><p>该文章来源《深入理解Java虚拟机》</p><hr><h4 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h4><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Java虚拟机(2)之三-HotSpot虚拟机对象探秘</title>
      <link href="/2019/06/15/shen-ru-li-jie-java-xu-ni-ji-2-zhi-san-hotspot-xu-ni-ji-dui-xiang-tan-mi/"/>
      <url>/2019/06/15/shen-ru-li-jie-java-xu-ni-ji-2-zhi-san-hotspot-xu-ni-ji-dui-xiang-tan-mi/</url>
      
        <content type="html"><![CDATA[<h3 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h3><ol><li><p>虚拟机在遇到一条new指令时，首先去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有，则执行相应的类加载机制。</p></li><li><p>在类加载检查通过之后，虚拟机将为新生对象分配内存。选择哪种方式由Java堆是否规整决定，而Java堆是否规整又由所采用的垃圾收集器是否带有压缩整理算法功能决定。</p><ul><li><strong>指针碰撞(Bump the Pointer)</strong>: 假设Java堆中内存是绝对规整的，所有用过的内存都放在一边，空闲的内存放在另一边，中间放着一个指针作为分界点的指示器，那所分配的内存就仅仅是把那个指针向空闲空间挪动一段与对象大小相等的距离。</li><li><strong>空闲列表(Free List)</strong>: 如果Java堆中的内存不是规整的，已使用的内存和空闲的内存相互交错，就没办法简单的指针碰撞，虚拟机必须维护一个列表，记录哪些内存块可用，在分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表记录。</li></ul></li><li><p>除了如何划分可用空间外，另一个值得考虑的是对象创建在并发情况下线程不安全，目前有两种方案:</p><ul><li><strong>对分配空间内存的动作进行同步处理</strong>——实际上虚拟机采用CAS配上失败重试的方式保证更新操作的原子性。</li><li><strong>把内存分配的动作按照线程划分在不同空间之中进行</strong>——每个线程在Java堆中预先分配一小块内存，称为本地线程分配缓冲(Thread Local Allocation Buffer,TLAB)。哪个线程需要分配内存，就在这个线程的TLAB上分配，只有TLAB用完需要重新分配时，才需要同步锁定。虚拟机是否使用TLAB，可以通过<code>-XX:+/-UseTLAB</code>参数设定。</li></ul></li><li><p>内存分配之后，虚拟机为分配的内存空间都初始化为零值(不包括对象头)，如果使用TLAB，这一工作也可以提前至TLAB分配时进行。这一操作保证了对象的实例字段在Java代码中可不赋初始值就直接使用。</p></li><li><p>虚拟机对对象进行必要的设置。例如该对象是哪个类的实例、如何找到类的元数据信息、对象的哈希值、对象的GC分代年龄等信息。这些信息存放在对象的对象头(Object Header)中。根据虚拟机当前的运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。</p></li><li><p>以上工作完成后，从虚拟机的视角来看，一个新的对象已经产生，但从Java程序的视角来看，对象创建才刚刚开始——<init>方法还没执行，所有字段都还为零。所以，一般来说(由字节码中是否跟随invokespecial指令所决定)，执行new指令之后会接着执行<init>方法。</init></init></p></li></ol><hr><h3 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h3><ul><li>对象头(Header)</li><li>实例数据(Instatce Data)</li><li>对齐填充(Padding)</li></ul><h5 id="对象头"><a href="#对象头" class="headerlink" title="对象头"></a>对象头</h5><p>对象头包含两部分信息：</p><p>第一部分用于存储对象自身的运行时数据，如哈希码(HashCode)、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等，这部分数据的长度在32位和64位的虚拟机(未开启压缩指针)中分别为32bit和64bit，官方称为“Mark Word”。</p><p>另一部分是类型指针，即对象指向它的类元数据的指针 ，虚拟机通过这个指针来确定这个对象是哪个类的实例。并不是所有的虚拟机实现都必须在对象数据保留类型指针，也就是说查找对象的元数据信息并不一定要经过对象本身。另外，如果对象是一个Java数组，那么对象头中必须有一块用于记录数组长度的数据，因为虚拟机可以通过普通Java对象的元数据信息确定Java对象的大小，但是从数组的元数据中却无法确定数组的大小。</p><h5 id="实例数据"><a href="#实例数据" class="headerlink" title="实例数据"></a>实例数据</h5><p>实例数据部分是对象真正存储的有效信息。无论是从父类继承的，还是子类定义的，都需要记录下来。这部分的存储顺序会受到虚拟机分配策略参数(<code>FieldsAllocationStyle</code>)和字段在Java源码中定义顺序的影响。<code>HotSpot</code>虚拟机默认的分配策略为longs/doubles、ints、shorts/chars、bytes/booleans、oops(<code>Ordinary Object Pointers</code>)，从分配策略中可以看出，相同宽度的字段总是被分配到一起。在满足这个前提条件下，在父类中第一的变量会出现在子类之前。如果<code>CompactFields</code>参数值为true(默认为true)，那么子类中较窄的变量也可能会插入到父类变量的空隙之中。</p><h5 id="对齐填充"><a href="#对齐填充" class="headerlink" title="对齐填充"></a>对齐填充</h5><p>对齐填充不是必然存在，也没有特别的意义，仅仅起着占位符的作用。由于<code>HotSpot VM</code>的自动内存管理系统要求对象起始地址必须是8字节的整数倍，就是对象的大小必须是8字节的整数倍。对象头正好是8字节的整数倍(1倍或者2倍)，因此，当实例数据部分没有对齐时，就需要通过对齐填充来补全。</p><hr><h3 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h3><p>Java程序需要通过栈上的<code>reference</code>数据来操作堆上的具体对象。由于<code>reference</code>类型在Java虚拟机规范中只规定了一个指向对象的引用，并没有规定这个引用应该通过何种方式去定位、访问堆中的对象的具体位置，所以对象的访问方式取决于虚拟机实现而定。目前主流的访问方式有：</p><ul><li><p>使用句柄</p></li><li><p>直接指针</p></li></ul><h5 id="使用句柄"><a href="#使用句柄" class="headerlink" title="使用句柄"></a>使用句柄</h5><p>使用句柄，Java堆中将会划分出一块内存来作为句柄池，<code>reference</code>中存储的就是对象的句柄地址，而句柄中包含对象实例数据与类型数据各自的具体的地址信息。</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E5%8F%A5%E6%9F%84.jpg?raw=true" alt="句柄"></p><h5 id="直接指针"><a href="#直接指针" class="headerlink" title="直接指针"></a>直接指针</h5><p>使用直接指针，Java堆对象的布局就必须考虑如何放置访问类型数据的相关信息，而<code>reference</code>中存储的直接就是对象地址。</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/%E7%9B%B4%E6%8E%A5%E6%8C%87%E9%92%88.jpg?raw=true" alt="直接指针"></p><h5 id="优劣"><a href="#优劣" class="headerlink" title="优劣"></a>优劣</h5><ul><li>使用句柄访问的最大好处就是<code>reference</code>中存储的是稳定的句柄地址，在对象被移动(垃圾收集时移动对象是非常普遍的行为)时只会改变句柄中的实例数据指针，而<code>reference</code>本身不需要修改。</li><li>使用直接指针访问方式的最大好处就是速度更快，它节省了一次指针定位的时间开销，由于对象的访问在Java中非常频繁，因此这类开销积少成多也是一项非常可观的成本。就<code>Sun HotSpot</code>而言，它使用直接访问的方式进行对象访问。</li></ul><hr><p>该文章来源《深入理解Java虚拟机》</p><hr><h3 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Java虚拟机(2)之二-运行时数据区域</title>
      <link href="/2019/06/12/shen-ru-li-jie-java-xu-ni-ji-2-zhi-er-yun-xing-shi-shu-ju-qu-yu/"/>
      <url>/2019/06/12/shen-ru-li-jie-java-xu-ni-ji-2-zhi-er-yun-xing-shi-shu-ju-qu-yu/</url>
      
        <content type="html"><![CDATA[<h3 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a>运行时数据区域</h3><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA.jpg?raw=true" alt="运行时数据区"></p><ul><li><strong>程序计数器(Program Counter Register)</strong>:</li></ul><blockquote><p>线程私有，一块较小的内存空间，可以看做是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里(仅是概念模型，各种虚拟机可能会通过一些更高效的方法实现)，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环等基础功能都需要依赖计数器完成。</p></blockquote><blockquote><p>由于Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现，在任何一个确定的时刻，一个处理器只会执行一个线程的中的指令。因此，为了线程切换后能恢复到正确的执行位置，每个线程都需要独立的程序计数器，各个线程之间计数器互不影响，独立存储，称这类内存区域为“线程私有”的内存。</p></blockquote><blockquote><p>如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机指令的地址；如果正在执行的是Native方法，这个计数器值则为空(Undefined)。此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。</p></blockquote><ul><li><strong>Java虚拟机栈(Java Virtual Machine Stacks)</strong>:</li></ul><blockquote><p>线程私有，生命周期与线程相同。虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧(Stack Frame)用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机中入栈到出栈的过程。</p></blockquote><blockquote><p>局部变量表存放了编译期可知的各种基本数据类型(boolean、byte等)、对象引用(reference类型，它不同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置)和returnAddress类型(指向了一条字节码指令的地址)。</p></blockquote><blockquote><p>其中64位长度的long和double类型的数据会占用2个局部变量空间(Slot)，其余的数据类型只占用1个。局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在帧中分配多大的局部空间是完全确定的，在方法运行期间不会改变局部变量表的大小。</p></blockquote><blockquote><p>在Java虚拟机规范中，对这个区域规定规定了两种异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常；如果虚拟机栈可以动态扩展，如果扩展时无法申请到足够的内存，就会抛出OutOfMemoryError异常。</p></blockquote><ul><li><strong>本地方法栈(Native Method Stack)</strong>:</li></ul><blockquote><p>线程私有，与虚拟机栈所发挥的作用是非常相似的，本地方法栈为虚拟机使用到的Native方法服务。与虚拟机栈一样，本地方法栈区域也会抛出StackOverflowError和OutOfMemoryError异常。</p></blockquote><ul><li><strong>Java堆(Java Heap)</strong>:</li></ul><blockquote><p>线程共享，存放对象实例。Java虚拟机规范中描述：所有对象实例以及数组都要在堆上分配，但随着JIT编译器的发展和逃逸分析技术的逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化发生，所有对象都在堆上分配变得并不是那么“绝对”。</p></blockquote><blockquote><p>从内存回收的角度来看，由于现在收集器基本都是采用分代收集算法，所以Java堆中还可以细分为：新生代和老生代；再细致一点的有Eden空间、From Survivor空间、To Survivor空间等。从内存分配的角度来看，线程共享的Java堆中可能划分出对个线程私有的分配缓冲区(Thread Local Allocation Buffer,TLAB)。</p></blockquote><blockquote><p>当前主流的虚拟机都是按照可扩展来实现的(通过-Xmx和-Xms控制)。如果在堆中没有内存完成实例分配，并且堆也无法再扩展，将会抛出OutOfMemoryError异常。</p></blockquote><ul><li><strong>方法区(Method Area)</strong>:</li></ul><blockquote><p>线程共享，存储被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。也被称为Non-Heap(非堆)。</p></blockquote><blockquote><p>Java虚拟机规范对方法区的限制非常宽松，除了和Java堆一样不需要连续的内存和可以选择固定大小或者可扩展外，还可以选择不实现垃圾收集。相对而言，垃圾收集行为在这个区域比较少出现。这个区域内存回收目标主要是针对常量池的回收和对类型的卸载。</p></blockquote><blockquote><p>当方法区不满足内存分配要求时，将抛出OutOfMemoryError异常。</p></blockquote><ul><li><strong>运行时常量池(Runtime Constant Pool)</strong>:</li></ul><blockquote><p>是方法区的一部分。Class文件除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。</p></blockquote><blockquote><p>Java虚拟机对Class文件每一部分(包括常量池)的格式有严格要求，对运行时常量池，没有做任何细节的要求。一般来说，除了保存Class文件中描述的符号引用外，还会把翻译出来的直接引用也存储在运行时常量池中。</p></blockquote><blockquote><p>运行时常量池相对Class常量池的一个重要特征是具备动态性，Java不要求常量一定只有编译期才能产生，也就是并非预置入Class文件中常量池的内容才能进入方法区运行时常量池，运行期间也可能将新的常量放入池中，如String类的intern()方法。</p></blockquote><blockquote><p>运行时常量池也会抛出OutOfMemoryError异常。</p></blockquote><ul><li><strong>直接内存(Direct Memory)</strong>:</li></ul><blockquote><p>直接内存不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域。</p></blockquote><blockquote><p>JDK 1.4 中新加入NIO(New Input/Output)类，引入一种基于通道(Channel)与缓冲区(Buffer)的I/O方式，可以使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆的DirectByteBuffer对象作为这块内存的引用进行操作。这样在一些场景显著提升性能，因为避免了在Java堆和Native堆中来回复制数据。</p></blockquote><blockquote><p>直接内存不会受到Java堆大小的限制，在配置虚拟机参数时，如果根据实际内存设置-Xmx等参数信息，忽略直接内存，会导致内存区域综合大于物理内存限制，将抛出抛出OutOfMemoryError异常。</p></blockquote><hr><p>该文章来源《深入理解Java虚拟机》</p><hr><h3 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Java虚拟机(2)之一-macOS下编译openjdk10</title>
      <link href="/2019/06/10/shen-ru-li-jie-java-xu-ni-ji-2-zhi-yi-macos-xia-bian-yi-openjdk10/"/>
      <url>/2019/06/10/shen-ru-li-jie-java-xu-ni-ji-2-zhi-yi-macos-xia-bian-yi-openjdk10/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>==因为电脑系统版本和软件版本都比较高，在编译jdk7和jdk8的时候出现各种各样的问题，编译jdk10一次就ok了。==</strong></p></blockquote><h2 id="编译openjdk10"><a href="#编译openjdk10" class="headerlink" title="编译openjdk10"></a>编译openjdk10</h2><h3 id="编译环境"><a href="#编译环境" class="headerlink" title="编译环境"></a>编译环境</h3><ul><li>系统环境 ：macOS Mojave 10.14.3</li><li>编译器 ：clang</li><li>openJdk ：openjdk10</li><li>boostrap JDK ：oracle jdk1.8.0_202</li><li>xcode version ：9.4.1(xcode 10<code>libc++</code>替换了<code>stdlibc++</code>)</li><li>ant version ：1.10.5</li><li>freetype 2.10.0</li><li>ccache 3.7.1</li></ul><hr><h3 id="获取源码"><a href="#获取源码" class="headerlink" title="获取源码"></a>获取源码</h3><blockquote><p><code>Mercurial</code>代码管理工具从仓库下载</p></blockquote><pre class=" language-bash"><code class="language-bash">brew <span class="token function">install</span> mercurial<span class="token function">hg</span> clone http://hg.openjdk.java.net/jdk10/jdk10/ jdk10<span class="token function">cd</span> jdk10<span class="token function">chmod</span> 755 get_source.sh./get_source.sh</code></pre><hr><h3 id="配置环境变量env-sh"><a href="#配置环境变量env-sh" class="headerlink" title="配置环境变量env.sh"></a>配置环境变量<code>env.sh</code></h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 设定语言选项，必须设置</span><span class="token function">export</span> LANG<span class="token operator">=</span>C<span class="token comment" spellcheck="true"># Mac平台，C编译器不再是GCC，是clang</span><span class="token function">export</span> CC<span class="token operator">=</span>gcc<span class="token comment" spellcheck="true"># 跳过clang的一些严格的语法检查，不然会将N多的警告作为Error</span><span class="token function">export</span> COMPILER_WARNINGS_FATAL<span class="token operator">=</span>false<span class="token comment" spellcheck="true"># 链接时使用的参数</span><span class="token function">export</span> LFLAGS<span class="token operator">=</span><span class="token string">'-Xlinker -lstdc++'</span><span class="token comment" spellcheck="true"># 是否使用clang</span><span class="token function">export</span> USE_CLANG<span class="token operator">=</span>true<span class="token comment" spellcheck="true"># 使用64位数据模型</span><span class="token function">export</span> LP64<span class="token operator">=</span>1<span class="token comment" spellcheck="true"># 告诉编译平台是64位，不然会按32位来编译</span><span class="token function">export</span> ARCH_DATA_MODEL<span class="token operator">=</span>64<span class="token comment" spellcheck="true"># 允许自动下载依赖</span><span class="token function">export</span> ALLOW_DOWNLOADS<span class="token operator">=</span>true<span class="token comment" spellcheck="true"># 并行编译的线程数</span><span class="token function">export</span> HOTSPOT_BUILD_JOBS<span class="token operator">=</span>4<span class="token comment" spellcheck="true"># 已过时</span><span class="token comment" spellcheck="true"># export ALT_PARALLEL_COMPILE_JOBS=4</span><span class="token comment" spellcheck="true"># 是否跳过与先前版本的比较</span><span class="token function">export</span> SKIP_COMPARE_IMAGES<span class="token operator">=</span>true<span class="token comment" spellcheck="true"># 是否使用预编译头文件，加快编译速度</span><span class="token function">export</span> USE_PRECOMPILED_HEADER<span class="token operator">=</span>true<span class="token comment" spellcheck="true"># 是否使用增量编译</span><span class="token function">export</span> INCREMENTAL_BUILD<span class="token operator">=</span>true<span class="token comment" spellcheck="true"># 编译内容</span><span class="token function">export</span> BUILD_LANGTOOLS<span class="token operator">=</span>true<span class="token function">export</span> BUILD_JAXP<span class="token operator">=</span>false<span class="token function">export</span> BUILD_JAXWS<span class="token operator">=</span>false<span class="token function">export</span> BUILD_CORBA<span class="token operator">=</span>false<span class="token function">export</span> BUILD_HOTSPOT<span class="token operator">=</span>true<span class="token function">export</span> BUILD_JDK<span class="token operator">=</span>true<span class="token comment" spellcheck="true"># 编译版本</span><span class="token function">export</span> SKIP_DEBUG_BUILD<span class="token operator">=</span>true<span class="token function">export</span> SKIP_FASTDEBUG_BUILD<span class="token operator">=</span>false<span class="token function">export</span> DEBUG_NAME<span class="token operator">=</span>debug<span class="token comment" spellcheck="true"># 避开javaws和浏览器Java插件之类的部分的build</span><span class="token function">export</span> BUILD_DEPLOY<span class="token operator">=</span>false<span class="token function">export</span> BUILD_INSTALL<span class="token operator">=</span>false<span class="token comment" spellcheck="true"># 加上产生调试信息时需要的 objcopy</span><span class="token function">export</span> OBJCOPY<span class="token operator">=</span>gobjcopy</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">source</span> env.sh<span class="token comment" spellcheck="true"># configure</span><span class="token function">bash</span> ./configure \    --with-target-bits<span class="token operator">=</span>64 \    --with-debug-level<span class="token operator">=</span>slowdebug \    --disable-warnings-as-errors \    --with-freetype<span class="token operator">=</span>/usr/local/Cellar/freetype/2.10.0/ \    --enable-ccache</code></pre><p>完成后出现以下内容：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>The existing configuration has been successfully updated <span class="token keyword">in</span>/Users/qliang/Documents/code/openjdk/jdk10/build/macosx-x86_64-normal-server-slowdebugusing configure arguments <span class="token string">'--with-target-bits=64 --with-debug-level=slowdebug --disable-warnings-as-errors --with-freetype=/usr/local/Cellar/freetype/2.10.0/ --enable-ccache'</span><span class="token keyword">.</span>Configuration summary:* Debug level:    slowdebug* HS debug level: debug* JDK variant:    normal* JVM variants:   server* OpenJDK target: OS: macosx, CPU architecture: x86, address length: 64* Version string: 10-internal+0-adhoc.qliang.jdk10 <span class="token punctuation">(</span>10-internal<span class="token punctuation">)</span>Tools summary:* Boot JDK:       java version <span class="token string">"1.8.0_202"</span> Java<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> SE Runtime Environment <span class="token punctuation">(</span>build 1.8.0_202-b08<span class="token punctuation">)</span> Java HotSpot<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> 64-Bit Server VM <span class="token punctuation">(</span>build 25.202-b08, mixed mode<span class="token punctuation">)</span>  <span class="token punctuation">(</span>at /Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home<span class="token punctuation">)</span>* Toolchain:      clang <span class="token punctuation">(</span>clang/LLVM from Xcode 10.2.1<span class="token punctuation">)</span>* C Compiler:     Version 10.0.1 <span class="token punctuation">(</span>at /usr/bin/clang<span class="token punctuation">)</span>* C++ Compiler:   Version 10.0.1 <span class="token punctuation">(</span>at /usr/bin/clang++<span class="token punctuation">)</span>Build performance summary:* Cores to use:   4* Memory limit:   16384 MB* ccache status:  Active <span class="token punctuation">(</span>3.7.1<span class="token punctuation">)</span>WARNING: The result of this configuration has overridden an olderconfiguration. You *should* run <span class="token string">'make clean'</span> to <span class="token function">make</span> sure you get aproper build. Failure to <span class="token keyword">do</span> so might result <span class="token keyword">in</span> strange build problems.</code></pre><h3 id="开始编译"><a href="#开始编译" class="headerlink" title="开始编译"></a>开始编译</h3><pre><code># 编译make cleanmake all</code></pre><p>成功出现以下信息：</p><pre><code>Finished building target 'default (exploded-image)' in configuration 'macosx-x86_64-normal-server-slowdebug'</code></pre><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p><code>./build/macosx-x86_64-normal-server-slowdebug/jdk/bin/java -version</code></p><p>出现：</p><pre><code>openjdk version "10-internal"OpenJDK Runtime Environment (slowdebug build 10-internal+0-adhoc.qliang.jdk10)OpenJDK 64-Bit Server VM (slowdebug build 10-internal+0-adhoc.qliang.jdk10, mixed mode)</code></pre><hr><h2 id="编译openjdk8"><a href="#编译openjdk8" class="headerlink" title="编译openjdk8"></a>编译openjdk8</h2><h3 id="编译环境-1"><a href="#编译环境-1" class="headerlink" title="编译环境"></a>编译环境</h3><ul><li>系统环境 ：macOS Mojave 10.14.3</li><li>编译器 ：clang</li><li>openJdk ：openjdk8</li><li>boostrap JDK ：oracle jdk1.8.0_202</li><li>xcode version ：10.1 (10B61)</li><li>ant version ：1.10.5</li><li>XQuartz 2.7.11</li></ul><hr><h3 id="获取源码-1"><a href="#获取源码-1" class="headerlink" title="获取源码"></a>获取源码</h3><blockquote><p><code>Mercurial</code>代码管理工具从仓库下载</p></blockquote><pre class=" language-bash"><code class="language-bash">brew <span class="token function">install</span> mercurial<span class="token function">hg</span> clone http://hg.openjdk.java.net/jdk8u/jdk8u-dev/ JDK8u<span class="token function">cd</span> JDK8<span class="token function">chmod</span> 755 get_source.sh./get_source.sh</code></pre><hr><h3 id="配置环境变量env-sh-1"><a href="#配置环境变量env-sh-1" class="headerlink" title="配置环境变量env.sh"></a>配置环境变量<code>env.sh</code></h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 设定语言选项，必须设置</span><span class="token function">export</span> LANG<span class="token operator">=</span>C<span class="token comment" spellcheck="true"># Mac平台，C编译器不再是GCC，是clang</span><span class="token function">export</span> CC<span class="token operator">=</span>gcc<span class="token comment" spellcheck="true"># 跳过clang的一些严格的语法检查，不然会将N多的警告作为Error</span><span class="token function">export</span> COMPILER_WARNINGS_FATAL<span class="token operator">=</span>false<span class="token comment" spellcheck="true"># 链接时使用的参数</span><span class="token function">export</span> LFLAGS<span class="token operator">=</span><span class="token string">'-Xlinker -lstdc++'</span><span class="token comment" spellcheck="true"># 是否使用clang</span><span class="token function">export</span> USE_CLANG<span class="token operator">=</span>true<span class="token comment" spellcheck="true"># 使用64位数据模型</span><span class="token function">export</span> LP64<span class="token operator">=</span>1<span class="token comment" spellcheck="true"># 告诉编译平台是64位，不然会按32位来编译</span><span class="token function">export</span> ARCH_DATA_MODEL<span class="token operator">=</span>64<span class="token comment" spellcheck="true"># 允许自动下载依赖</span><span class="token function">export</span> ALLOW_DOWNLOADS<span class="token operator">=</span>true<span class="token comment" spellcheck="true"># 并行编译的线程数</span><span class="token function">export</span> HOTSPOT_BUILD_JOBS<span class="token operator">=</span>4<span class="token function">export</span> ALT_PARALLEL_COMPILE_JOBS<span class="token operator">=</span>4<span class="token comment" spellcheck="true"># 是否跳过与先前版本的比较</span><span class="token function">export</span> SKIP_COMPARE_IMAGES<span class="token operator">=</span>true<span class="token comment" spellcheck="true"># 是否使用预编译头文件，加快编译速度</span><span class="token function">export</span> USE_PRECOMPILED_HEADER<span class="token operator">=</span>true<span class="token comment" spellcheck="true"># 是否使用增量编译</span><span class="token function">export</span> INCREMENTAL_BUILD<span class="token operator">=</span>true<span class="token comment" spellcheck="true"># 编译内容</span><span class="token function">export</span> BUILD_LANGTOOLS<span class="token operator">=</span>true<span class="token function">export</span> BUILD_JAXP<span class="token operator">=</span>false<span class="token function">export</span> BUILD_JAXWS<span class="token operator">=</span>false<span class="token function">export</span> BUILD_CORBA<span class="token operator">=</span>false<span class="token function">export</span> BUILD_HOTSPOT<span class="token operator">=</span>true<span class="token function">export</span> BUILD_JDK<span class="token operator">=</span>true<span class="token comment" spellcheck="true"># 编译版本</span><span class="token function">export</span> SKIP_DEBUG_BUILD<span class="token operator">=</span>true<span class="token function">export</span> SKIP_FASTDEBUG_BUILD<span class="token operator">=</span>false<span class="token function">export</span> DEBUG_NAME<span class="token operator">=</span>debug<span class="token comment" spellcheck="true"># 避开javaws和浏览器Java插件之类的部分的build</span><span class="token function">export</span> BUILD_DEPLOY<span class="token operator">=</span>false<span class="token function">export</span> BUILD_INSTALL<span class="token operator">=</span>false<span class="token comment" spellcheck="true"># 加上产生调试信息时需要的 objcopy</span><span class="token function">export</span> OBJCOPY<span class="token operator">=</span>gobjcopy</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">source</span> env.sh<span class="token comment" spellcheck="true"># configure</span><span class="token function">bash</span> ./configure \    --with-target-bits<span class="token operator">=</span>64 \    --with-debug-level<span class="token operator">=</span>slowdebug \    --disable-warnings-as-errors \    --enable-debug-symbols \    ZIP_DEBUGINFO_FILES<span class="token operator">=</span>0</code></pre><p>执行成功出现以下内容</p><pre class=" language-bash"><code class="language-bash">Configuration summary:* Debug level:    slowdebug* JDK variant:    normal* JVM variants:   server* OpenJDK target: OS: macosx, CPU architecture: x86, address length: 64Tools summary:* Boot JDK:       java version <span class="token string">"1.8.0_202"</span> Java<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> SE Runtime Environment <span class="token punctuation">(</span>build 1.8.0_202-b08<span class="token punctuation">)</span> Java HotSpot<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> 64-Bit Server VM <span class="token punctuation">(</span>build 25.202-b08, mixed mode<span class="token punctuation">)</span>  <span class="token punctuation">(</span>at /Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home<span class="token punctuation">)</span>* C Compiler:      version  <span class="token punctuation">(</span>at /usr/bin/gcc<span class="token punctuation">)</span>* C++ Compiler:    version  <span class="token punctuation">(</span>at /usr/bin/g++<span class="token punctuation">)</span>Build performance summary:* Cores to use:   2* Memory limit:   16384 MB* ccache status:  not installed <span class="token punctuation">(</span>consider installing<span class="token punctuation">)</span></code></pre><p>执行<code>make</code></p><hr><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><ol><li><code>configure: error: GCC compiler is required. Try setting --with-tools-dir.</code></li></ol><blockquote><p>解决方案</p></blockquote><p>修改 <code>common/autoconf/generated-configure.sh</code>，</p><p>搜索 <code>GCC compiler is required</code>，</p><p>对应内容注释掉。</p><ol start="2"><li><code>error: Xcode 4 is required to build JDK 8</code></li></ol><blockquote><p>解决方案</p></blockquote><p>修改 <code>common/autoconf/generated-configure.sh</code>，</p><p>搜索 <code>error: Xcode 4 is required to build JDK 8</code>，注释对应5行</p><p>两行内容注释掉。</p><ol start="3"><li><code>error: invalid argument '-std=gnu++98' not allowed with 'C'</code></li></ol><blockquote><p>解决方案</p></blockquote><p>修改 <code>common/autoconf/generated-configure.sh</code>，</p><p>搜索 <code>-std=gnu++98</code>，注释</p><p>两行内容注释掉</p><p>2.</p><pre class=" language-bash"><code class="language-bash">/Users/qliang/Documents/code/JDK8/hotspot/src/share/vm/code/relocInfo.hpp:367:27: error: friend declaration specifying a default argument must be a definition  inline friend relocInfo prefix_relocInfo<span class="token punctuation">(</span>int datalen <span class="token operator">=</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span>                          ^/Users/qliang/Documents/code/JDK8/hotspot/src/share/vm/code/relocInfo.hpp:462:18: error: friend declaration specifying a default argument must be the only declarationinline relocInfo prefix_relocInfo<span class="token punctuation">(</span>int datalen<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 ^/Users/qliang/Documents/code/JDK8/hotspot/src/share/vm/code/relocInfo.hpp:367:27: note: previous declaration is here  inline friend relocInfo prefix_relocInfo<span class="token punctuation">(</span>int datalen <span class="token operator">=</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span>                          ^/Users/qliang/Documents/code/JDK8/hotspot/src/share/vm/code/relocInfo.hpp:463:21: error: <span class="token string">'fits_into_immediate'</span> is a protected member of <span class="token string">'relocInfo'</span>  assert<span class="token punctuation">(</span>relocInfo::fits_into_immediate<span class="token punctuation">(</span>datalen<span class="token punctuation">)</span>, <span class="token string">"datalen in limits"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ^/Users/qliang/Documents/code/JDK8/hotspot/src/share/vm/code/relocInfo.hpp:375:15: note: declared protected here  static bool fits_into_immediate<span class="token punctuation">(</span>int data0<span class="token punctuation">)</span> <span class="token punctuation">{</span>              ^/Users/qliang/Documents/code/JDK8/hotspot/src/share/vm/code/relocInfo.hpp:464:59: error: <span class="token string">'RAW_BITS'</span> is a protected member of <span class="token string">'relocInfo'</span>  <span class="token keyword">return</span> relocInfo<span class="token punctuation">(</span>relocInfo::data_prefix_tag, relocInfo::RAW_BITS, relocInfo::datalen_tag <span class="token operator">|</span> datalen<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                          ^/Users/qliang/Documents/code/JDK8/hotspot/src/share/vm/code/relocInfo.hpp:272:23: note: declared protected here  enum RawBitsToken <span class="token punctuation">{</span> RAW_BITS <span class="token punctuation">}</span><span class="token punctuation">;</span>                      ^/Users/qliang/Documents/code/JDK8/hotspot/src/share/vm/code/relocInfo.hpp:464:10: error: calling a protected constructor of class <span class="token string">'relocInfo'</span>  <span class="token keyword">return</span> relocInfo<span class="token punctuation">(</span>relocInfo::data_prefix_tag, relocInfo::RAW_BITS, relocInfo::datalen_tag <span class="token operator">|</span> datalen<span class="token punctuation">)</span><span class="token punctuation">;</span>         ^/Users/qliang/Documents/code/JDK8/hotspot/src/share/vm/code/relocInfo.hpp:273:3: note: declared protected here  relocInfo<span class="token punctuation">(</span>relocType type, RawBitsToken ignore, int bits<span class="token punctuation">)</span>  ^</code></pre><blockquote><p>解决方案</p></blockquote><p>修改 <code>hotspot/src/share/vm/code/relocInfo.hpp</code></p><p>367行 <code>int datalen = 0</code> 改为 <code>int datalen</code></p><p>462行 <code>int datalen</code> 改为 <code>int datalen = 0</code></p><ol start="3"><li><pre class=" language-bash"><code class="language-bash">/Users/qliang/Documents/code/JDK8/hotspot/src/share/vm/opto/loopPredicate.cpp:775:73: error: ordered comparison between pointer and zero <span class="token punctuation">(</span><span class="token string">'const TypeInt *'</span> and <span class="token string">'int'</span><span class="token punctuation">)</span>   assert<span class="token punctuation">(</span>rng-<span class="token operator">></span>Opcode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Op_LoadRange <span class="token operator">||</span> _igvn.type<span class="token punctuation">(</span>rng<span class="token punctuation">)</span>-<span class="token operator">></span>is_int<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> 0, <span class="token string">"must be"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                           ~~~~~~~~~~~~~~~~~~~~~~~~~ ^  ~</code></pre></li></ol><blockquote><p>解决方案</p></blockquote><p><code>_igvn.type(rng)-&gt;is_int() &gt;= 0</code> 改为 <code>_igvn.type(rng)-&gt;is_int()-&gt;_lo &gt;= 0</code></p><ol start="4"><li><pre class=" language-bash"><code class="language-bash">/Users/qliang/Documents/code/JDK8/hotspot/src/share/vm/runtime/virtualspace.cpp:331:14: error: ordered comparison between pointer and zero <span class="token punctuation">(</span><span class="token string">'char *'</span> and <span class="token string">'int'</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>base<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> 0<span class="token punctuation">)</span> <span class="token punctuation">{</span>   ~~~~~~ ^ ~</code></pre></li></ol><blockquote><p>解决方案</p></blockquote><p><code>base() &gt; 0</code> 改为 <code>base() != 0</code></p><ul><li><strong>一定要出现编码错误再修改文件，不然会报错误</strong></li></ul><pre class=" language-bash"><code class="language-bash">/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home//bin/javac  -J-XX:ThreadStackSize<span class="token operator">=</span>1536 -J-XX:-PrintVMOptions -J-XX:+UnlockDiagnosticVMOptions -J-XX:-LogVMOutput -J-Xmx512m -J-Xms512m -J-XX:PermSize<span class="token operator">=</span>32m -J-XX:MaxPermSize<span class="token operator">=</span>160m -encoding -source 6 -target 6 -d /Users/qliang/Documents/code/jvm/openjdk_7u/corba/btclasses \        -sourcepath <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/tools/src <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/tools/src/build/tools/stripproperties/StripProperties.javajavac: 无效的标记: 6用法: javac <span class="token operator">&lt;</span>options<span class="token operator">></span> <span class="token operator">&lt;</span>source files<span class="token operator">></span>-help 用于列出可能的选项make<span class="token punctuation">[</span>4<span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>/Users/qliang/Documents/code/jvm/openjdk_7u/corba/btjars/stripproperties.jar<span class="token punctuation">]</span> Error 2make<span class="token punctuation">[</span>3<span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>build<span class="token punctuation">]</span> Error 1make<span class="token punctuation">[</span>2<span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>build<span class="token punctuation">]</span> Error 1make<span class="token punctuation">[</span>1<span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>corba-build<span class="token punctuation">]</span> Error 2make: *** <span class="token punctuation">[</span>build_product_image<span class="token punctuation">]</span> Error 2</code></pre><pre class=" language-bash"><code class="language-bash">hotspot/src/share/vm/adlc/archDesc.cpp:335:35: error: <span class="token string">'&amp;&amp;'</span> within <span class="token string">'||'</span>      <span class="token punctuation">[</span>-Werror,-Wlogical-op-parentheses<span class="token punctuation">]</span></code></pre><pre><code>export COMPILER_WARNINGS_FATAL=false</code></pre><p>5.</p><pre class=" language-bash"><code class="language-bash">clang: error: unknown argument: <span class="token string">'-fpch-deps'</span></code></pre><blockquote><p>解决方案</p></blockquote><p>修改 <code>hotspot/make/bsd/makefiles/gcc.make</code></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 注释217-219行</span><span class="token comment" spellcheck="true"># Flags for generating make dependency flags.</span><span class="token comment" spellcheck="true"># ifneq ("${CC_VER_MAJOR}", "2")</span><span class="token comment" spellcheck="true"># DEPFLAGS = -fpch-deps -MMD -MP -MF $(DEP_DIR)/$(@:%=%.d)</span><span class="token comment" spellcheck="true"># endif</span></code></pre><p>6.高版本的gcc不再支持编译选项stabs</p><pre class=" language-bash"><code class="language-bash">487 warnings and 4 errors generated.make<span class="token punctuation">[</span>8<span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>precompiled.hpp.gch<span class="token punctuation">]</span> Error 1make<span class="token punctuation">[</span>7<span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>the_vm<span class="token punctuation">]</span> Error 2make<span class="token punctuation">[</span>6<span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>product<span class="token punctuation">]</span> Error 2make<span class="token punctuation">[</span>5<span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>generic_build2<span class="token punctuation">]</span> Error 2make<span class="token punctuation">[</span>4<span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>product<span class="token punctuation">]</span> Error 2make<span class="token punctuation">[</span>3<span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>all_product_universal<span class="token punctuation">]</span> Error 2make<span class="token punctuation">[</span>2<span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>universal_product<span class="token punctuation">]</span> Error 2make<span class="token punctuation">[</span>1<span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>hotspot-build<span class="token punctuation">]</span> Error 2make: *** <span class="token punctuation">[</span>build_product_image<span class="token punctuation">]</span> Error 2</code></pre><hr><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## Finished jdk (build time 00:03:28)</span>----- Build <span class="token function">times</span> -------Start 2019-03-18 20:53:08End   2019-03-18 21:00:5100:00:23 corba00:02:48 hotspot00:00:13 jaxp00:00:20 jaxws00:03:28 jdk00:00:31 langtools00:07:43 TOTAL-------------------------Finished building OpenJDK <span class="token keyword">for</span> target <span class="token string">'default'</span></code></pre><hr><blockquote><p>==以下为编译openjdk7出现的各种问题，最终没有编译成功。==</p></blockquote><h2 id="编译openjdk7"><a href="#编译openjdk7" class="headerlink" title="编译openjdk7"></a>编译openjdk7</h2><h3 id="编译环境-2"><a href="#编译环境-2" class="headerlink" title="编译环境"></a>编译环境</h3><ul><li>系统环境 ：macOS Mojave 10.14.3</li><li>编译器 ：clang</li><li>openJdk ：jdk7u-dev</li><li>boostrap JDK ：oracle jdk1.7.0_80</li><li>xcode version ：10.1 (10B61)</li><li>ant version ：1.9.13</li></ul><hr><h3 id="获取源码-2"><a href="#获取源码-2" class="headerlink" title="获取源码"></a>获取源码</h3><blockquote><p><code>Mercurial</code>代码管理工具从仓库下载</p></blockquote><pre class=" language-bash"><code class="language-bash">brew <span class="token function">install</span> mercurial<span class="token function">hg</span> clone http://hg.openjdk.java.net/jdk7u/jdk7u-dev<span class="token function">cd</span> jdk7u-dev<span class="token function">chmod</span> 755 get_source.sh./get_source.sh</code></pre><blockquote><p>直接下载官方打包的源代码</p></blockquote><ul><li>源码地址：<a href="http://jdk.java.net/java-se-ri/7" target="_blank" rel="noopener">http://jdk.java.net/java-se-ri/7</a></li></ul><hr><h3 id="配置环境变量env-sh-2"><a href="#配置环境变量env-sh-2" class="headerlink" title="配置环境变量env.sh"></a>配置环境变量<code>env.sh</code></h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#语言选项，这个必须设置，否则编译好后会出现一个HashTable的NPE错</span><span class="token function">export</span> LANG<span class="token operator">=</span>C<span class="token comment" spellcheck="true">#Bootstrap JDK的安装路径。必须设置。 </span><span class="token function">export</span> ALT_BOOTDIR<span class="token operator">=</span>/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home/<span class="token comment" spellcheck="true">#允许自动下载依赖</span><span class="token function">export</span> ALLOW_DOWNLOADS<span class="token operator">=</span>true<span class="token comment" spellcheck="true">#并行编译的线程数，设置为和CPU内核数量一致即可</span><span class="token function">export</span> HOTSPOT_BUILD_JOBS<span class="token operator">=</span>6<span class="token function">export</span> ALT_PARALLEL_COMPILE_JOBS<span class="token operator">=</span>6<span class="token comment" spellcheck="true">#比较本次build出来的映像与先前版本的差异。这个对我们来说没有意义，必须设置为false，否则sanity检查会报缺少先前版本JDK的映像。如果有设置dev或者DEV_ONLY=true的话这个不显式设置也行。 </span><span class="token function">export</span> SKIP_COMPARE_IMAGES<span class="token operator">=</span>true<span class="token comment" spellcheck="true">#使用预编译头文件，不加这个编译会更慢一些</span><span class="token function">export</span> USE_PRECOMPILED_HEADER<span class="token operator">=</span>true<span class="token function">export</span> COMPILER_WARNINGS_FATAL<span class="token operator">=</span>false<span class="token comment" spellcheck="true">#要编译的内容</span><span class="token function">export</span> BUILD_LANGTOOLS<span class="token operator">=</span>true <span class="token comment" spellcheck="true">#export BUILD_JAXP=false</span><span class="token comment" spellcheck="true">#export BUILD_JAXWS=false </span><span class="token comment" spellcheck="true">#export BUILD_CORBA=false</span><span class="token function">export</span> BUILD_HOTSPOT<span class="token operator">=</span>true <span class="token function">export</span> BUILD_JDK<span class="token operator">=</span>true<span class="token comment" spellcheck="true">#要编译的版本</span><span class="token comment" spellcheck="true">#export SKIP_DEBUG_BUILD=false</span><span class="token comment" spellcheck="true">#export SKIP_FASTDEBUG_BUILD=true</span><span class="token comment" spellcheck="true">#export DEBUG_NAME=debug</span><span class="token comment" spellcheck="true">#把它设置为false可以避开javaws和浏览器Java插件之类的部分的build。 </span>BUILD_DEPLOY<span class="token operator">=</span>false<span class="token comment" spellcheck="true">#把它设置为false就不会build出安装包。因为安装包里有些奇怪的依赖，但即便不build出它也已经能得到完整的JDK映像，所以还是别build它好了。</span>BUILD_INSTALL<span class="token operator">=</span>false<span class="token comment" spellcheck="true">#编译结果所存放的路径</span><span class="token function">export</span> ALT_OUTPUTDIR<span class="token operator">=</span>/Users/qliang/Documents/code/jvm/openjdk_7u<span class="token comment" spellcheck="true">#这两个环境变量必须去掉，不然会有很诡异的事情发生（我没有具体查过这些“”诡异的事情”，Makefile脚本检查到有这2个变量就会提示警告“）</span>unset JAVA_HOMEunset CLASSPATH<span class="token function">export</span> ALT_FREETYPE_HEADERS_PATH<span class="token operator">=</span>/usr/local/include/freetype2<span class="token function">export</span> ALT_FREETYPE_LIB_PATH<span class="token operator">=</span>/usr/local/Cellar/freetype/2.9.1/lib<span class="token comment" spellcheck="true"># export JAVA_TOOL_OPTIONS=-Dfile.encoding=UTF-8</span><span class="token comment" spellcheck="true"># make 2>&amp;1 | tee $ALT_OUTPUTDIR/build.log</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">source</span> env.sh<span class="token comment" spellcheck="true"># 检查</span><span class="token function">make</span> sanity Sanity check passed.即可进行编译</code></pre><hr><h3 id="遇到的问题-1"><a href="#遇到的问题-1" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><ol><li><code>llvm-gcc</code>找不到<pre class=" language-bash"><code class="language-bash">/bin/sh: /Library/Developer/CommandLineTools/usr/bin/llvm-gcc: No such <span class="token function">file</span> or directory</code></pre></li></ol><blockquote><p>解决方案</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /Library/Developer/CommandLineTools/usr/bin/<span class="token comment" spellcheck="true"># 软连接</span><span class="token function">sudo</span> <span class="token function">ln</span> -s gcc llvm-gcc</code></pre><p>2.<code>FreeType</code>版本过低</p><pre class=" language-bash"><code class="language-bash">ERROR: FreeType version  2.3.0  or higher is required.</code></pre><blockquote><p>解决方案：环境变量添加如下</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> ALT_FREETYPE_HEADERS_PATH<span class="token operator">=</span>/usr/local/include/freetype2<span class="token function">export</span> ALT_FREETYPE_LIB_PATH<span class="token operator">=</span>/usr/local/Cellar/freetype/2.9.1/lib</code></pre><ol start="3"><li><pre class=" language-bash"><code class="language-bash">主版本 52 比 51 新, 此编译器支持最新的主版本。</code></pre></li></ol><blockquote><p>解决方案</p></blockquote><pre class=" language-bash"><code class="language-bash">boostrap JDK版本太高，降低版本</code></pre><ol start="4"><li>编码问题</li></ol><pre class=" language-bash"><code class="language-bash">/Users/qliang/Documents/code/jvm/openjdk_7u/corba/gensrc/com/sun/corba/se/spi/activation/Locator.java:6: 错误: 编码ascii的不可映射字符* ���IDL-to-Java ��������� <span class="token punctuation">(</span>���������<span class="token punctuation">)</span>, ������ <span class="token string">"3.2"</span>������</code></pre><blockquote><p>解决方案</p></blockquote><p>借鉴于 <a href="https://0x9e370001.iteye.com/blog/1729802" target="_blank" rel="noopener">https://0x9e370001.iteye.com/blog/1729802</a> 修改文件的方法</p><pre class=" language-bash"><code class="language-bash">文件： /corba/make/common/shared/Defs-java.gmk133行JAVACFLAGS +<span class="token operator">=</span> -encoding ascii改为<span class="token comment" spellcheck="true">#JAVACFLAGS += -encoding ascii</span>194行BOOT_JAVACFLAGS  +<span class="token operator">=</span> -encoding ascii -source <span class="token variable"><span class="token variable">$(</span>BOOT_SOURCE_LANGUAGE_VERSION<span class="token variable">)</span></span> -target <span class="token variable"><span class="token variable">$(</span>BOOT_TARGET_CLASS_VERSION<span class="token variable">)</span></span>改为BOOT_JAVACFLAGS  +<span class="token operator">=</span> -encoding -source <span class="token variable"><span class="token variable">$(</span>BOOT_SOURCE_LANGUAGE_VERSION<span class="token variable">)</span></span> -target <span class="token variable"><span class="token variable">$(</span>BOOT_TARGET_CLASS_VERSION<span class="token variable">)</span></span></code></pre><ul><li><strong>一定要出现编码错误再修改文件，不然会报错误</strong></li></ul><pre class=" language-bash"><code class="language-bash">/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home//bin/javac  -J-XX:ThreadStackSize<span class="token operator">=</span>1536 -J-XX:-PrintVMOptions -J-XX:+UnlockDiagnosticVMOptions -J-XX:-LogVMOutput -J-Xmx512m -J-Xms512m -J-XX:PermSize<span class="token operator">=</span>32m -J-XX:MaxPermSize<span class="token operator">=</span>160m -encoding -source 6 -target 6 -d /Users/qliang/Documents/code/jvm/openjdk_7u/corba/btclasses \        -sourcepath <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/tools/src <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/tools/src/build/tools/stripproperties/StripProperties.javajavac: 无效的标记: 6用法: javac <span class="token operator">&lt;</span>options<span class="token operator">></span> <span class="token operator">&lt;</span>source files<span class="token operator">></span>-help 用于列出可能的选项make<span class="token punctuation">[</span>4<span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>/Users/qliang/Documents/code/jvm/openjdk_7u/corba/btjars/stripproperties.jar<span class="token punctuation">]</span> Error 2make<span class="token punctuation">[</span>3<span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>build<span class="token punctuation">]</span> Error 1make<span class="token punctuation">[</span>2<span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>build<span class="token punctuation">]</span> Error 1make<span class="token punctuation">[</span>1<span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>corba-build<span class="token punctuation">]</span> Error 2make: *** <span class="token punctuation">[</span>build_product_image<span class="token punctuation">]</span> Error 2</code></pre><pre class=" language-bash"><code class="language-bash">hotspot/src/share/vm/adlc/archDesc.cpp:335:35: error: <span class="token string">'&amp;&amp;'</span> within <span class="token string">'||'</span>      <span class="token punctuation">[</span>-Werror,-Wlogical-op-parentheses<span class="token punctuation">]</span></code></pre><pre><code>export COMPILER_WARNINGS_FATAL=false</code></pre><p>5.</p><pre class=" language-bash"><code class="language-bash">clang: error: unknown argument: <span class="token string">'-fpch-deps'</span></code></pre><blockquote><p>解决方案</p></blockquote><p>修改 <code>hotspot/make/bsd/makefiles/gcc.make</code></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 注释217-219行</span><span class="token comment" spellcheck="true"># Flags for generating make dependency flags.</span><span class="token comment" spellcheck="true"># ifneq ("${CC_VER_MAJOR}", "2")</span><span class="token comment" spellcheck="true"># DEPFLAGS = -fpch-deps -MMD -MP -MF $(DEP_DIR)/$(@:%=%.d)</span><span class="token comment" spellcheck="true"># endif</span></code></pre><p>6.高版本的gcc不再支持编译选项stabs</p><pre class=" language-bash"><code class="language-bash">487 warnings and 4 errors generated.make<span class="token punctuation">[</span>8<span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>precompiled.hpp.gch<span class="token punctuation">]</span> Error 1make<span class="token punctuation">[</span>7<span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>the_vm<span class="token punctuation">]</span> Error 2make<span class="token punctuation">[</span>6<span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>product<span class="token punctuation">]</span> Error 2make<span class="token punctuation">[</span>5<span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>generic_build2<span class="token punctuation">]</span> Error 2make<span class="token punctuation">[</span>4<span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>product<span class="token punctuation">]</span> Error 2make<span class="token punctuation">[</span>3<span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>all_product_universal<span class="token punctuation">]</span> Error 2make<span class="token punctuation">[</span>2<span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>universal_product<span class="token punctuation">]</span> Error 2make<span class="token punctuation">[</span>1<span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>hotspot-build<span class="token punctuation">]</span> Error 2make: *** <span class="token punctuation">[</span>build_product_image<span class="token punctuation">]</span> Error 2</code></pre><hr><h5 id="该文章来源《深入理解Java虚拟机》读后实践"><a href="#该文章来源《深入理解Java虚拟机》读后实践" class="headerlink" title="该文章来源《深入理解Java虚拟机》读后实践"></a>该文章来源《深入理解Java虚拟机》读后实践</h5><hr><h2 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC</title>
      <link href="/2019/03/26/springmvc/"/>
      <url>/2019/03/26/springmvc/</url>
      
        <content type="html"><![CDATA[<h3 id="一、跟踪Spring-MVC请求"><a href="#一、跟踪Spring-MVC请求" class="headerlink" title="一、跟踪Spring MVC请求"></a>一、跟踪<code>Spring MVC</code>请求</h3><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/spring%E5%AE%9E%E6%88%98/springmvc.png?raw=true" alt="springmvc"></p><ol><li>请求的第一站是<code>Spring</code>的<code>DispatcherServlet</code>，<code>DispatcherServlet</code>查询一个或多个处理器映射(<code>Handler Mappering</code>)，处理映射器会根据请求携带的URL信息来决策请求哪个控制器。</li><li>一旦选择了合适的控制器，<code>DispatcherServlet</code>会将请求发送给选中的控制器。到了控制器，请求会卸载其负载(用户提交的信息)并等待控制器处理这些信息。</li><li>控制器在完成逻辑处理后，通常会产生一些模型数据。控制器将这些模型数据打包，并且标记出用于渲染输出的视图名。接下来将请求连同模型和视图名发送回<code>DispatcherServlet</code>。</li><li><code>DispatcherServlet</code>使用视图解析器(<code>View Resolver</code>)将逻辑视图名匹配为一个特定的视图实现。</li><li><code>DispatcherServlet</code>交付模型数据，视图使用模型数据渲染输出，这个输出会通过响应对象传递给客户端。</li></ol><hr><h3 id="二、搭建Spring-MVC"><a href="#二、搭建Spring-MVC" class="headerlink" title="二、搭建Spring MVC"></a>二、搭建<code>Spring MVC</code></h3><p><code>DispatcherServlet</code>是<code>Spirng MVC</code>的核心，在这里请求会第一次接触到框架，它要负责将请求路由到其他组件之中。</p><p>按照传统的方式，像<code>DispatcherServlet</code>这样的<code>Servlet</code>会配置在<code>web.xml</code>中。这个文件会放到应用的war包中。当然这是配置<code>DispatcherServlet</code>方法之一。借助于<code>Servlet 3规范</code>和<code>Spring 3.1</code> 的功能增强，这种方式已经不是唯一的方案。</p><p>使用Java将<code>DispatcherServlet</code>配置在<code>Servlet</code>容器中，而不是使用<code>web.xml</code>文件。</p><h4 id="配置DispatcherServlet"><a href="#配置DispatcherServlet" class="headerlink" title="配置DispatcherServlet"></a>配置<code>DispatcherServlet</code></h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpitterWebInitializer</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">// 将DispatcherServlet映射到"/"</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"/"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getRootConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>RootConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 指定配置类</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> WebConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们只需要知道扩展<code>AbstractAnnotationConfigDispatcherServletInitializer</code>的任意类都会自动的配置<code>Dispatcherservlet</code>和<code>Spring</code>应用上下文，<code>Spirng</code>的应用上下文会位于应用程序的<code>Servlet</code>上下文之中。</p><p>在<code>Servlet3.0</code>环境中，容器会在类路径中 查找实现<code>javax.servlet.ServletContainerInitialzer</code>接口的类，如果能发现的话，就会用它来配置<code>Servlet</code>容器。</p><p><code>Spring</code>提供了这个接口的实现名为<code>SpringServletContainnerInitialzer</code>,这个类反过来又会查找实现<code>WebApplicationInitialzer</code>的类，并将配置的任务交给他们来完成。<code>Spring 3.2</code>引入了一个便利的<code>WebApplicationInitialzer</code>基础实现也就是<code>AbstractAnnotationConfigDispatcherServletInitializer</code>因为我们的<code>SpittrWebApplicationInitialzer</code>扩展了<code>AbstractAnnotationConfigDispatcherServletInitializer</code>,(同时也就实现了<code>WebApplicationInitialzer</code>),因此当部署<code>Servlet3.0</code>容器的时候，容器会自动发现它，并用它来配置<code>Servlet</code>上下文。</p><p>第一个方法<code>getServletMappings()</code>,它会将一个或多个路径映射到<code>DispatcherServle</code>t上，在本示例中，它映射的是”/“，表示它是应用默认的<code>Servlet</code>，它会处理应用的所有请求。</p><p>为了理解其他两个方法，我们首先需要理解<code>DispatcherServlet</code>和一个<code>Servlet监听器</code>(也就是<code>ContextLoaderListener</code>)的关系。</p><p>当<code>DispatcherServlet</code>启动的时候，它会创建应用上下文，并加载配置文件或配置类中声明的bean。在上面那个程序中的<code>getServletConfigClasses()</code>方法中，我们要求<code>DispatcherServlet</code>加载应用上下文时，使用定义在<code>WebConfig</code>配置类(使用Java配置)中的bean。</p><p>但在<code>Spring Web</code>应用中，通常还会有另外一个应用上下文。另外这个就是由<code>ContextLoaderListener</code>创建。</p><p>我们希望<code>DispatcherServlet</code>加载包含Web组件的bean，如控制器，视图解析器，以及处理器映射。而<code>ContextLoaderListener</code>要加载应用中的其他bean，这些bean通常是驱动应用后端的中间层和数据层组件。</p><p>实际上<code>AbstractAnnotationConfigDispatcherServletInitializer</code>会同时创建<code>DispatcherServlet</code>和<code>ContextLoaderListener</code>。<code>getServletConfigClasses()</code>方法会返回带有<code>@Configuration</code>注解的类将会用来定义<code>DispatcherServlet</code>应用上下文中的bean，<code>getRootConfigClasses()</code>会返回带<code>有@Configuration</code>注解的类将会用来配置<code>ContextLoaderListener</code>创建的应用上下文。</p><h4 id="启用Spring-MVC"><a href="#启用Spring-MVC" class="headerlink" title="启用Spring MVC"></a>启用<code>Spring MVC</code></h4><p>我们有多种方式来启动<code>DispatcherServlet</code>，与之类似，启用<code>Spring MVC</code>组件的方式也不止一种，以前Spring是XMl进行配置的，你可以选择<code>&lt;mvc:annotation-driver&gt;</code>启用注解驱动的<code>Spring MVC</code>。</p><p>我们所能创建最简单的<code>Spring MVC</code>配置就是一个带有<code>@EnableWebMvc</code>注解的类。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>EnableWebMvc<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableWebMvc</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>这可以运行起来，它的确能够启用<code>Spring MVC</code>，但还有不少问题要解决。</p><ul><li><p>没有配置视图解析器，如果这样的话，<code>Spring</code>默认会使用<code>BeanNameView-Resolver</code>，这个视图解析器会查找ID与视图名称匹配的bean，并且查找的bean要实现View接口，它以这样的方式来解析视图。</p></li><li><p>没有启用组件扫描。这样的结果就是，<code>Spring</code>只能找到显示声明在配置类中的控制器。</p></li><li><p>这样配置的话，<code>DispatcherServlet</code>会映射为默认<code>的Servlet</code>，所以他会处理所有的请求，包括对静态资源的请求，如图片 和样式表(在大多数情况下，这可能并不是你想要的结果)。</p></li></ul><p>因此我们需要在<code>WebConfig</code>这个最小的<code>Spring MVC</code>配置上再加一些内容，从而让他变得真正实用。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableWebMvc</span>                           <span class="token comment" spellcheck="true">//启用Spring MVC</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.ql.controller"</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//启用组件扫描</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ViewResolver <span class="token function">viewResolver</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        InternalResourceViewResolver resolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InternalResourceViewResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//配置JSP视图解析器</span>        resolver<span class="token punctuation">.</span><span class="token function">setPrefix</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/views/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resolver<span class="token punctuation">.</span><span class="token function">setSuffix</span><span class="token punctuation">(</span><span class="token string">".jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resolver<span class="token punctuation">.</span><span class="token function">setExposeContextBeansAsAttributes</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> resolver<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureDefaultServletHandling</span><span class="token punctuation">(</span>DefaultServletHandlerConfigurer configurer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//配置静态资源的处理</span>        configurer<span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>WebConfig</code>现在添加了<code>@ComponentScan</code>注解，此时将会扫描<code>com.ql.controller</code>包来查找组件。带有<code>@Controller</code>注解控制器将会成为组件扫描时的候选bean。因此，我们不需要在配置类中显示声明任何的控制器。</p><p>添加了一个<code>ViewResolver</code> bean，更具体的将是<code>InternalResourceViewResolver</code>。我们只需要知道他会去查找jsp文件，在查找的时候，它会在视图名称上加一个特定的前缀和后缀。(例如：名为home的视图会被解析为<code>/WEB-INF/views/home.jsp</code>)</p><p><code>WebConfig</code>类还扩展里<code>WebMvcConfigurerAdapter</code>并重写了其<code>configureDefaultServletHandling()</code>方法,通过调用<code>DefaultServletHandlerConfigurer</code>的<code>enable()</code>方法，我们要求<code>DispatcherServlet</code>将静态资源的请求转发到<code>Servlet</code>容器中默认的<code>Servlet</code>上，而不是使用<code>DispatcherServlet</code>本来来处理此类请求。</p><p>Web相关的配置通过<code>DisPatcherServlet</code>创建的应用上下文都已经配好了，接下来配置<code>RootConfig</code>：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ComponentScan<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ComponentScan<span class="token punctuation">.</span>Filter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>FilterType<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>EnableWebMvc<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"com.ql"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>ANNOTATION<span class="token punctuation">,</span>value <span class="token operator">=</span> EnableWebMvc<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RootConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p><code>RootConfig</code>使用了<code>@ComponentScan</code>注解，这样的话，我们就有很多机会用非Web的组件来完善<code>RootConfig</code>。</p><hr><h3 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 技术 </tag>
            
            <tag> Spring </tag>
            
            <tag> Spring实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bean的作用域</title>
      <link href="/2019/03/26/bean-de-zuo-yong-yu/"/>
      <url>/2019/03/26/bean-de-zuo-yong-yu/</url>
      
        <content type="html"><![CDATA[<h3 id="Spring作用域定义"><a href="#Spring作用域定义" class="headerlink" title="Spring作用域定义"></a><code>Spring</code>作用域定义</h3><p><strong>默认情况下，<code>Spring</code>应用上下文中的bean都是以单例(singleton)的形式创建的。</strong></p><p><code>Spring</code>定义了多种作用域，可以基于这些作用域创建bean：</p><ul><li>单例(Singleton)：在整个应用中，只创建bean一个实例。</li><li>原型(Prototype)：在每次注入或<code>Spring</code>应用上下文获取的时候，都会创建一个新的bean实例。</li><li>会话(Session)：在Web应用中，为每个会话创建一个bean实例。</li><li>请求(Request)：在Web应用中，为每个请求创建一个bean实例。</li></ul><hr><p>1.组件扫描的方式</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span>ConfigurableBeanFactory<span class="token punctuation">.</span>SCOPE_PROTOTYPE<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotePad</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>2.Java配置的方式</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span>ConfigurableBeanFactory<span class="token punctuation">.</span>SCOPE_PROTOTYPE<span class="token punctuation">)</span><span class="token keyword">public</span> NotePad <span class="token function">notePad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NotePad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>3.XML配置的方式</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>notePad<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ql.NotePad<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><hr><h4 id="使用会话和请求作用域"><a href="#使用会话和请求作用域" class="headerlink" title="使用会话和请求作用域"></a>使用会话和请求作用域</h4><p>在Web应用中，如果能够实例化会话和请求范围内共享的bean，将是非常有价值的事情。如在电子商务应用中，可能用一个bean代表购物车。如果该bean是单例，就会导致导致所有用户都会向同一个购物车添加商品。如果购物车是原型作用域，那么在应用中某个地方向购物车添加商品，在应用的另一个地方可能就用不了。</p><p>就购物车的bean来说，会话作用域是最合适的:</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span>value <span class="token operator">=</span> WebApplicationContext<span class="token punctuation">.</span>SCOPE_SESSION<span class="token punctuation">,</span>        proxyMode <span class="token operator">=</span> ScopedProxyMode<span class="token punctuation">.</span>INTERFACES<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShoppingCart</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p><code>@Scope</code>的<code>value</code>设置成<code>session</code>。另一个属性<code>proxyMode</code>设置为<code>ScopedProxyMode.INTERFACES</code>,这个属性解决了将会话或请求作用域的bean注入到单例bean中所出现的问题。以下是该属性解决的问题场景。</p><blockquote><p>假如要把<code>ShoppingCart</code>bean注入到<code>StoreService</code>单例bean的set方法中，如下：</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StoreService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> ShoppingCart shoppingCart<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setShoppingCart</span><span class="token punctuation">(</span>ShoppingCart shoppingCart<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>shoppingCart <span class="token operator">=</span> shoppingCart<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>因为<code>StoreService</code>是一个单例的bean，会在<code>Spring</code>应用上下文加载的时候创建。当它创建的时候，<code>Spring</code>会试图将<code>ShoppingCart</code>bean注入到set方法中。但是<code>ShoppingCart</code>bean是会话作用域，此时并不存在。知道某个用户进入系统，创建会话之后，才会出现<code>ShoppingCart</code>实例。</p></blockquote><blockquote><p>另外，多个会话产生多个<code>ShoppingCart</code>实例，我们希望<code>StoreService</code>使用的<code>ShoppingCart</code>实例是当前会话的。</p></blockquote><blockquote><p><code>Spring</code>并不会将实际的<code>ShoppingCart</code>bean注入到<code>StoreService</code>中，<code>Spring</code>会注入一个到<code>ShoppingCart</code>bean的代理，如下图。这个代理会暴露与<code>ShoppingCart</code>相同的方法，当<code>StoreService</code>调用<code>ShoppingCart</code>的方法时，代理会对其进行懒解析并将调用委托给会话作用域内真正<code>ShoppingCart</code>bean。</p></blockquote><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/spring%E5%AE%9E%E6%88%98/%E4%BC%9A%E8%AF%9D%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%BB%A3%E7%90%86.jpg?raw=true" alt="会话作用域代理"></p><hr><h3 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 技术 </tag>
            
            <tag> Spring </tag>
            
            <tag> Spring实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bean的生命周期</title>
      <link href="/2019/03/26/bean-de-sheng-ming-zhou-qi/"/>
      <url>/2019/03/26/bean-de-sheng-ming-zhou-qi/</url>
      
        <content type="html"><![CDATA[<h3 id="bean的生命周期"><a href="#bean的生命周期" class="headerlink" title="bean的生命周期"></a>bean的生命周期</h3><ul><li><p>在传统的Java应用中，bean的生命周期很简单。使用new进行bean实例化，然后该bean就可以使用了。一旦该bean不再被使用，则由Java自动进行垃圾回收。</p></li><li><p><code>Spring容器</code>中的bean的生命周期就复杂得多。以下为bean装载到Spring应用上下文中的一个典型的生命周期过程。<br><img src="https://github.com/qliang0816/MarkdownImage/blob/master/spring%E5%AE%9E%E6%88%98/bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png?raw=true" alt="bean生命周期"></p></li></ul><p>如图所见，在bean准备就绪之前，<code>bean工</code>厂执行若干启动步骤:</p><ol><li><code>Spring</code>对<code>bean</code>进行实例化；</li><li><code>Spring</code>将值和<code>bean</code>的引用注入到bean对应的属性中；</li><li>如果<code>bean</code>实现了<code>BeanNameAware</code>接口，<code>Spring</code>将<code>bean</code>的ID传递给<code>setBeanName()</code>方法；</li><li>如果<code>bean</code>实现了<code>BeanFactoryAware</code>接口，<code>Spring</code>将调用<code>setBeanFactory()</code>方法，将<code>BeanFactory</code>容器实例传入；</li><li>如果<code>bean</code>实现了<code>ApplocationContextAware</code>接口，<code>Spring</code>将调用<code>setApplocationContext()</code>方法，将<code>bean</code>所在的应用上下文的引用传入；</li><li>如果<code>bean</code>实现了<code>BeanPostProcessor</code>接口，<code>Spring</code>将调用<code>postProcessBeforeInitialization()</code>方法；</li><li>如果<code>bean</code>实现了<code>InitializingBean</code>接口，<code>Spring</code>将调用<code>afterPropertiesSet()</code>方法。类似，如果<code>bean</code>使用<code>init-method</code>声明了初始化方法，该方法也会被调用；</li><li>如果<code>bean</code>实现了<code>BeanPostProcessor</code>接口，<code>Spring</code>将调用<code>postProcessAfterInitialization()</code>方法；</li><li>此时，bean已经准备就绪，可以被应用程序使用了，它们将一直驻留在应用上下文中，直到该应用上下文被销毁；</li><li>如果bean实现了<code>DisposableBean</code>接口，<code>Spring</code>将调用它的<code>destory()</code>方法。同样，如果bean使用<code>destory-method</code>声明了销毁方法，该方法也会被调用。</li></ol><hr><h3 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 技术 </tag>
            
            <tag> Spring </tag>
            
            <tag> Spring实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>装配Bean</title>
      <link href="/2019/03/25/zhuang-pei-bean/"/>
      <url>/2019/03/25/zhuang-pei-bean/</url>
      
        <content type="html"><![CDATA[<h3 id="Spring配置的可选方案"><a href="#Spring配置的可选方案" class="headerlink" title="Spring配置的可选方案"></a><code>Spring</code>配置的可选方案</h3><ul><li>隐式的bean发现机制和自动装配。</li><li>在Java中进行显示配置。</li><li>在XML中进行显示配置。</li></ul><hr><h4 id="1-自动化装配bean"><a href="#1-自动化装配bean" class="headerlink" title="1.自动化装配bean"></a>1.自动化装配bean</h4><p><code>Spring</code>从两个角度来实现自动化装配：</p><ul><li>组件扫描(component scanning)：<code>Spring</code>会自动发现应用上下文中所创建的bean。</li><li>自动装配(autowiring)：<code>Spring</code>自动满足bean之间的依赖。</li></ul><blockquote><p>组件扫描</p></blockquote><p>1、创建接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ql<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CompactDisc</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2、创建实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ql<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Component 作为组件类 */</span><span class="token comment" spellcheck="true">//@Component</span><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"otherName"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SgtPeppers</span> <span class="token keyword">implements</span> <span class="token class-name">CompactDisc</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String title <span class="token operator">=</span> <span class="token string">"Sgt.Pepper's Lonely Hearts Club Band"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String artist <span class="token operator">=</span> <span class="token string">"The Beatles"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Playing "</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">"by "</span> <span class="token operator">+</span> artist<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3、启动组件扫描</p><ul><li>3.1、 通过JavaConfig启动组件扫描</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ql<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ComponentScan<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @ComponentScan 启动组件扫描 * 扫描该包及其子包 */</span><span class="token annotation punctuation">@Configuration</span><span class="token comment" spellcheck="true">//@ComponentScan</span><span class="token comment" spellcheck="true">//@ComponentScan("com.ql")</span><span class="token comment" spellcheck="true">//@ComponentScan(basePackages = {"com.ql","com.ql2"})</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackageClasses <span class="token operator">=</span> <span class="token punctuation">{</span>SgtPeppers<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> DVDPlayer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CDPlayerConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><ul><li>3.2、通过XML启动组件扫描</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ql<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><blockquote><p>自动装配</p></blockquote><p>1、<code>@Autowired</code>注解通过构造器注入:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ql<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CDPlayer</span> <span class="token keyword">implements</span> <span class="token class-name">MediaPlayer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> CompactDisc compactDisc<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token function">CDPlayer</span><span class="token punctuation">(</span>CompactDisc compactDisc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>compactDisc <span class="token operator">=</span> compactDisc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2、<code>@Autowired</code>注解任意方法注入:</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">CompactDisc</span><span class="token punctuation">(</span>CompactDisc compactDisc<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>compactDisc <span class="token operator">=</span> compactDisc<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="2-Java配置bean"><a href="#2-Java配置bean" class="headerlink" title="2.Java配置bean"></a>2.Java配置bean</h4><p>1、创建配置类并声明简单的bean</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ql<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CDPlayerConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> SgtPeppers <span class="token function">sgtPeppers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SgtPeppers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2、借助JavaConfig实现注入</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CDPlayerConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> SgtPeppers <span class="token function">sgtPeppers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SgtPeppers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*     *JavaConfig实现注入     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> CDPlayer <span class="token function">cdPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CDPlayer</span><span class="token punctuation">(</span><span class="token function">sgtPeppers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*     * 推荐方式     * 需要注入的bean不需要声明在同一个配置类中     * 实现了DI功能     *JavaConfig实现注入     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> CDPlayer <span class="token function">cdPlayer</span><span class="token punctuation">(</span>CompactDisc compactDisc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CDPlayer</span><span class="token punctuation">(</span>compactDisc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-通过XML配置bean"><a href="#3-通过XML配置bean" class="headerlink" title="3.通过XML配置bean"></a>3.通过XML配置bean</h4><p>最为简单的XML配置</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>1、声明一个简单的bean</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SgtPeppers<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ql.SgtPeppers<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>2、借助构造器注入初始化bean</p><ul><li><code>&lt;constructor-arg&gt;</code>元素。</li><li>使用Spring 3.0 引入的c-命名空间。</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- &lt;constructor-arg>元素 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cdPlayer<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ql.CDPlayer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SgtPeppers<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- c-命名空间 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cdPlayer<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.ql.cdPlayer.CDPlayer<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>cd-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SgtPeppers<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><hr><h3 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 技术 </tag>
            
            <tag> Spring </tag>
            
            <tag> Spring实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring容器</title>
      <link href="/2019/03/23/spring-rong-qi/"/>
      <url>/2019/03/23/spring-rong-qi/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><code>Spring</code>容器并不只有一个，<code>Spring</code>自带了多个容器实现，可以归为两种类型。</p><ul><li><code>bean工厂</code>(由<code>org.springframework.beans.factory.BeanFactory</code>接口定义)是最简单的容器提供基本的DI支持。</li><li><code>应用上下文</code>(由<code>org.springframework.context.ApplicationContext</code>接口定义)基于BeanFactory构建，并提供应用框架级别的服务，例如从属性文件解析文本信息以及发布应用事件给感兴趣的事件监听者。</li></ul><p><code>bean工厂</code>对于大多数应用来说往往太低级，因此，<code>应用上下文</code>要比<code>bean工厂</code>更受欢迎。</p><hr><h3 id="使用应用上下文"><a href="#使用应用上下文" class="headerlink" title="使用应用上下文"></a>使用应用上下文</h3><p><code>Spring</code>自带多种类型应用上下文。以下是最有可能遇到的。</p><ul><li><code>AnnotationConfigApplicationContext</code>:从一个或多个基于Java的配置类中加载<code>Spring</code>应用上下文。</li><li><code>AnnotationConfigWebApplicationContext</code>:从一个或多个基于Java的配置类中加载<code>Spring Web</code>应用上下文。</li><li><code>ClassPathXmlApplicationContext</code>:从类路径下的一个或多个XML配置文件中加载上下文定义，把应用上下文的定义文件作为类资源。</li><li><code>FileSystemXmlApplicationContext</code>:从文件系统下的一个或多个XML配置文件中加载上下文定义。</li><li><code>XmlWebApplicationContext</code>:从Web应用下的一个或多个XML配置文件中加载上下文定义。</li></ul><p>加载应用上下文:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// FileSystemXmlApplicationContext</span>ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"c:/knignt.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ClassPathXmlApplicationContext</span>ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"knignt.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// AnnotationConfigApplicationContext</span>ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>com<span class="token punctuation">.</span>knights<span class="token punctuation">.</span>config<span class="token punctuation">.</span>KnightConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>应用上下文准备就绪以后，可以调用上下文的getBean()方法从<code>Spring</code>容器中获取bean。</p><hr><h3 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 技术 </tag>
            
            <tag> Spring </tag>
            
            <tag> Spring实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十五、微服务跟踪之Spring Cloud Sleuth与Zipkin配合使用</title>
      <link href="/2019/01/31/shi-wu-wei-fu-wu-gen-zong-zhi-spring-cloud-sleuth-yu-zipkin-pei-he-shi-yong/"/>
      <url>/2019/01/31/shi-wu-wei-fu-wu-gen-zong-zhi-spring-cloud-sleuth-yu-zipkin-pei-he-shi-yong/</url>
      
        <content type="html"><![CDATA[<h4 id="Zipkin简介"><a href="#Zipkin简介" class="headerlink" title="Zipkin简介"></a><code>Zipkin</code>简介</h4><p><code>Zipkin</code>是<code>Twitter</code>开源的分布式跟踪系统，基于<code>Dapper</code>的论文设计而来。它的主要功能是收集系统的时序数据，从而跟踪微服务架构的系统时序等问题。<code>Zipkin</code>还提供了一个非常友好的界面，来帮助分析追踪数据。</p><hr><h4 id="编写Zipkin-Server"><a href="#编写Zipkin-Server" class="headerlink" title="编写Zipkin Server"></a>编写<code>Zipkin Server</code></h4><ol><li>新建项目，<code>pom</code>添加依赖：</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.zipkin.java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zipkin-autoconfigure-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.zipkin.java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zipkin-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li><p>启动类添加<code>@EnableZipkinServer</code>注解。</p></li><li><p>在<code>application.yml</code>中配置：</p></li></ol><pre class=" language-yml"><code class="language-yml">server:  port: 9411</code></pre><ol start="4"><li>启动<code>Zipkin</code>服务：<br><img src="https://github.com/qliang0816/MarkdownImage/blob/master/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%B7%9F%E8%B8%AA%E4%B9%8BSpring%20Cloud%20Sleuth/zipkin.jpg?raw=tru" alt="zipkin"></li></ol><hr><h4 id="微服务整合Zipkin"><a href="#微服务整合Zipkin" class="headerlink" title="微服务整合Zipkin"></a>微服务整合<code>Zipkin</code></h4><ol><li>客户端添加依赖：</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-sleuth-zipkin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li>在<code>application.yml</code>中配置：</li></ol><pre class=" language-yml"><code class="language-yml">spring:  zipkin:    base-url: http://localhost:9411  sleuth:    #    采样百分比，默认0.1(10%)    sampler:      percentage: 1.0</code></pre><ol start="3"><li>启动服务并访问：<br><img src="https://github.com/qliang0816/MarkdownImage/blob/master/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%B7%9F%E8%B8%AA%E4%B9%8BSpring%20Cloud%20Sleuth/zipkin1.jpg?raw=true" alt="zipkin"><br><img src="https://github.com/qliang0816/MarkdownImage/blob/master/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%B7%9F%E8%B8%AA%E4%B9%8BSpring%20Cloud%20Sleuth/zipkin2.jpg?raw=true" alt="zipkin"><br><img src="https://github.com/qliang0816/MarkdownImage/blob/master/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%B7%9F%E8%B8%AA%E4%B9%8BSpring%20Cloud%20Sleuth/zipkin3.jpg?raw=true" alt="zipkin"></li></ol><hr><h4 id="使用消息中间件收集数据"><a href="#使用消息中间件收集数据" class="headerlink" title="使用消息中间件收集数据"></a>使用消息中间件收集数据</h4><p>使用消息中间件有以下优点：</p><ul><li>微服务与<code>Zipkin Server</code>解耦，微服务无需知道<code>Zipkin Server</code>的网络地址。</li><li>在一些场景下，<code>Zipkin Server</code>与微服务网络可能不同，使用 HTTP 直接收集的方式无法工作，此时可借助消息中间件实现数据收集。</li></ul><p>如图：<br><img src="https://github.com/qliang0816/MarkdownImage/blob/master/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%B7%9F%E8%B8%AA%E4%B9%8BSpring%20Cloud%20Sleuth/zipkin%E4%BD%BF%E7%94%A8mq.png?raw=true" alt="zipkin使用mq"></p><h5 id="改造Zipkin-Server"><a href="#改造Zipkin-Server" class="headerlink" title="改造Zipkin Server"></a>改造<code>Zipkin Server</code></h5><ol><li><code>pom</code>修改依赖：</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.zipkin.java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zipkin-autoconfigure-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.zipkin.java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zipkin-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--mq收集数据--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.zipkin.java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zipkin-autoconfigure-collector-rabbitmq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li><code>application.yml</code>配置文件：</li></ol><pre class=" language-yml"><code class="language-yml">server:  port: 9411spring:  application:    name: zipkin-serverzipkin:  collector:    rabbitmq:      #      多个地址使用，分隔      addresses: localhost:5672      username: guest      password: guest      queue: zipkin</code></pre><p>这样，<code>Zipkin Server</code>就改造完成。</p><h5 id="改造微服务"><a href="#改造微服务" class="headerlink" title="改造微服务"></a>改造微服务</h5><ol><li><code>pom</code>修改依赖：</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-zipkin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li><code>application.yml</code>配置文件：</li></ol><pre class=" language-yml"><code class="language-yml">spring:  application:    name: micorservice-provider-user  rabbitmq:    host: localhost    port: 5672    username: guest    password: guest  zipkin:    rabbitmq:      queue: zipkin</code></pre><p>这样，微服务就改造完成。</p><hr><h4 id="使用Elasticsearch存储跟踪数据"><a href="#使用Elasticsearch存储跟踪数据" class="headerlink" title="使用Elasticsearch存储跟踪数据"></a>使用<code>Elasticsearch</code>存储跟踪数据</h4><p><code>Zipkin Server</code>是将数据存储在内存中的。一旦<code>Zipkin Server</code>重启或者发生崩溃，就会导致历史数据的丢失。</p><p><code>Zipkin Server</code>支持多种后端存储，如<code>MYSQL</code>、<code>Elasticsearch</code>、<code>Cassandra</code>等等。</p><ol><li><code>pom</code>修改依赖：</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.zipkin.java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zipkin-autoconfigure-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.zipkin.java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zipkin-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--mq收集数据--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.zipkin.java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zipkin-autoconfigure-collector-rabbitmq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--支持elasticsearch 2.x - 6.x--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.zipkin.java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zipkin-autoconfigure-storage-elasticsearch-http<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li><code>application.yml</code>配置文件：</li></ol><pre class=" language-yml"><code class="language-yml">zipkin:  collector:    rabbitmq:      #      多个地址使用，分隔      addresses: localhost:5672      username: guest      password: guest      queue: zipkin  storage:    type: elasticsearch    elasticsearch:      cluster: elasticsearch      hosts: http://localhost:9200      index: zipkin      index-shareds: 5      index-replicas: 5</code></pre><ol start="3"><li>启动微服务，访问后，访问<code>http://localhost:9200/_search</code>，可以看到如下结果：</li></ol><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"took"</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span>    <span class="token property">"timed_out"</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"total"</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span>        <span class="token property">"skipped"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span><span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"total"</span><span class="token operator">:</span><span class="token number">7</span><span class="token punctuation">,</span>        <span class="token property">"max_score"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"hits"</span><span class="token operator">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span>                ...            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>说明能够正常将数据存储在<code>elasticsearch</code>中。重启<code>Zipkin Server</code>，仍可以查询历史数据。</p><h5 id="依赖关系图"><a href="#依赖关系图" class="headerlink" title="依赖关系图"></a>依赖关系图</h5><p>使用<code>elasticsearch</code>存储数据后，单击<code>Zipkin Server</code>导航栏上的<code>Dependencies</code>，会发现一片空白。</p><p>要想分析微服务之间的依赖关系，需借助<code>zipkin-denpendencies</code>(<a href="https://github.com/openzipkin/zipkin-dependencies)组件，该工具本质上是一个`Spark" target="_blank" rel="noopener">https://github.com/openzipkin/zipkin-dependencies)组件，该工具本质上是一个`Spark</a> job`。</p><hr><h5 id="该文章摘自《Spring-Cloud-与-Docker-微服务架构实战-第二版-》"><a href="#该文章摘自《Spring-Cloud-与-Docker-微服务架构实战-第二版-》" class="headerlink" title="该文章摘自《Spring Cloud 与 Docker 微服务架构实战(第二版)》"></a>该文章摘自《Spring Cloud 与 Docker 微服务架构实战(第二版)》</h5><h2 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十四、微服务跟踪之Spring Cloud Sleuth</title>
      <link href="/2019/01/30/shi-si-wei-fu-wu-gen-zong-zhi-spring-cloud-sleuth/"/>
      <url>/2019/01/30/shi-si-wei-fu-wu-gen-zong-zhi-spring-cloud-sleuth/</url>
      
        <content type="html"><![CDATA[<h4 id="为什么要实现微服务跟踪"><a href="#为什么要实现微服务跟踪" class="headerlink" title="为什么要实现微服务跟踪"></a>为什么要实现微服务跟踪</h4><p>微服务之间通过网络进行通信，同时网络常常很脆弱，网络资源也有限。如果能够跟踪每个请求，了解请求经过哪些微服务、请求耗费时间、网络延迟、业务逻辑耗费时间等指标、那么久能更好地分析系统瓶颈、解决系统问题。</p><h4 id="Sping-Cloud-Sleuth简介"><a href="#Sping-Cloud-Sleuth简介" class="headerlink" title="Sping Cloud Sleuth简介"></a><code>Sping Cloud Sleuth</code>简介</h4><p><code>Sping Cloud Sleuth</code>为<code>Spring Cloud</code>提供了分布式跟踪的解决方案，它大量借用了<code>Google Dapper</code>、<code>Twitter Zipkin</code>和<code>Apache HTrace</code>的设计。</p><p><code>Sleuth</code>借用了<code>Dapper</code>的术语。</p><ul><li><code>span(跨度)</code>：基本工作单元，span 用一个 64 位 ID 唯一标识，span 还有其他数据信息，比如描述、时间戳事件、键值对的注解(标签)、span ID、span 父 ID 等。<br>span 在启动和停止时，记录了时间信息，初始化 span 被称为”root span”，该 span 的 ID 和 trace 的 ID 相同。</li><li><code>trace(跟踪)</code>：一组共享”root span”组成的一个树状结构，trace 也用一个 64 位的 ID 唯一标识，trace 中的所有 span 都共享该 trace 的 ID。</li><li><code>Annotation(标注)</code>：用来记录事件的存在，核心 annotations 用来定义一个请求的开始和结束。<ul><li><code>CS(Client Sent 客户端发送)</code>：客户端发起一个请求，这个 annotion 描述了这个 span 的开始。</li><li><code>SR(Server Received 服务端接收)</code>：服务端获得请求并准备开始处理它，如果用 SR 减去 CS 时间戳便可得到网络延迟。</li><li><code>SS(Server Sent 服务端发送)</code>：表明请求处理的完成(当请求返回客户端)，如果 SS 减去 SR 时间戳便可得到服务端需要的处理请求时间。</li><li><code>CR(Client Received 客户端接收)</code>：span 的结束，客户端成功接收到服务端的回复，如果 CR 减去 CS 时间戳便可得到客户端从服务端获取回复的所有所需时间。</li></ul></li></ul><p>下图描述请求依次经过 SERVICE1 - SERVICE2 - SERVICE3 - SERVICE4 时，span、trace、annotation 的变化。<br><img src="https://github.com/qliang0816/MarkdownImage/blob/master/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%B7%9F%E8%B8%AA%E4%B9%8BSpring%20Cloud%20Sleuth/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%BF%BD%E8%B8%AA.png?raw=true" alt="微服务追踪"></p><h4 id="整合Sping-Cloud-Sleuth"><a href="#整合Sping-Cloud-Sleuth" class="headerlink" title="整合Sping Cloud Sleuth"></a>整合<code>Sping Cloud Sleuth</code></h4><ol><li><code>pom</code>添加依赖：</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-sleuth<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>2.</p><ul><li>在<code>application.yml</code>中配置：</li></ul><pre class=" language-yml"><code class="language-yml">spring:  application:    name: micorservice-provider-userlogging:  level:    root: info    org.springframework.web.servlet.DispatcherServlet: debug</code></pre><p>访问<code>http://127.0.0.1:8000/1</code>:</p><pre class=" language-bash"><code class="language-bash">DEBUG <span class="token punctuation">[</span>micorservice-provider-user,39dc793c320ef0ea,39dc793c320ef0ea,false<span class="token punctuation">]</span> 14741 --- <span class="token punctuation">[</span>nio-8000-exec-6<span class="token punctuation">]</span> o.s.web.servlet.DispatcherServlet        <span class="token keyword">:</span> DispatcherServlet with name <span class="token string">'dispatcherServlet'</span> processing GET request <span class="token keyword">for</span> <span class="token punctuation">[</span>/1<span class="token punctuation">]</span>DEBUG <span class="token punctuation">[</span>micorservice-provider-user,39dc793c320ef0ea,39dc793c320ef0ea,false<span class="token punctuation">]</span> 14741 --- <span class="token punctuation">[</span>nio-8000-exec-6<span class="token punctuation">]</span> o.s.web.servlet.DispatcherServlet        <span class="token keyword">:</span> Last-Modified value <span class="token keyword">for</span> <span class="token punctuation">[</span>/1<span class="token punctuation">]</span> is: -1Hibernate: <span class="token keyword">select</span> user0_.id as id1_0_0_, user0_.age as age2_0_0_, user0_.balance as balance3_0_0_, user0_.name as name4_0_0_, user0_.username as username5_0_0_ from user user0_ where user0_.id<span class="token operator">=</span>?DEBUG <span class="token punctuation">[</span>micorservice-provider-user,39dc793c320ef0ea,39dc793c320ef0ea,false<span class="token punctuation">]</span> 14741 --- <span class="token punctuation">[</span>nio-8000-exec-6<span class="token punctuation">]</span> o.s.web.servlet.DispatcherServlet        <span class="token keyword">:</span> Null ModelAndView returned to DispatcherServlet with name <span class="token string">'dispatcherServlet'</span><span class="token keyword">:</span> assuming HandlerAdapter completed request handlingDEBUG <span class="token punctuation">[</span>micorservice-provider-user,39dc793c320ef0ea,39dc793c320ef0ea,false<span class="token punctuation">]</span> 14741 --- <span class="token punctuation">[</span>nio-8000-exec-6<span class="token punctuation">]</span> o.s.web.servlet.DispatcherServlet        <span class="token keyword">:</span> Successfully completed request</code></pre><ul><li>也可设置：</li></ul><pre class=" language-yml"><code class="language-yml">spring:  application:    name: micorservice-provider-userlogging:  level:    root: info    org.springframework.cloud.sleuth: debug</code></pre><p>可以了解 span 从创建到关闭的详细过程：</p><pre class=" language-bash"><code class="language-bash">DEBUG <span class="token punctuation">[</span>micorservice-provider-user,,,<span class="token punctuation">]</span> 14762 --- <span class="token punctuation">[</span>nio-8000-exec-3<span class="token punctuation">]</span> o.s.c.sleuth.instrument.web.TraceFilter  <span class="token keyword">:</span> Received a request to uri <span class="token punctuation">[</span>/1<span class="token punctuation">]</span> that should not be sampled <span class="token punctuation">[</span>false<span class="token punctuation">]</span>DEBUG <span class="token punctuation">[</span>micorservice-provider-user,dcbdd058ab08ee57,dcbdd058ab08ee57,false<span class="token punctuation">]</span> 14762 --- <span class="token punctuation">[</span>nio-8000-exec-3<span class="token punctuation">]</span> o.s.c.sleuth.instrument.web.TraceFilter  <span class="token keyword">:</span> No parent span present - creating a new spanDEBUG <span class="token punctuation">[</span>micorservice-provider-user,dcbdd058ab08ee57,dcbdd058ab08ee57,false<span class="token punctuation">]</span> 14762 --- <span class="token punctuation">[</span>nio-8000-exec-3<span class="token punctuation">]</span> o.s.c.s.i.web.TraceHandlerInterceptor    <span class="token keyword">:</span> Handling span <span class="token punctuation">[</span>Trace: dcbdd058ab08ee57, Span: dcbdd058ab08ee57, Parent: null, exportable:false<span class="token punctuation">]</span>DEBUG <span class="token punctuation">[</span>micorservice-provider-user,dcbdd058ab08ee57,dcbdd058ab08ee57,false<span class="token punctuation">]</span> 14762 --- <span class="token punctuation">[</span>nio-8000-exec-3<span class="token punctuation">]</span> o.s.c.s.i.web.TraceHandlerInterceptor    <span class="token keyword">:</span> Adding a method tag with value <span class="token punctuation">[</span>findId<span class="token punctuation">]</span> to a span <span class="token punctuation">[</span>Trace: dcbdd058ab08ee57, Span: dcbdd058ab08ee57, Parent: null, exportable:false<span class="token punctuation">]</span>DEBUG <span class="token punctuation">[</span>micorservice-provider-user,dcbdd058ab08ee57,dcbdd058ab08ee57,false<span class="token punctuation">]</span> 14762 --- <span class="token punctuation">[</span>nio-8000-exec-3<span class="token punctuation">]</span> o.s.c.s.i.web.TraceHandlerInterceptor    <span class="token keyword">:</span> Adding a class tag with value <span class="token punctuation">[</span>UserController<span class="token punctuation">]</span> to a span <span class="token punctuation">[</span>Trace: dcbdd058ab08ee57, Span: dcbdd058ab08ee57, Parent: null, exportable:false<span class="token punctuation">]</span>Hibernate: <span class="token keyword">select</span> user0_.id as id1_0_0_, user0_.age as age2_0_0_, user0_.balance as balance3_0_0_, user0_.name as name4_0_0_, user0_.username as username5_0_0_ from user user0_ where user0_.id<span class="token operator">=</span>?DEBUG <span class="token punctuation">[</span>micorservice-provider-user,dcbdd058ab08ee57,dcbdd058ab08ee57,false<span class="token punctuation">]</span> 14762 --- <span class="token punctuation">[</span>nio-8000-exec-3<span class="token punctuation">]</span> o.s.c.sleuth.instrument.web.TraceFilter  <span class="token keyword">:</span> Closing the span <span class="token punctuation">[</span>Trace: dcbdd058ab08ee57, Span: dcbdd058ab08ee57, Parent: null, exportable:false<span class="token punctuation">]</span> since the response was successful</code></pre><hr><h5 id="该文章摘自《Spring-Cloud-与-Docker-微服务架构实战-第二版-》"><a href="#该文章摘自《Spring-Cloud-与-Docker-微服务架构实战-第二版-》" class="headerlink" title="该文章摘自《Spring Cloud 与 Docker 微服务架构实战(第二版)》"></a>该文章摘自《Spring Cloud 与 Docker 微服务架构实战(第二版)》</h5><h2 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十三、统一管理微服务配置之Spring Cloud Bus自动刷新配置</title>
      <link href="/2019/01/29/shi-san-tong-yi-guan-li-wei-fu-wu-pei-zhi-zhi-spring-cloud-bus-zi-dong-shua-xin-pei-zhi/"/>
      <url>/2019/01/29/shi-san-tong-yi-guan-li-wei-fu-wu-pei-zhi-zhi-spring-cloud-bus-zi-dong-shua-xin-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h4 id="使用-refresh端点手动刷新配置"><a href="#使用-refresh端点手动刷新配置" class="headerlink" title="使用/refresh端点手动刷新配置"></a>使用<code>/refresh</code>端点手动刷新配置</h4><p>给客户端的 Controller 添加<code>@RefreshScope</code>注解，即可用<code>POST</code>访问<code>/refresh</code>端点刷新配置。</p><h4 id="使用Sping-Cloud-Bus自动刷新配置"><a href="#使用Sping-Cloud-Bus自动刷新配置" class="headerlink" title="使用Sping Cloud Bus自动刷新配置"></a>使用<code>Sping Cloud Bus</code>自动刷新配置</h4><h5 id="为什么使用Sping-Cloud-Bus"><a href="#为什么使用Sping-Cloud-Bus" class="headerlink" title="为什么使用Sping Cloud Bus"></a>为什么使用<code>Sping Cloud Bus</code></h5><p>前面使用<code>/refresh</code>端点手动刷新配置，但是如果所有微服务节点的配置都需要手动去刷新的话，那必然是一个繁琐的工作，并且随着系统的不断扩张，会变得越来越难以维护。因此，实现配置的自动刷新是很有必要的。</p><h5 id="Sping-Cloud-Bus简介"><a href="#Sping-Cloud-Bus简介" class="headerlink" title="Sping Cloud Bus简介"></a><code>Sping Cloud Bus</code>简介</h5><p><code>Spring Cloud Bus</code>提供了批量刷新配置的机制，它使用轻量级的消息代理（例如 RabbitMQ、Kafka 等）连接分布式系统的节点，这样就可以通过<code>Spring Cloud Bus</code>广播配置的变化或者其他的管理指令。架构如图：<br><img src="https://github.com/qliang0816/MarkdownImage/blob/master/%E7%BB%9F%E4%B8%80%E7%AE%A1%E7%90%86%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE%E4%B9%8BSpring%20Cloud%20Config/bus%E6%9E%B6%E6%9E%84%E5%9B%BE.png?raw=true" alt="bus架构图"></p><h5 id="实现自动刷新"><a href="#实现自动刷新" class="headerlink" title="实现自动刷新"></a>实现自动刷新</h5><ol><li><p>启动 rabbitMQ 服务。</p></li><li><p><code>pom</code>添加依赖：</p></li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-bus-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ol start="3"><li><p>的 Controller 添加<code>@RefreshScope</code>注解。</p></li><li><p>在<code>bootstrap.yml</code>中配置：</p></li></ol><pre class=" language-yml"><code class="language-yml">spring:  rabbitmq:    host: localhost    port: 5672    username: guest    password: guest</code></pre><ol start="5"><li>启动服务，<code>POST</code>请求<code>/bus/refresh</code>端点，会刷新配置文件。(可通过 Git 仓库的<code>WebHooks</code>实现自动刷新)。</li></ol><h5 id="局部刷新"><a href="#局部刷新" class="headerlink" title="局部刷新"></a>局部刷新</h5><p>可通过<code>/bus/refresh</code>端点的 destination 参数来定位要刷新的应用程序。</p><p>例如<code>/bus/refresh?destination=ApplicationContextID</code>。</p><h5 id="跟踪总线事件"><a href="#跟踪总线事件" class="headerlink" title="跟踪总线事件"></a>跟踪总线事件</h5><p>设置<code>spring.cloud.bus.trace.enabled=true</code>，在<code>/bus/refresh</code>被请求之后，访问<code>/trace</code>端点可以访问总线事件。</p><hr><h5 id="该文章摘自《Spring-Cloud-与-Docker-微服务架构实战-第二版-》"><a href="#该文章摘自《Spring-Cloud-与-Docker-微服务架构实战-第二版-》" class="headerlink" title="该文章摘自《Spring Cloud 与 Docker 微服务架构实战(第二版)》"></a>该文章摘自《Spring Cloud 与 Docker 微服务架构实战(第二版)》</h5><h2 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十二、统一管理微服务配置之Spring Cloud Config</title>
      <link href="/2019/01/27/shi-er-tong-yi-guan-li-wei-fu-wu-pei-zhi-zhi-spring-cloud-config/"/>
      <url>/2019/01/27/shi-er-tong-yi-guan-li-wei-fu-wu-pei-zhi-zhi-spring-cloud-config/</url>
      
        <content type="html"><![CDATA[<h4 id="为什么要统一管理微服务配置"><a href="#为什么要统一管理微服务配置" class="headerlink" title="为什么要统一管理微服务配置"></a>为什么要统一管理微服务配置</h4><p>对于<code>Spring Boot</code>单体应用，在启动时指定<code>spring.profiles.active={profile}</code>来加载不同环境下的配置。</p><p>在微服务架构中，这种方式未必适用，微服务架构对配置管理有着更高的要求，如：</p><ul><li><code>集中管理配置</code>：一个使用微服务建构的应用系统 Kenneth 会包含成百上千个微服务，因此集中管理配置是非常有必要的。</li><li><code>不同环境、不同配置</code>：例如数据源配置在不同的环境（开发、测试、预发布、生产等）是不同的。<br><code>运行期动态调整</code>：例如可根据各个微服务的负载情况，动态调整数据源连接池大小或熔断阈值等，并且调整时不停止服务。<br><code>配置修改后可自动更新</code>：如噢诶之内容发生变化，微服务能够自动更新配置。</li></ul><h4 id="Sping-Cloud-Config简介"><a href="#Sping-Cloud-Config简介" class="headerlink" title="Sping Cloud Config简介"></a><code>Sping Cloud Config</code>简介</h4><ul><li><code>Spring Cloud Config</code>为分布式系统外部化配置提供了服务端和客户端的支持，包含<code>Config Server</code>和<code>Config Client</code>两部分。</li><li><code>Config Server</code>是一个集中式、可扩展的配置服务器，它可以集中管理应用程序各个环境下的配置，默认使用 Git 存储配置内容。</li><li><code>Config Client</code>是<code>Config Server</code>的客户端，微服务在启动时，请求<code>Config Server</code>以获取配置内容，同时会缓存这些属性。<br><img src="https://github.com/qliang0816/MarkdownImage/blob/master/%E7%BB%9F%E4%B8%80%E7%AE%A1%E7%90%86%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE%E4%B9%8BSpring%20Cloud%20Config/spring-cloud-config%E6%9E%B6%E6%9E%84%E5%9B%BE.png?raw=true" alt="config架构图"></li></ul><hr><h4 id="编写Config-Server"><a href="#编写Config-Server" class="headerlink" title="编写Config Server"></a>编写<code>Config Server</code></h4><ol><li>创建 git 仓库，新建配置文件：</li></ol><pre><code>microservice.propertiesmicroservice-dev.propertiesmicroservice-test.propertiesmicroservice-production.properties</code></pre><p>内容分别是：</p><pre class=" language-xml"><code class="language-xml">profile=default-1.0profile=dev-1.0profile=test-1.0profile=production-1.0</code></pre><p>创建<code>config-label-v2.0</code>分支，并将配置文件中的 1.0 改为 2.0。</p><ol start="2"><li><code>pom</code>添加依赖：</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-config-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ol start="3"><li>在启动类添加<code>@EnableConfigServer</code>注解。</li></ol><p>4) 在<code>application.yml</code>中配置：</p><pre class=" language-yml"><code class="language-yml">server:  port: 1010spring:  application:    name: microservice-config-server  cloud:    config:      server:        git:          uri: https://github.com/qliang0816/springCloudTestConfigServer          username:          password:</code></pre><p>可以通过<code>Config Server</code>端点获取配置文件内容，端点与配置文件映射关系如下：</p><pre class=" language-xml"><code class="language-xml">/{application}/{profile}/[{label}]/{label}/{application}-{profile}.properties/{application}-{profile}.properties/{label}/{application}-{profile}.yml/{application}-{profile}.yml</code></pre><ul><li><code>{application}</code>：微服务名称</li><li><code>{profile}</code>：文件名对应的 dev,test,production 等后缀</li><li><code>{label}</code>：对应 Git 仓库的分支，默认是 master</li></ul><p>访问<code>http://127.0.0.1:1010/microservice-foo/dev</code>，获得如下结果：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"microservice-foo"</span><span class="token punctuation">,</span>  <span class="token property">"profiles"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"dev"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"label"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"4c756555be6e85bfdd15e89d19aee173ec548643"</span><span class="token punctuation">,</span>  <span class="token property">"state"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>  <span class="token property">"propertySources"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"https://github.com/qliang0816/springCloudTestConfigServer/microservice-foo-dev.properties"</span><span class="token punctuation">,</span>      <span class="token property">"source"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"profile"</span><span class="token operator">:</span> <span class="token string">"dev-1.0-bus"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"https://github.com/qliang0816/springCloudTestConfigServer/microservice-foo.properties"</span><span class="token punctuation">,</span>      <span class="token property">"source"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"profile"</span><span class="token operator">:</span> <span class="token string">"default-1.0"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>访问<code>http://127.0.0.1:1010/microservice-foo-dev.properties</code>，获得如下结果：</p><pre class=" language-xml"><code class="language-xml">profile: dev-1.0</code></pre><p>访问<code>http://127.0.0.1:1010/config-label-v2.0/microservice-foo-dev.properties</code>，获得如下结果：</p><pre class=" language-xml"><code class="language-xml">profile: dev-2.0</code></pre><h4 id="编写Config-Client"><a href="#编写Config-Client" class="headerlink" title="编写Config Client"></a>编写<code>Config Client</code></h4><ol><li><code>pom</code>添加依赖：</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li>创建配置文件<code>application.yml</code>：</li></ol><pre class=" language-yml"><code class="language-yml">server:  port: 1011</code></pre><ol start="3"><li>创建配置文件<strong>bootstrap.yml</strong>：</li></ol><pre class=" language-yml"><code class="language-yml">spring:  application:    #    对应的config server所获取的配置文件的{application}    name: microservice-foo  cloud:    config:      uri: http://localhost:1010/      #      对应的config server所获取的配置文件的{profile}      profile: dev      #      指定Git仓库的分支，对应的config server所获取的配置文件的{label}      label: master</code></pre><p><code>Spring Cloud</code>中有”引导上下文”的概念，这是主应用程序的父上下文。引导上下文负责从配置服务器加载配置属性，以及解密外部配置文件中的属性。和主应用程序加载<code>application.*</code>中的属性不同，引导上下文加载<code>bootstrap.*</code>中 的属性，配置在<code>bootstrap.*</code>中 属性具有更高的优先级，默认情况下不能被本地配置覆盖。</p><p>若需禁用引导过程，可设置<code>spring.cloud.bootstrap.enabled=false</code>。</p><ol start="4"><li>编写 Controller</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigClientController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${profile}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String profile<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/profile"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>profile<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.2 访问<code>http://127.0.0.1:1011/profile</code>，返回如下结果：</p><pre class=" language-xml"><code class="language-xml">dev-1.0</code></pre><h4 id="Config-Server的-Git-仓库皮质详解"><a href="#Config-Server的-Git-仓库皮质详解" class="headerlink" title="Config Server的 Git 仓库皮质详解"></a><code>Config Server</code>的 Git 仓库皮质详解</h4><h5 id="占位符支持"><a href="#占位符支持" class="headerlink" title="占位符支持"></a>占位符支持</h5><p><code>Config Server</code>的占位符支持<code>{application}</code>、<code>{profile}</code>、<code>{label}</code>。</p><pre class=" language-yml"><code class="language-yml">spring:  application:    name: microservice-config-server  cloud:    config:      server:        git:          uri: https://github.com/qliang0816/{application}          username:          password:</code></pre><p>这种方式，可支持一个应用对应一个 Git 仓库。也可支持一个 profile 对应一个 Git 仓库。</p><h5 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h5><pre class=" language-yml"><code class="language-yml">spring:  application:    name: microservice-config-server  cloud:    config:      server:        git:          #          如果{application}/{profile}不匹配任何模式，将使用此URI          uri: https://github.com/spring-cloud-samples/config-repo          repos:            #            匹配所有配置文件中名为simple的应用程序            simple: https://github.com/simple/config-repo            special:              pattern: special*/dev/*,*special*/dev*              uri: https://github.com/special/config-repo            #            匹配所有配置文件中以local开头的所有应用程序的名称            local:              pattern: local*              uri: file:/home/configsvc/config-repo</code></pre><h5 id="搜索目录"><a href="#搜索目录" class="headerlink" title="搜索目录"></a>搜索目录</h5><pre class=" language-yml"><code class="language-yml">spring:  application:    name: microservice-config-server  cloud:    config:      server:        git:          uri: https://github.com/qliang0816/springCloudTestConfigServer          #          foo子目录以及以bar开始的子目录          search-paths: foo,bar*</code></pre><h5 id="启动时加载配置文件"><a href="#启动时加载配置文件" class="headerlink" title="启动时加载配置文件"></a>启动时加载配置文件</h5><p>默认情况下，首次请求配置时，<code>Config Server</code>克隆 Git 仓库，也可以通过 clone-on-start 设置<code>Config Server</code>启动时是否克隆 git 仓库：</p><pre class=" language-yml"><code class="language-yml">spring:  application:    name: microservice-config-server  cloud:    config:      server:        git:          uri: https://github.com/qliang0816/springCloudTestConfigServer          repos:            team-a:              pattern: microservice-*              clone-on-start: true              uri: https://github.com/qliang0816/springCloudTestConfigServer2</code></pre><p>全局配置：<code>spring.cloud.config.server.git.clone-on-start: true</code></p><hr><p><code>Config Server</code>也可以对敏感数据进行加解密——<a href="http://cloud.spring.io/spring-cloud-static/Edgware.RELEASE/single/spring-cloud.html#_git_ssh_configuration_using_properties" target="_blank" rel="noopener">官方地址</a></p><hr><h5 id="该文章摘自《Spring-Cloud-与-Docker-微服务架构实战-第二版-》"><a href="#该文章摘自《Spring-Cloud-与-Docker-微服务架构实战-第二版-》" class="headerlink" title="该文章摘自《Spring Cloud 与 Docker 微服务架构实战(第二版)》"></a>该文章摘自《Spring Cloud 与 Docker 微服务架构实战(第二版)》</h5><h2 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十一、微服务网关之Zuul的Hystrix隔离策略和线程池</title>
      <link href="/2019/01/27/shi-yi-wei-fu-wu-wang-guan-zhi-zuul-de-hystrix-ge-chi-ce-lue-he-xian-cheng-chi/"/>
      <url>/2019/01/27/shi-yi-wei-fu-wu-wang-guan-zhi-zuul-de-hystrix-ge-chi-ce-lue-he-xian-cheng-chi/</url>
      
        <content type="html"><![CDATA[<p><code>Spring Cloud</code>中，<code>Zuul</code>默认已经整合了<code>Hystrix</code>，而<code>Hystrix</code>有隔离策略——<code>THREAD</code>及<code>SEMAPHORE</code>。</p><h4 id="隔离策略"><a href="#隔离策略" class="headerlink" title="隔离策略"></a>隔离策略</h4><ul><li>默认情况下，<code>Zuul</code>的隔离策略是<code>SEMAPHORE</code> 。</li><li>可设置<strong>zuul.ribbonIsolationStrategy=THREAD</strong>将隔离策略改为<code>THREAD</code>。</li></ul><hr><h4 id="线程池配置"><a href="#线程池配置" class="headerlink" title="线程池配置"></a>线程池配置</h4><p>当设置隔离策略为<code>THREAD</code>时，<code>Hystrix</code>的线程隔离策略将作用所有路由，<code>HystrixThreadPoolKey</code> 默认为<code>RibbonCommand</code>，这意味着，所有路由的<code>HystrixCommand</code>都会在相同的<code>Hystrix</code>线程池中执行。</p><p>可使用以下配置，让每个路由使用独立的线程池：</p><pre class=" language-yml"><code class="language-yml">zuul:  threadPool:    useSeparateThreadPools: true</code></pre><p><code>的HystrixThreadPoolkey</code> 将与每个路由的服务标识相同。如果想为<code>HystrixThreadPoolKey</code>添加前缀，可使用类似如下的配置：</p><pre class=" language-yml"><code class="language-yml">zuul:  threadPool:    useSeparateThreadPools: true    threadPoolKeyPrefix: prefix-</code></pre><p><code>HystrixThreadPoolKey</code>将变为<code>${profix}-{服务标识}</code></p><hr><h5 id="该文章摘自《Spring-Cloud-与-Docker-微服务架构实战-第二版-》"><a href="#该文章摘自《Spring-Cloud-与-Docker-微服务架构实战-第二版-》" class="headerlink" title="该文章摘自《Spring Cloud 与 Docker 微服务架构实战(第二版)》"></a>该文章摘自《Spring Cloud 与 Docker 微服务架构实战(第二版)》</h5><h2 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十、微服务网关之Zuul容错与回退</title>
      <link href="/2019/01/26/shi-wei-fu-wu-wang-guan-zhi-zuul-rong-cuo-yu-hui-tui/"/>
      <url>/2019/01/26/shi-wei-fu-wu-wang-guan-zhi-zuul-rong-cuo-yu-hui-tui/</url>
      
        <content type="html"><![CDATA[<p><code>Spring Cloud</code>中，<code>Zuul</code>默认已经整合了<code>Hystrix</code>。</p><h4 id="Zuul回退"><a href="#Zuul回退" class="headerlink" title="Zuul回退"></a><code>Zuul</code>回退</h4><p>编写<code>Zuul</code>回退类:</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFallbackProvider</span> <span class="token keyword">implements</span> <span class="token class-name">FallbackProvider</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    表明是为哪个微服务提供回退，*代表所有</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"*"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ClientHttpResponse <span class="token function">fallbackResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>INTERNAL_SERVER_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ClientHttpResponse <span class="token function">fallbackResponse</span><span class="token punctuation">(</span>Throwable cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cause <span class="token keyword">instanceof</span> <span class="token class-name">HystrixTimeoutException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">response</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>GATEWAY_TIMEOUT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fallbackResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> ClientHttpResponse <span class="token function">response</span><span class="token punctuation">(</span><span class="token keyword">final</span> HttpStatus status<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ClientHttpResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> HttpStatus <span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>                <span class="token keyword">return</span> status<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getRawStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>                <span class="token keyword">return</span> status<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> String <span class="token function">getStatusText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>                <span class="token keyword">return</span> status<span class="token punctuation">.</span><span class="token function">getReasonPhrase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> InputStream <span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span><span class="token string">"服务不可用，请稍后再试。"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> HttpHeaders <span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                HttpHeaders httpHeaders <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                MediaType mediaType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MediaType</span><span class="token punctuation">(</span><span class="token string">"application"</span><span class="token punctuation">,</span> <span class="token string">"json"</span><span class="token punctuation">,</span> Charset<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                httpHeaders<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span>mediaType<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> httpHeaders<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>当访问的微服务无法正常响应时，会返回如下内容:</p><pre><code>服务不可用，请稍后再试。</code></pre><hr><h5 id="该文章摘自《Spring-Cloud-与-Docker-微服务架构实战-第二版-》"><a href="#该文章摘自《Spring-Cloud-与-Docker-微服务架构实战-第二版-》" class="headerlink" title="该文章摘自《Spring Cloud 与 Docker 微服务架构实战(第二版)》"></a>该文章摘自《Spring Cloud 与 Docker 微服务架构实战(第二版)》</h5><h2 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>九、微服务网关之Zuul过滤器</title>
      <link href="/2019/01/26/jiu-wei-fu-wu-wang-guan-zhi-zuul-guo-lu-qi/"/>
      <url>/2019/01/26/jiu-wei-fu-wu-wang-guan-zhi-zuul-guo-lu-qi/</url>
      
        <content type="html"><![CDATA[<h4 id="过滤器类型与请求生命周期"><a href="#过滤器类型与请求生命周期" class="headerlink" title="过滤器类型与请求生命周期"></a>过滤器类型与请求生命周期</h4><ul><li><code>PRE</code>：这种过滤器在请求被路由之前调用。可利用这种过滤器实现身份验证、在集群中选择请求的微服务、记录调试信息等。</li><li><code>ROUTING</code>：这种过滤器将请求路由到微服务。这种过滤器用于构建发送给微服务的请求，并使用<code>Apache HttpClient</code>或<code>Netfilx Ribbon</code>请求微服务。</li><li><code>POST</code>：这种过滤器在路由到微服务后执行。这种过滤器可用来为响应添加标准的<code>HTTP Header</code>、收集统计信息和指标、将响应从微服务发送给客户端等。</li><li><code>ERROR</code>：在其他阶段发生错误时执行该过滤器。</li></ul><p>除了默认的过滤器类型，<code>Zuul</code>还允许创建自定义的过滤器类型。例如，可以定制一种<code>STATIC</code>类型的过滤器，直接在<code>Zuul</code>中生成响应，而不将请求转发到后端的微服务。</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3%E4%B9%8BZuul/zuul%E8%BF%87%E6%BB%A4%E5%99%A8.jpg?raw=true" alt="过滤器"></p><hr><h4 id="内置过滤器详解"><a href="#内置过滤器详解" class="headerlink" title="内置过滤器详解"></a>内置过滤器详解</h4><p><code>@EnableZuulProxy</code>是最常用的注解，是<code>@EnableZuulServer</code>的增强版。</p><p><code>RequestContext</code>扩展了<code>ConcurrentHashMap</code>，用于在过滤器之间传递消息。它的数据保存在每个请求的<code>ThreadLocal</code>中。用于存储请求路由到哪里、错误、<code>HttpServlet</code>、<code>HttpServletResponse</code>等信息。</p><h5 id="EnableZuulServer所启用的过滤器"><a href="#EnableZuulServer所启用的过滤器" class="headerlink" title="@EnableZuulServer所启用的过滤器"></a><code>@EnableZuulServer</code>所启用的过滤器</h5><ul><li><strong>pre 类型过滤器</strong></li></ul><ol><li><code>ServletDetectionFilter</code>：该过滤器用于检查请求是否通过<code>Spring Dispatcher</code>。检查后，通过<code>FilterConstants.IS_DISPATCHER_SERVLET_REQUEST_KEY</code>(<code>isDispatcherServletRequest</code>)设置布尔值。</li><li><code>FormBodyWrapperFilter</code>：解析表单数据，并为请求重新编码。</li><li><code>DebugFilter</code>：顾名思义，调试用的过滤器，当设置<code>zuul.include-debug-header=true</code>或<code>zuul.debug.request=true</code> ，并在请求时，加上<code>debug=true</code>的参数，例如<code>$ZUUL_HOST:ZUUL_PORT/path?debug=true</code>,就会开启该过滤器。该过滤器就会把<code>RequestContext.setDebugRouting()</code>、<code>RequestContext.setDebugRequest()</code>设为 true。</li></ol><ul><li><strong>route 类型过滤器</strong></li></ul><p><code>SendForwardFilter</code>：该过滤器使用<code>Servlet RequestDispatcher</code>转发请求，转发位置存储在<code>RequestContext</code>的属性<code>FilterConstants.FOREWARD_TO_KEY</code> 中。这对转发到<code>Zuul</code>自身的端点很有用。可以将路由改成：</p><pre class=" language-yml"><code class="language-yml">zuul:  routes:    abc:      path: /path-a/**      url: forward:/path-b</code></pre><p>然后访问<code>$ZUUL_HOST:ZUUL_PORT/path-a</code> ，观察该过滤器的执行过程。</p><ul><li><strong>post 类型过滤器</strong></li></ul><p><code>SendResponseFilter</code>：将<code>Zuul</code>所代理请求的的响应写入当前响应。</p><ul><li><strong>error 类型过滤器</strong></li></ul><p><code>SendErrorFilter</code>：如果<code>RequestContext.getThrowable()</code> 不为 null，那么默认就会转发到<code>/error</code>，也可以设置<code>error.path</code>属性修改默认的转发路径。</p><h5 id="EnableZuulProxy所启用的过滤器"><a href="#EnableZuulProxy所启用的过滤器" class="headerlink" title="@EnableZuulProxy所启用的过滤器"></a><code>@EnableZuulProxy</code>所启用的过滤器</h5><p>如果使用注解<code>@EnableZuulProxy</code>，那么除上述过滤器之外，<code>Spring Cloud</code>还会安装以下过滤器：</p><ul><li><strong>pre 类型过滤器</strong></li></ul><p><code>PreDecorationFilter</code>：该过滤器根据提供的<code>RouteLocator</code>确定路由到的地址，以及怎样去路由。该路由器也可为后端请求设置各种代理相关的 header。</p><ul><li><strong>route 类型过滤器</strong></li></ul><ol><li><code>RibbonRoutingFilter</code>：该过滤器使用<code>Ribbon</code>，<code>Hystrix</code>和可插拔的 HTTP 客户端发送请求。serviceId 在<code>RequestContext</code>的属性<code>FilterConstants.SERVICE_ID_KEY</code>(<code>RequestContext.getCurrentContext().get("serviceId")</code>) 中。该过滤器可使用不同的 HTTP 客户端。</li></ol><ul><li><code>Apache HttpClient</code>：默认的 HTTP 客户端。</li><li><code>Squareup OkHttpClient v3</code>：如需使用该客户端，需保证<code>com.squareup.okhttp3</code>的依赖在 classpath 中，并设置<code>ribbon.okhttp.enabled = true</code>。</li><li><code>Netflix Ribbon HTTP client</code>：设置<code>ribbon.restclient.enabled = true</code> 即可启用该 HTTP 客户端。需要注意的是，该客户端有一定限制，例如不支持 PATCH 方法，另外，它有内置的重试机制。</li></ul><ol start="2"><li><code>SimpleHostRoutingFilter</code>：该过滤器通过<code>Apache HttpClient</code>向指定的 URL 发送请求。URL 在<code>RequestContext.getRouteHost()</code>中。</li></ol><hr><h4 id="编写Zuul过滤器"><a href="#编写Zuul过滤器" class="headerlink" title="编写Zuul过滤器"></a>编写<code>Zuul</code>过滤器</h4><ol><li>编写自定义<code>Zuul</code>过滤器:</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PreRequestLogFilter</span> <span class="token keyword">extends</span> <span class="token class-name">ZuulFilter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>PreRequestLogFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">filterType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> FilterConstants<span class="token punctuation">.</span>PRE_TYPE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">filterOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> FilterConstants<span class="token punctuation">.</span>PRE_DECORATION_FILTER_ORDER <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">shouldFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        RequestContext context <span class="token operator">=</span> RequestContext<span class="token punctuation">.</span><span class="token function">getCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HttpServletRequest request <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PreRequestLogFilter<span class="token punctuation">.</span>LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"send %s request to %s"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>由代码可知，自定义的 Zuul Filter 需实现以下几个方法：</p><ul><li><code>filterType</code>：返回过滤器的类型。有<code>pre</code>、<code>route</code>、<code>post</code>、<code>error</code>等几种取值，分别对应上文的几种过滤器。详细可以参考<code>com.netflix.zuul.ZuulFilter.filterType()</code> 中的注释。</li><li><code>filterOrder</code>：返回一个 int 值来指定过滤器的执行顺序，不同的过滤器允许返回相同的数字。</li><li><code>shouldFilter</code>：返回一个 boolean 值来判断该过滤器是否要执行，true 表示执行，false 表示不执行。</li><li><code>run</code>：过滤器的具体逻辑。本例中，我们让它打印了请求的 HTTP 方法以及请求的地址。</li></ul><ol start="3"><li>在启动类上添加:</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> PreRequestLogFilter <span class="token function">preRequestLogFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PreRequestLogFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="4"><li>启动用户微服务，<br>访问<code>http://127.0.0.1:8040/microservice-provider-user/1</code>，获得如下日志：</li></ol><pre class=" language-bash"><code class="language-bash">INFO 9107 --- <span class="token punctuation">[</span>nio-8040-exec-3<span class="token punctuation">]</span> c.i.z.m.PreRequestLogFilter              <span class="token keyword">:</span> send GET request to /microservice-provider-user/1</code></pre><p>说明自定义<code>Zuul</code>过滤器被执行了。</p><h4 id="禁用Zuul过滤器"><a href="#禁用Zuul过滤器" class="headerlink" title="禁用Zuul过滤器"></a>禁用<code>Zuul</code>过滤器</h4><p><code>Spring Cloud</code>默认为<code>Zuul</code>编写并启用了一些过滤器，例如<code>DebugFilter</code>、<code>FormBodyWrapperFilter</code>、<code>PreDecorationFilter</code>等。这些过滤器都存放在<code>spring-cloud-netflix-core</code>这个 Jar 包的<code>org.springframework.cloud.netflix.zuul.filters</code>包中。</p><p>一些场景下，我们想要禁用掉部分过滤器，只需设置<strong>zuul.<simpleclassname>.<filtertype>.disable=true</filtertype></simpleclassname></strong> ，即可禁用<code>SimpleClassName</code>所对应的过滤器。以过滤器<code>org.springframework.cloud.netflix.zuul.filters.post.SendResponseFilter</code>为例，只需设置<strong>zuul.SendResponseFilter.post.disable=true</strong> ，即可禁用该过滤器。</p><hr><h5 id="该文章摘自《Spring-Cloud-与-Docker-微服务架构实战-第二版-》"><a href="#该文章摘自《Spring-Cloud-与-Docker-微服务架构实战-第二版-》" class="headerlink" title="该文章摘自《Spring Cloud 与 Docker 微服务架构实战(第二版)》"></a>该文章摘自《Spring Cloud 与 Docker 微服务架构实战(第二版)》</h5><h2 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八、微服务网关之Zuul</title>
      <link href="/2019/01/24/ba-wei-fu-wu-wang-guan-zhi-zuul/"/>
      <url>/2019/01/24/ba-wei-fu-wu-wang-guan-zhi-zuul/</url>
      
        <content type="html"><![CDATA[<h4 id="为什么要用微服务网关"><a href="#为什么要用微服务网关" class="headerlink" title="为什么要用微服务网关"></a>为什么要用微服务网关</h4><p>如下图，外部客户端可能需要调用多个服务的接口才能完成一个业务需求，如果让客户端直接与微服务通信会产生以下的问题：</p><ul><li>客户端会多次请求不同的微服务，增加了客户端的复杂性。</li><li>存在跨域请求，在一定场景下处理比较复杂。</li><li>认证复杂，每个服务都需要单独认证。</li><li>难以重构，随着项目的迭代，可能需要重新划分微服务。例如，可能将多个服务合并成一个或者将一个服务拆分成多个。如果客户端直接与微服务通信，那么重构将很难实施。</li><li>某些微服务可能使用了防火墙/浏览器不友好的协议，直接访问会有一定的困难。</li></ul><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3%E4%B9%8BZuul/%E7%94%A8%E6%88%B7%E8%AF%B7%E6%B1%82%E5%A4%9A%E4%B8%AA%E5%BE%AE%E6%9C%8D%E5%8A%A1.png?raw=true" alt="用户请求多个微服务"></p><p>以上问题可借助微服务网关解决。微服务网关是介于客户端和服务器端之间的中间层，所有的外部请求都会先经过微服务网关。<br>如图，微服务网关封装了应用程序的内部结构，客户端只须跟网关交互，而无须直接调用特定微服务的接口，这样，开发就可以得到简化。不仅如此，使用微服务网关还有以下优点：</p><ul><li><strong>易于监控</strong>。可在微服务网关收集监控数据并将其推送到外部系统进行分析；</li><li><strong>易于认证</strong>。可在微服务网关上进行认证，然后再将请求转发到后端的微服务，而无须再每个微服务中进行认证；</li><li><strong>减少了客户端与各个微服务之间的交互次数</strong>。</li></ul><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3%E4%B9%8BZuul/%E4%BD%BF%E7%94%A8%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3.png?raw=true" alt="使用微服务网关"></p><hr><h4 id="Zuul简介"><a href="#Zuul简介" class="headerlink" title="Zuul简介"></a><code>Zuul</code>简介</h4><p><code>Zuul</code>是<code>Netflix</code>开源的微服务网关，它可以和<code>Eureka</code>、<code>Ribbon</code>、<code>Hystrix</code>等组件配合使用。</p><p><code>Zuul</code>的核心是一系列的过滤器，这些过滤器可以完成以下功能：</p><ul><li><strong>身份认证与安全</strong>：识别每个资源的验证要求，并拒绝那些与要求不符的请求；</li><li><strong>审查与监控</strong>：在边缘位置追踪有意义的数据和统计结果，从而带来精确的生产视图；</li><li><strong>动态路由</strong>：动态地将请求路由到不同的后端集群；</li><li><strong>压力测试</strong>：逐渐增加指向集群的流量，以了解性能；</li><li><strong>负载分配</strong>：为每一种负载类型分配对应容量，并弃用超出限定值的请求；</li><li><strong>静态响应处理</strong>：在边缘位置直接建立部分响应，从而避免其转发到内部集群；</li><li><strong>多区域弹性</strong>：跨域<code>AWS Region</code>进行请求路由。</li></ul><hr><h4 id="编写Zuul微服务网关"><a href="#编写Zuul微服务网关" class="headerlink" title="编写Zuul微服务网关"></a>编写<code>Zuul</code>微服务网关</h4><ol><li>创建 Maven 工程，<code>pom</code>文件添加已下依赖:</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-zuul<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li>在配置文件<code>application.yml</code>中添加:</li></ol><pre class=" language-yml"><code class="language-yml">server:  port: 8040spring:  application:    name: microsrvice-gateway-zuuleureka:  client:    serviceUrl:      defaultZone: http://localhost:8761/eureka/#关闭才可查看端点management:  security:    enabled: false</code></pre><ol start="3"><li><p>在启动类上添加<code>@EnableZuulProxy</code>注解，声明一个<code>Zuul</code>代理，该代理使<code>用Ribbon</code>来定位注册在<code>Eureka Server</code>中的微服务；同时，该代理还整合了<code>hystrix</code>，所有经过<code>Zuul</code>的请求都会在<code>Hystrix</code>命令中执行。</p></li><li><p>启动用户微服务，电影微服务，<br><br>访问<code>http://localhost:8040/micorservice-consumer-movie/user/1</code>，请求会被转发到<code>http://localhost:8010/user/1</code><br><br>访问<code>http://localhost:8040/microservice-provider-user/1</code>，请求会被转发到<code>http://localhost:8000/1</code></p></li></ol><ul><li>说明默认情况下，<code>Zuul</code>会代理所有注册到<code>Eureka Server</code>的微服务，并且<code>Zuul</code>的路由规则如下：<code>http://ZUUL_HOST:ZUUL_PORT/微服务在Eureka上的serviceId/**</code>会被转发到<code>serviceId</code>对应的微服务。</li></ul><ol start="5"><li><code>Zuul</code>可以使用<code>Ribbon</code>达到负载均衡的效果。</li><li><code>Zuul</code>已经整合<code>Hystrix</code>,访问<code>http://localhost:8040/hystrix.stream</code>可以查看监控。</li><li></li></ol><ul><li><code>GET</code>方式访问<code>routes</code>端点：<code>http://127.0.0.1:8040/routes</code>:</li></ul><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"/microservice-consumer-movie/**"</span><span class="token operator">:</span> <span class="token string">"microservice-consumer-movie"</span><span class="token punctuation">,</span>  <span class="token property">"/microservice-provider-user/**"</span><span class="token operator">:</span> <span class="token string">"microservice-provider-user"</span><span class="token punctuation">}</span></code></pre><ul><li><code>POST</code>方式访问该端点，强制刷新<code>Zuul</code>当前映射的路由列表。</li><li>访问<code>filters</code>端点：<code>http://127.0.0.1:8040/filters</code>:</li></ul><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"error"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"class"</span><span class="token operator">:</span> <span class="token string">"org.springframework.cloud.netflix.zuul.filters.post.SendErrorFilter"</span><span class="token punctuation">,</span>      <span class="token property">"order"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token property">"disabled"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token property">"static"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"post"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"class"</span><span class="token operator">:</span> <span class="token string">"org.springframework.cloud.netflix.zuul.filters.post.SendResponseFilter"</span><span class="token punctuation">,</span>      <span class="token property">"order"</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>      <span class="token property">"disabled"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token property">"static"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"pre"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"class"</span><span class="token operator">:</span> <span class="token string">"org.springframework.cloud.netflix.zuul.filters.pre.DebugFilter"</span><span class="token punctuation">,</span>      <span class="token property">"order"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"disabled"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token property">"static"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"class"</span><span class="token operator">:</span> <span class="token string">"org.springframework.cloud.netflix.zuul.filters.pre.FormBodyWrapperFilter"</span><span class="token punctuation">,</span>      <span class="token property">"order"</span><span class="token operator">:</span> -<span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"disabled"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token property">"static"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"class"</span><span class="token operator">:</span> <span class="token string">"org.springframework.cloud.netflix.zuul.filters.pre.Servlet30WrapperFilter"</span><span class="token punctuation">,</span>      <span class="token property">"order"</span><span class="token operator">:</span> -<span class="token number">2</span><span class="token punctuation">,</span>      <span class="token property">"disabled"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token property">"static"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"class"</span><span class="token operator">:</span> <span class="token string">"org.springframework.cloud.netflix.zuul.filters.pre.ServletDetectionFilter"</span><span class="token punctuation">,</span>      <span class="token property">"order"</span><span class="token operator">:</span> -<span class="token number">3</span><span class="token punctuation">,</span>      <span class="token property">"disabled"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token property">"static"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"class"</span><span class="token operator">:</span> <span class="token string">"org.springframework.cloud.netflix.zuul.filters.pre.PreDecorationFilter"</span><span class="token punctuation">,</span>      <span class="token property">"order"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>      <span class="token property">"disabled"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token property">"static"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"route"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"class"</span><span class="token operator">:</span> <span class="token string">"org.springframework.cloud.netflix.zuul.filters.route.SimpleHostRoutingFilter"</span><span class="token punctuation">,</span>      <span class="token property">"order"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>      <span class="token property">"disabled"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token property">"static"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"class"</span><span class="token operator">:</span> <span class="token string">"org.springframework.cloud.netflix.zuul.filters.route.RibbonRoutingFilter"</span><span class="token punctuation">,</span>      <span class="token property">"order"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>      <span class="token property">"disabled"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token property">"static"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"class"</span><span class="token operator">:</span> <span class="token string">"org.springframework.cloud.netflix.zuul.filters.route.SendForwardFilter"</span><span class="token punctuation">,</span>      <span class="token property">"order"</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>      <span class="token property">"disabled"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token property">"static"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><hr><h4 id="Zuul路由配置详解"><a href="#Zuul路由配置详解" class="headerlink" title="Zuul路由配置详解"></a><code>Zuul</code>路由配置详解</h4><ol><li>自定义指定微服务的访问路径：</li></ol><pre class=" language-yml"><code class="language-yml">zuul:  routes:    microservice-provider-user: /user/**</code></pre><p><code>microservice-provider-user</code>微服务就会被映射到路径<code>/user/**</code></p><ol start="2"><li>忽略指定微服务:</li></ol><pre class=" language-yml"><code class="language-yml">zuul:  ignored-services: microservice-provider-user,microservice-consumer-movie</code></pre><ol start="3"><li>忽略所有微服务，只路由指定微服务:</li></ol><pre class=" language-yml"><code class="language-yml">ignored-services: "*"routes:  microservice-provider-user: /user/**</code></pre><ol start="4"><li>同时指定微服务的<code>serviceId</code>和路径:</li></ol><pre class=" language-yml"><code class="language-yml">zuul:  routes:    #    user-route只是名称，可以任意起    user-route:      service-id: microservice-provider-user      path: /user/**</code></pre><ol start="5"><li>同时指定<code>path</code>和<code>URL</code>:</li></ol><pre class=" language-yml"><code class="language-yml">zuul:  routes:    #    user-route只是名称，可以任意起    user-route:      url: http://localhost:8000/      path: /user/**</code></pre><p>但是这样有些问题，这种方式配置的路由不会作为<code>HystrixCommand</code>执行，也不能使用<code>Ribbon</code>来负载均衡多<code>个URL</code>。</p><ol start="6"><li>同时指定<code>path</code>和<code>URL</code>，并且不破坏<code>Zuul</code>的<code>Hystrix</code>,<code>Ribbon</code>特性:</li></ol><pre class=" language-yml"><code class="language-yml">zuul:  routes:    user-route:      service-id: microservice-provider-user      path: /user/**ribbon:  eureka:    enabled: falsemicroservice-provider-user:  ribbon:    listOfServers: localhost:8000,localhost:8001</code></pre><ol start="7"><li>路由前缀:</li></ol><ul><li>访问<code>Zuul</code>的<code>/api/microservice-provider-user/1</code>,请求转发到<code>micorservice-provider-user</code>的<code>/api/1</code>:</li></ul><pre class=" language-yml"><code class="language-yml">zuul:  prefix: /api  stripPrefix: false  routes:    microservice-provider-user: /user/**</code></pre><ul><li>访问<code>Zuul</code>的<code>/user/1</code>,请求转发到<code>micorservice-provider-user</code>的<code>/user/1</code>:</li></ul><pre class=" language-yml"><code class="language-yml">zuul:  routes:    microservice-provider-user:      path: /user/**      stripPrefix: false</code></pre><ol start="8"><li>忽略某些路径:</li></ol><pre class=" language-yml"><code class="language-yml">zuul:  routes:    microservice-provider-user: /user/**  ignored-patterns: /**/admin/** #忽略所有包含admin路径的</code></pre><hr><h5 id="该文章摘自《Spring-Cloud-与-Docker-微服务架构实战-第二版-》"><a href="#该文章摘自《Spring-Cloud-与-Docker-微服务架构实战-第二版-》" class="headerlink" title="该文章摘自《Spring Cloud 与 Docker 微服务架构实战(第二版)》"></a>该文章摘自《Spring Cloud 与 Docker 微服务架构实战(第二版)》</h5><h2 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>七、微服务容错处理之Hystrix的监控</title>
      <link href="/2019/01/23/qi-wei-fu-wu-rong-cuo-chu-li-zhi-hystrix-de-jian-kong/"/>
      <url>/2019/01/23/qi-wei-fu-wu-rong-cuo-chu-li-zhi-hystrix-de-jian-kong/</url>
      
        <content type="html"><![CDATA[<h4 id="Hystrix的监控"><a href="#Hystrix的监控" class="headerlink" title="Hystrix的监控"></a><code>Hystrix</code>的监控</h4><ol><li><p>为客户端添加<code>spring-boot-starter-actuator</code>依赖；</p></li><li><p>访问<code>http://127.0.0.1:8010/hystrix.stream</code>，就会不断刷新如下监控数据:</p></li></ol><pre class=" language-json"><code class="language-json">ping<span class="token operator">:</span> data<span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"HystrixCommand"</span><span class="token punctuation">,</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"findById"</span><span class="token punctuation">,</span><span class="token property">"group"</span><span class="token operator">:</span><span class="token string">"MovieRibbonController"</span><span class="token punctuation">,</span><span class="token property">"currentTime"</span><span class="token operator">:</span><span class="token number">1550646505861</span><span class="token punctuation">,</span><span class="token property">"isCircuitBreakerOpen"</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token property">"errorPercentage"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"errorCount"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"requestCount"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"rollingCountBadRequests"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"rollingCountCollapsedRequests"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"rollingCountEmit"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"rollingCountExceptionsThrown"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"rollingCountFailure"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"rollingCountFallbackEmit"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"rollingCountFallbackFailure"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"rollingCountFallbackMissing"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"rollingCountFallbackRejection"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"rollingCountFallbackSuccess"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"rollingCountResponsesFromCache"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"rollingCountSemaphoreRejected"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"rollingCountShortCircuited"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"rollingCountSuccess"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"rollingCountThreadPoolRejected"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"rollingCountTimeout"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"currentConcurrentExecutionCount"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"rollingMaxConcurrentExecutionCount"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"latencyExecute_mean"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"latencyExecute"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"0"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"25"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"50"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"75"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"90"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"95"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"99"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"99.5"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"100"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"latencyTotal_mean"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"latencyTotal"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"0"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"25"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"50"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"75"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"90"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"95"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"99"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"99.5"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"100"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"propertyValue_circuitBreakerRequestVolumeThreshold"</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token property">"propertyValue_circuitBreakerSleepWindowInMilliseconds"</span><span class="token operator">:</span><span class="token number">5000</span><span class="token punctuation">,</span><span class="token property">"propertyValue_circuitBreakerErrorThresholdPercentage"</span><span class="token operator">:</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token property">"propertyValue_circuitBreakerForceOpen"</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token property">"propertyValue_circuitBreakerForceClosed"</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token property">"propertyValue_circuitBreakerEnabled"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token property">"propertyValue_executionIsolationStrategy"</span><span class="token operator">:</span><span class="token string">"THREAD"</span><span class="token punctuation">,</span><span class="token property">"propertyValue_executionIsolationThreadTimeoutInMilliseconds"</span><span class="token operator">:</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token property">"propertyValue_executionTimeoutInMilliseconds"</span><span class="token operator">:</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token property">"propertyValue_executionIsolationThreadInterruptOnTimeout"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token property">"propertyValue_executionIsolationThreadPoolKeyOverride"</span><span class="token operator">:</span><span class="token null">null</span><span class="token punctuation">,</span><span class="token property">"propertyValue_executionIsolationSemaphoreMaxConcurrentRequests"</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token property">"propertyValue_fallbackIsolationSemaphoreMaxConcurrentRequests"</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token property">"propertyValue_metricsRollingStatisticalWindowInMilliseconds"</span><span class="token operator">:</span><span class="token number">10000</span><span class="token punctuation">,</span><span class="token property">"propertyValue_requestCacheEnabled"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token property">"propertyValue_requestLogEnabled"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token property">"reportingHosts"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">"threadPool"</span><span class="token operator">:</span><span class="token string">"MovieRibbonController"</span><span class="token punctuation">}</span>data<span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"HystrixThreadPool"</span><span class="token punctuation">,</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"MovieRibbonController"</span><span class="token punctuation">,</span><span class="token property">"currentTime"</span><span class="token operator">:</span><span class="token number">1550646505861</span><span class="token punctuation">,</span><span class="token property">"currentActiveCount"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"currentCompletedTaskCount"</span><span class="token operator">:</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token property">"currentCorePoolSize"</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token property">"currentLargestPoolSize"</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token property">"currentMaximumPoolSize"</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token property">"currentPoolSize"</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token property">"currentQueueSize"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"currentTaskCount"</span><span class="token operator">:</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token property">"rollingCountThreadsExecuted"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"rollingMaxActiveThreads"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"rollingCountCommandRejections"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token property">"propertyValue_queueSizeRejectionThreshold"</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token property">"propertyValue_metricsRollingStatisticalWindowInMilliseconds"</span><span class="token operator">:</span><span class="token number">10000</span><span class="token punctuation">,</span><span class="token property">"reportingHosts"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span></code></pre><h4 id="使用Hystrix-Dashboard可视化监控数据"><a href="#使用Hystrix-Dashboard可视化监控数据" class="headerlink" title="使用Hystrix Dashboard可视化监控数据"></a>使用<code>Hystrix Dashboard</code>可视化监控数据</h4><ol><li>启动客户端，配置文件如下:</li></ol><pre class=" language-yml"><code class="language-yml">eureka:  client:    serviceUrl:      defaultZone: http://localhost:8761/eureka/server:  port: 8010spring:  application:    name: microservice-consumer-movie1  profiles: movie1</code></pre><ol><li>新建服务消费者，在<code>pom</code>文件中添加依赖:</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-hystrix-dashboard<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li>配置文件:</li></ol><pre class=" language-yml"><code class="language-yml">server:  port: 8030</code></pre><ol start="3"><li><p>启动类添加<code>@EnableHystrixDashboard</code>注解；</p></li><li><p>启动，访问<code>dashboard</code>服务<code>http://127.0.0.1:8030/hystrix</code>,填入<code>http://127.0.0.1:8010/hystrix.stream</code>,Title 随意填:<br><img src="https://github.com/qliang0816/MarkdownImage/blob/master/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99%E5%A4%84%E7%90%86%E4%B9%8BHystrix/dashboard.jpg?raw=true" alt="image"><br><img src="https://github.com/qliang0816/MarkdownImage/blob/master/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99%E5%A4%84%E7%90%86%E4%B9%8BHystrix/dashboard2.jpg?raw=true" alt="image"></p></li></ol><h4 id="使用Turbine聚合监控数据"><a href="#使用Turbine聚合监控数据" class="headerlink" title="使用Turbine聚合监控数据"></a>使用<code>Turbine</code>聚合监控数据</h4><h5 id="Turbine简介"><a href="#Turbine简介" class="headerlink" title="Turbine简介"></a><code>Turbine</code>简介</h5><p><code>Trubine</code>是一个聚合<code>Hystrix</code>监控数据的工具，它可以将所有相关<code>/hystrix.stream</code>端点的数据聚合到一个组合<code>/turbine.stream</code>中，从而让集群的监控更加方便。<br><img src="https://github.com/qliang0816/MarkdownImage/blob/master/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99%E5%A4%84%E7%90%86%E4%B9%8BHystrix/turbine%E6%9E%B6%E6%9E%84%E5%9B%BE.png?raw=true" alt="turbine架构图"></p><h5 id="使用Turbine监控多个微服务"><a href="#使用Turbine监控多个微服务" class="headerlink" title="使用Turbine监控多个微服务"></a>使用<code>Turbine</code>监控多个微服务</h5><ol><li>启动两个客户端；</li></ol><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99%E5%A4%84%E7%90%86%E4%B9%8BHystrix/eureka.jpg?raw=true" alt="eureka"></p><ol start="2"><li>新建<code>Turbine</code>客户端，在<code>pom</code>文件中添加依赖:</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-hystrix-turbine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li>配置文件:</li></ol><pre class=" language-yml"><code class="language-yml">spring:  application:    name: microservice-hystrix-turbineserver:  port: 8031eureka:  client:    serviceUrl:      defaultZone: http://localhost:8761/eureka/turbine:  appConfig: microservice-consumer-movie,microservice-consumer-movie1  clusterNameExpression: "'default'"</code></pre><ol start="3"><li><p>启动类添加<code>@EnableTurbine</code>注解；</p></li><li><p>访问<code>dashboard</code>服务<code>http://127.0.0.1:8030/hystrix</code>，输入<code>Turbine</code>聚合<code>http://127.0.0.1:8031/turbine.stream</code>:<br><img src="https://github.com/qliang0816/MarkdownImage/blob/master/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99%E5%A4%84%E7%90%86%E4%B9%8BHystrix/turbine.jpg?raw=true" alt="turbine"></p></li></ol><hr><h5 id="该文章摘自《Spring-Cloud-与-Docker-微服务架构实战-第二版-》"><a href="#该文章摘自《Spring-Cloud-与-Docker-微服务架构实战-第二版-》" class="headerlink" title="该文章摘自《Spring Cloud 与 Docker 微服务架构实战(第二版)》"></a>该文章摘自《Spring Cloud 与 Docker 微服务架构实战(第二版)》</h5><h2 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五、微服务容错处理之Hystrix线程隔离策略与传播上下文</title>
      <link href="/2019/01/23/wu-wei-fu-wu-rong-cuo-chu-li-zhi-hystrix-xian-cheng-ge-chi-ce-lue-yu-chuan-bo-shang-xia-wen/"/>
      <url>/2019/01/23/wu-wei-fu-wu-rong-cuo-chu-li-zhi-hystrix-xian-cheng-ge-chi-ce-lue-yu-chuan-bo-shang-xia-wen/</url>
      
        <content type="html"><![CDATA[<h5 id="Hystrix的隔离策略有两种："><a href="#Hystrix的隔离策略有两种：" class="headerlink" title="Hystrix的隔离策略有两种："></a><code>Hystrix</code>的隔离策略有两种：</h5><ul><li>线程隔离</li><li>信号量隔离</li></ul><p><code>THREAD</code>(线程隔离)：使用该方式，<code>HystrixCommand</code>将会在单独的线程上执行，并发请求受线程池中线程数量的限制。<code>Hystrix</code>中默认并且推荐使用线程隔离。</p><p><code>SEMAPHORE</code>(信号量隔离)：使用该方式，<code>HystrixCommand</code>将会在调用线程上执行，开销相对较小，并发请求受信号量的个数的限制。</p><p>一般来说，只有当调用负载非常高时（例如每个实例每秒调用数百次）才需要使用信号量隔离，因为这种场景下使用<code>THREAD</code>开销会比较高。信号量隔离一般仅适用于非网络调用的隔离。</p><p>如果想传播线程本地上下文到<code>@HystrixCommand</code>，默认声明不会工作，因为它会在线程池中执行命令（在超时的情况下）。可以使用一些配置，让<code>Hystrix</code>使用相同的线程，或者直接在注解中让<code>Hystrix</code>使用不同的隔离策略。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"stubMyService"</span><span class="token punctuation">,</span>    commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"execution.isolation.strategy"</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">"SEMAPHORE"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><ul><li><code>Hystrix</code>的隔离策略有<code>THREAD</code>和<code>SEMAPHONE</code>两种，默认是<code>THREAD</code>。</li><li>正常情况下，保持默认即可。</li><li>如果发生找不到上下文的运行时异常，可考虑将隔离策略设置为<code>SEMAPHONE</code>。</li></ul><hr><h5 id="该文章摘自《Spring-Cloud-与-Docker-微服务架构实战-第二版-》"><a href="#该文章摘自《Spring-Cloud-与-Docker-微服务架构实战-第二版-》" class="headerlink" title="该文章摘自《Spring Cloud 与 Docker 微服务架构实战(第二版)》"></a>该文章摘自《Spring Cloud 与 Docker 微服务架构实战(第二版)》</h5><h2 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>六、微服务容错处理之Feign使用Hystrix</title>
      <link href="/2019/01/23/liu-wei-fu-wu-rong-cuo-chu-li-zhi-feign-shi-yong-hystrix/"/>
      <url>/2019/01/23/liu-wei-fu-wu-rong-cuo-chu-li-zhi-feign-shi-yong-hystrix/</url>
      
        <content type="html"><![CDATA[<p><code>Spring Cloud</code>默认已经为<code>Feign</code>整合了<code>Hystrix</code>，要想打开<code>Hystrix</code>支持。</p><h4 id="Feign使用Hystrix"><a href="#Feign使用Hystrix" class="headerlink" title="Feign使用Hystrix"></a><code>Feign</code>使用<code>Hystrix</code></h4><ol><li>配置文件添加:</li></ol><pre class=" language-yml"><code class="language-yml">feign:  hystrix:    enabled: true</code></pre><ol start="2"><li>编写<code>Feign</code>接口:</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"microservice-provider-user"</span><span class="token punctuation">,</span> fallback <span class="token operator">=</span> FeignClientFallback<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserFeignClient</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">findById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Component</span><span class="token keyword">class</span> <span class="token class-name">FeignClientFallback</span> <span class="token keyword">implements</span> <span class="token class-name">UserFeignClient</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> User <span class="token function">findById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token operator">-</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"默认用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>启动服务，当停止服务消费者，就会进入回退方法。</li></ol><p><strong>执行回退逻辑并不代表断路器已经打开。请求失败、超时、被拒绝以及断路器打开时都会执行回退逻辑。</strong></p><h4 id="为Feign禁用Hystrix"><a href="#为Feign禁用Hystrix" class="headerlink" title="为Feign禁用Hystrix"></a>为<code>Feign</code>禁用<code>Hystrix</code></h4><ul><li>为指定<code>Feign</code>客户端禁用<code>Hystrix</code>:</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FooConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"prototype"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Feign<span class="token punctuation">.</span>Builder <span class="token function">feignBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Feign<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>想要禁用 Hystrix 的@FeignClient 引用该配置类即可:</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"user"</span><span class="token punctuation">,</span> configuration <span class="token operator">=</span> FooConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserFeignClient</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span></code></pre><ul><li>全局禁用<code>Hystrix</code></li></ul><pre class=" language-yml"><code class="language-yml">feign:  hystrix:    enabled: false</code></pre><hr><h5 id="该文章摘自《Spring-Cloud-与-Docker-微服务架构实战-第二版-》"><a href="#该文章摘自《Spring-Cloud-与-Docker-微服务架构实战-第二版-》" class="headerlink" title="该文章摘自《Spring Cloud 与 Docker 微服务架构实战(第二版)》"></a>该文章摘自《Spring Cloud 与 Docker 微服务架构实战(第二版)》</h5><h2 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四、微服务容错处理之Hystrix</title>
      <link href="/2019/01/23/si-wei-fu-wu-rong-cuo-chu-li-zhi-hystrix/"/>
      <url>/2019/01/23/si-wei-fu-wu-rong-cuo-chu-li-zhi-hystrix/</url>
      
        <content type="html"><![CDATA[<h4 id="实现容错的手段"><a href="#实现容错的手段" class="headerlink" title="实现容错的手段"></a>实现容错的手段</h4><h5 id="雪崩效应"><a href="#雪崩效应" class="headerlink" title="雪崩效应"></a>雪崩效应</h5><p>我们常把”基础服务故障”导致”级联故障”的现象称为雪崩效应。雪崩效应描述的是提供者不可用导致消费者不可用，并将不可用逐渐放大的过程。</p><p>如图所示，A 作为服务提供者(基础服务)，B 为 A 的服务消费者，C 和 D 是 B 的服务消费者。当 A 不可用引起 B 的不可用，并将不可用像滚雪球一样放大到 C 和 D 时，雪崩效应就形成了。</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99%E5%A4%84%E7%90%86%E4%B9%8BHystrix/%E9%9B%AA%E5%B4%A9%E6%95%88%E5%BA%94.png?raw=true" alt="雪崩效应"></p><h5 id="断路器模式"><a href="#断路器模式" class="headerlink" title="断路器模式"></a>断路器模式</h5><p>如图:</p><ul><li>正常情况下，断路器关闭，可正常请求依赖的服务。</li><li>当一段时间内，请求失败率达到一定阈值(默认 5s 内 20 次失败)，断路器就会打开。此时，不会再去请求依赖的服务。</li><li>断路器打开一段时间后，会自动进入”半开”状态。此时，断路器可允许一个请求访问依赖的服务。如果该请求能够调用成功，则关闭断路器，否则继续保持打开状态。</li></ul><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99%E5%A4%84%E7%90%86%E4%B9%8BHystrix/%E6%96%AD%E8%B7%AF%E5%99%A8%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2%E9%80%BB%E8%BE%91.png?raw=true" alt="断路器"></p><hr><h4 id="Hystrix简介"><a href="#Hystrix简介" class="headerlink" title="Hystrix简介"></a><code>Hystrix</code>简介</h4><p><code>Hystrix</code>是<code>Netflix</code>开源的一个延迟和容错库，用于隔离访问远程系统、服务或第三方库，防止级联失败，从而提高系统的可用性与容错性。</p><p><code>Hystrix</code>主要通过以下几点实现延迟和容错：</p><ul><li>包裹请求：使用<code>HystrixCommand</code>(或<code>HystrixObservableCommand</code>)包裹对依赖的调用逻辑，每个命令在独立线程中执行。这使用到了设计模式中的”命令模式”。</li><li>跳闸机制：当某服务的错误率超过一定阈值时，Hystrix 可以自动或者手动跳闸，停止请求该服务一段时间。</li><li>资源隔离：<code>Hystrix</code>为每个依赖都维护了一个小型的线程池(或者信号量)。如果该线程池已满，发往该依赖的请求就被立即拒绝，而不是排队等候，从而加速失败判定。</li><li>监控：<code>Hystrix</code>可以近乎实时地监控运行指标和配置的变化，例如成功、失败、超时、以及被拒绝的请求等。</li><li>回退机制：当请求失败、超时、被拒绝，或当断路器打开时，执行回退逻辑。回退逻辑可由开发人员自行提供，例如返回一个缺省值。</li><li>自我修复：断路器打开一段时间后，会自动进入”半开”状态。断路器打开、关闭、半开的逻辑转换。</li></ul><h4 id="通用方式整合Hystrix"><a href="#通用方式整合Hystrix" class="headerlink" title="通用方式整合Hystrix"></a>通用方式整合<code>Hystrix</code></h4><ol><li>创建服务消费者，在<code>pom</code>文件中添加依赖:</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li><p>创建启动类,添加<code>@EnableHystrix</code>或者<code>@EnableCircuitBreaker</code>注解；</p></li><li><p>创建 Controller:</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MovieRibbonController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>MovieRibbonController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RestTemplate restTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> LoadBalancerClient loadBalancerClient<span class="token punctuation">;</span>    <span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"findByIdFallback"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">findById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">"http://microservice-provider-user/"</span> <span class="token operator">+</span> id<span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 回退方法</span>    <span class="token comment" spellcheck="true">// 不想获得造成回退的原因，去除Throwable参数即可</span>    <span class="token keyword">public</span> User <span class="token function">findByIdFallback</span><span class="token punctuation">(</span>Long id<span class="token punctuation">,</span> Throwable throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"进入回退方法，异常："</span><span class="token punctuation">,</span> throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token operator">-</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"默认用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="6"><li>启动服务，当停止服务消费者，就会进入回退方法。</li></ol><p><strong>执行回退逻辑并不代表断路器已经打开。请求失败、超时、被拒绝以及断路器打开时都会执行回退逻辑。</strong></p><hr><h5 id="该文章摘自《Spring-Cloud-与-Docker-微服务架构实战-第二版-》"><a href="#该文章摘自《Spring-Cloud-与-Docker-微服务架构实战-第二版-》" class="headerlink" title="该文章摘自《Spring Cloud 与 Docker 微服务架构实战(第二版)》"></a>该文章摘自《Spring Cloud 与 Docker 微服务架构实战(第二版)》</h5><h2 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三、微服务声明式REST调用之Feign</title>
      <link href="/2019/01/21/san-wei-fu-wu-sheng-ming-shi-rest-diao-yong-zhi-feign/"/>
      <url>/2019/01/21/san-wei-fu-wu-sheng-ming-shi-rest-diao-yong-zhi-feign/</url>
      
        <content type="html"><![CDATA[<h4 id="Feign简介"><a href="#Feign简介" class="headerlink" title="Feign简介"></a><code>Feign</code>简介</h4><p>在负载均衡篇的示例中使用<code>RestTemplate</code>实现<code>REST API</code>调用:</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user/{id}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> User <span class="token function">findById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">"http://microservice-provider-user/"</span> <span class="token operator">+</span> id<span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果要请求更多参数的 URL:</p><p><code>http://localhost:8010/search?name=张三&amp;username=account1&amp;age=20.....</code></p><p>如果使用拼接字符串的方式构建 URL:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> User<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">findById</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String username<span class="token punctuation">,</span> Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> paramMap <span class="token operator">=</span> Maps<span class="token punctuation">.</span><span class="token function">newHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    paramMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    paramMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>    paramMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">"http://microservice-provider-user/search?name={name}&amp;username={username}&amp;age={age}"</span><span class="token punctuation">,</span> User<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> paramMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这样的代码将变得难以维护。</p><ul><li><code>Feign</code>是<code>Netflix</code>开发的声明式、模板化的 HTTP 客户端，<code>Feign</code>可以帮助我们更快捷、优雅地调用 HTTP API。</li><li>在<code>Spring Cloud</code>中，使用<code>Feign</code>非常简单——创建一个接口，并在接口上添加一些注解，代码就完成了。<code>Feign</code>支持多种注解，例如<code>Feign</code>自带的注解或者 JAX-RS 注解等。</li><li><code>Spring Cloud</code>对<code>Feign</code>进行了增强，使<code>Feign</code>支持了<code>Spring MVC</code>注解，并整合了<code>Ribbon</code>和<code>Eureka</code>，从而让<code>Feign</code>的使用更加方便。</li></ul><h4 id="为服务消费者整合Feign"><a href="#为服务消费者整合Feign" class="headerlink" title="为服务消费者整合Feign"></a>为服务消费者整合<code>Feign</code></h4><ol><li><p>启动一个<code>Eureka</code>注册中心，启动两个<code>Eureka</code>服务提供者<a href="https://bestqliang.com/2019/01/15/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0%E4%B9%8BEureka/" target="_blank" rel="noopener">(传送门)</a>;</p></li><li><p>创建服务消费者，在<code>pom</code>文件中添加依赖:</p></li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-feign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ol start="3"><li>创建启动类:</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableFeignClients</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerMovieApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ConsumerMovieApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="5"><li>创建<code>Feign</code>接口，添加<code>@FeignClient</code>注解:</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"microservice-provider-user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserFeignClient</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">findById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>@FeignClient</code>注解用于创建<code>Ribbon</code>负载均衡器。<code>Ribbon</code>会把<code>microservice-provider-user</code>解析成<code>Eureka Server</code>中注册表中分服务。</p><ol start="5"><li>创建 Controller:</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MovieController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserFeignClient userFeignClient<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">findById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userFeignClient<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="6"><li>启动服务即可。</li></ol><hr><h5 id="该文章摘自《Spring-Cloud-与-Docker-微服务架构实战-第二版-》"><a href="#该文章摘自《Spring-Cloud-与-Docker-微服务架构实战-第二版-》" class="headerlink" title="该文章摘自《Spring Cloud 与 Docker 微服务架构实战(第二版)》"></a>该文章摘自《Spring Cloud 与 Docker 微服务架构实战(第二版)》</h5><h2 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二、微服务客户端负载均衡之Ribbon</title>
      <link href="/2019/01/17/er-wei-fu-wu-ke-hu-duan-fu-zai-jun-heng-zhi-ribbon/"/>
      <url>/2019/01/17/er-wei-fu-wu-ke-hu-duan-fu-zai-jun-heng-zhi-ribbon/</url>
      
        <content type="html"><![CDATA[<h4 id="Ribbon简介"><a href="#Ribbon简介" class="headerlink" title="Ribbon简介"></a><code>Ribbon</code>简介</h4><ul><li><code>Ribbon</code>是<code>Netflix</code>发布的负载均衡器，它有助于控制 HTTP 和 TCP 的客户端的行为。为<code>Ribbon</code>配置服务提供者地址后，<code>Ribbon</code>就可基于某种负载均衡算法，自动地帮助服务消费者去请求。<code>Ribbon</code>默认为我们提供了很多负载均衡算法，例如轮询、随机等。当然，我们也可为 Ribbon 实现自定义的负载均衡算法。</li></ul><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E4%B9%8BRibbon/%E6%9E%B6%E6%9E%84%E5%9B%BE.png?raw=true" alt="架构图"></p><hr><h4 id="为服务消费者整合Ribbon"><a href="#为服务消费者整合Ribbon" class="headerlink" title="为服务消费者整合Ribbon"></a>为服务消费者整合<code>Ribbon</code></h4><ol><li><p>启动一个<code>Eureka</code>注册中心，启动两个<code>Eureka</code>服务提供者<a href="https://bestqliang.com/2019/01/15/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0%E4%B9%8BEureka/" target="_blank" rel="noopener">(参考传送门)</a>;</p></li><li><p>创建服务消费者，在<code>pom</code>文件中添加依赖:</p></li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ol start="3"><li>创建启动类:</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 添加注解，使其具备负载均衡能力</span><span class="token annotation punctuation">@LoadBalanced</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> RestTemplate <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ConsumerMovieRibbonApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="4"><li>创建 Controller:</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MovieRibbonController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>MovieRibbonController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RestTemplate restTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> LoadBalancerClient loadBalancerClient<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">findById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">"http://microservice-provider-user/"</span> <span class="token operator">+</span> id<span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/log-user-instance"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logUserInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ServiceInstance serviceInstance <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>loadBalancerClient<span class="token punctuation">.</span><span class="token function">choose</span><span class="token punctuation">(</span><span class="token string">"microservice-provider-user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 打印当前节点</span>        MovieRibbonController<span class="token punctuation">.</span>LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>                <span class="token string">"{}:{}:{}"</span><span class="token punctuation">,</span>                serviceInstance<span class="token punctuation">.</span><span class="token function">getServiceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                serviceInstance<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                serviceInstance<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="5"><li>多次访问<code>http://127.0.0.1:8010/log-user-instance</code>，返回结果:</li></ol><pre class=" language-java"><code class="language-java">INFO <span class="token number">11146</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>nio<span class="token operator">-</span><span class="token number">8010</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>itmuch<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>MovieRibbonController  <span class="token operator">:</span> microservice<span class="token operator">-</span>provider<span class="token operator">-</span>user<span class="token operator">:</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">200.104</span><span class="token operator">:</span><span class="token number">9000</span>INFO <span class="token number">11146</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>nio<span class="token operator">-</span><span class="token number">8010</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>itmuch<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>MovieRibbonController  <span class="token operator">:</span> microservice<span class="token operator">-</span>provider<span class="token operator">-</span>user<span class="token operator">:</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">200.104</span><span class="token operator">:</span><span class="token number">9001</span>INFO <span class="token number">11146</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>nio<span class="token operator">-</span><span class="token number">8010</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>itmuch<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>MovieRibbonController  <span class="token operator">:</span> microservice<span class="token operator">-</span>provider<span class="token operator">-</span>user<span class="token operator">:</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">200.104</span><span class="token operator">:</span><span class="token number">9000</span>INFO <span class="token number">11146</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>nio<span class="token operator">-</span><span class="token number">8010</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>itmuch<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>MovieRibbonController  <span class="token operator">:</span> microservice<span class="token operator">-</span>provider<span class="token operator">-</span>user<span class="token operator">:</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">200.104</span><span class="token operator">:</span><span class="token number">9001</span>INFO <span class="token number">11146</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>io<span class="token operator">-</span><span class="token number">8010</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>itmuch<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>MovieRibbonController  <span class="token operator">:</span> microservice<span class="token operator">-</span>provider<span class="token operator">-</span>user<span class="token operator">:</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">200.104</span><span class="token operator">:</span><span class="token number">9000</span>INFO <span class="token number">11146</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>nio<span class="token operator">-</span><span class="token number">8010</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>itmuch<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>MovieRibbonController  <span class="token operator">:</span> microservice<span class="token operator">-</span>provider<span class="token operator">-</span>user<span class="token operator">:</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">200.104</span><span class="token operator">:</span><span class="token number">9001</span>INFO <span class="token number">11146</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>nio<span class="token operator">-</span><span class="token number">8010</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>itmuch<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>MovieRibbonController  <span class="token operator">:</span> microservice<span class="token operator">-</span>provider<span class="token operator">-</span>user<span class="token operator">:</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">200.104</span><span class="token operator">:</span><span class="token number">9000</span>INFO <span class="token number">11146</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>nio<span class="token operator">-</span><span class="token number">8010</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>itmuch<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>MovieRibbonController  <span class="token operator">:</span> microservice<span class="token operator">-</span>provider<span class="token operator">-</span>user<span class="token operator">:</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">200.104</span><span class="token operator">:</span><span class="token number">9001</span>INFO <span class="token number">11146</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>nio<span class="token operator">-</span><span class="token number">8010</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>itmuch<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>MovieRibbonController  <span class="token operator">:</span> microservice<span class="token operator">-</span>provider<span class="token operator">-</span>user<span class="token operator">:</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">200.104</span><span class="token operator">:</span><span class="token number">9000</span></code></pre><ul><li>可以看到，请求会均匀分布到两个微服务节点上。</li><li>不能将<code>restTemplate.getForObject(...)</code>与<code>loadBalancerClient.choose(...)</code>写在一个方法中，两者会有冲突——<code>restTemplate</code>实际上是一个<code>Ribbon</code>客户端，本身包含<code>choose</code>的行为。</li></ul><hr><h4 id="Ribbon自定义配置"><a href="#Ribbon自定义配置" class="headerlink" title="Ribbon自定义配置"></a><code>Ribbon</code>自定义配置</h4><h5 id="指定名称配置"><a href="#指定名称配置" class="headerlink" title="指定名称配置"></a>指定名称配置</h5><ol><li>创建<code>Ribbon</code>配置类:</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RibbonConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> IRule <span class="token function">ribbonRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 负载均衡改为随机</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RandomRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>创建空类:</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@RibbonClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"microservice-provider-user"</span><span class="token punctuation">,</span>configuration <span class="token operator">=</span> RibbonConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestConfiguration</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>多次访问<code>http://127.0.0.1:8010/log-user-instance</code>，返回结果:</li></ol><pre class=" language-java"><code class="language-java">INFO <span class="token number">11193</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>nio<span class="token operator">-</span><span class="token number">8010</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>itmuch<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>MovieRibbonController  <span class="token operator">:</span> microservice<span class="token operator">-</span>provider<span class="token operator">-</span>user<span class="token operator">:</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">200.104</span><span class="token operator">:</span><span class="token number">9000</span>INFO <span class="token number">11193</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>nio<span class="token operator">-</span><span class="token number">8010</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>itmuch<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>MovieRibbonController  <span class="token operator">:</span> microservice<span class="token operator">-</span>provider<span class="token operator">-</span>user<span class="token operator">:</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">200.104</span><span class="token operator">:</span><span class="token number">9000</span>INFO <span class="token number">11193</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>nio<span class="token operator">-</span><span class="token number">8010</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>itmuch<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>MovieRibbonController  <span class="token operator">:</span> microservice<span class="token operator">-</span>provider<span class="token operator">-</span>user<span class="token operator">:</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">200.104</span><span class="token operator">:</span><span class="token number">9001</span>INFO <span class="token number">11193</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>nio<span class="token operator">-</span><span class="token number">8010</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>itmuch<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>MovieRibbonController  <span class="token operator">:</span> microservice<span class="token operator">-</span>provider<span class="token operator">-</span>user<span class="token operator">:</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">200.104</span><span class="token operator">:</span><span class="token number">9000</span>INFO <span class="token number">11193</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>nio<span class="token operator">-</span><span class="token number">8010</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>itmuch<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>MovieRibbonController  <span class="token operator">:</span> microservice<span class="token operator">-</span>provider<span class="token operator">-</span>user<span class="token operator">:</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">200.104</span><span class="token operator">:</span><span class="token number">9001</span>INFO <span class="token number">11193</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>nio<span class="token operator">-</span><span class="token number">8010</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>itmuch<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>MovieRibbonController  <span class="token operator">:</span> microservice<span class="token operator">-</span>provider<span class="token operator">-</span>user<span class="token operator">:</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">200.104</span><span class="token operator">:</span><span class="token number">9000</span>INFO <span class="token number">11193</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>nio<span class="token operator">-</span><span class="token number">8010</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>itmuch<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>MovieRibbonController  <span class="token operator">:</span> microservice<span class="token operator">-</span>provider<span class="token operator">-</span>user<span class="token operator">:</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">200.104</span><span class="token operator">:</span><span class="token number">9001</span></code></pre><h5 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h5><ul><li>可使用<code>@RibbonClients</code>注解提供默认配置:</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RibbonClients</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RibbonClientDefaultConfigurationTestsConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">BazServiceList</span> <span class="token keyword">extends</span> <span class="token class-name">ConfigurationBasedServerList</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">BazServiceList</span><span class="token punctuation">(</span>IClientConfig config<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initWithNiwsConfig</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">DefaultRibbonConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> IRule <span class="token function">ribbonRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BestAvailableRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> IPing <span class="token function">ribbonPing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PingUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ServerList<span class="token operator">&lt;</span>Server<span class="token operator">></span> <span class="token function">ribbonServerList</span><span class="token punctuation">(</span>IClientConfig config<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RibbonClientDefaultConfigurationTestsConfig<span class="token punctuation">.</span>BazServiceList</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ServerListSubsetFilter <span class="token function">serverListFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServerListSubsetFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="使用属性自定义Ribbon配置"><a href="#使用属性自定义Ribbon配置" class="headerlink" title="使用属性自定义Ribbon配置"></a>使用属性自定义<code>Ribbon</code>配置</h5><ul><li><code>NFLoadBalancerClassName</code>: 配置<code>ILoadBalancer</code>的实现类。</li><li><code>NFLoadBalancerRuleClassName</code>: 配置<code>IRule</code>的实现类。</li><li><code>NFLoadBalancerPingClassName</code>: 配置<code>IPing</code>的实现类。</li><li><code>NIWSServerListClassName</code>: 配置<code>ServerList</code>的实现类。</li><li><code>NIWSServerListFilterClassName</code>: 配置<code>ServerListFilter</code>的实现类。</li></ul><p>指定名称配置</p><pre class=" language-yml"><code class="language-yml">microservice-provider-user:  ribbon:    NFLoadBalancerClassName: com.netflix.loadbalancer.RandomRule</code></pre><p>全局配置</p><pre class=" language-yml"><code class="language-yml">ribbon:  NFLoadBalancerClassName: com.netflix.loadbalancer.RandomRule</code></pre><hr><h5 id="该文章摘自《Spring-Cloud-与-Docker-微服务架构实战-第二版-》"><a href="#该文章摘自《Spring-Cloud-与-Docker-微服务架构实战-第二版-》" class="headerlink" title="该文章摘自《Spring Cloud 与 Docker 微服务架构实战(第二版)》"></a>该文章摘自《Spring Cloud 与 Docker 微服务架构实战(第二版)》</h5><h2 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一、微服务注册与发现之Eureka</title>
      <link href="/2019/01/15/yi-wei-fu-wu-zhu-ce-yu-fa-xian-zhi-eureka/"/>
      <url>/2019/01/15/yi-wei-fu-wu-zhu-ce-yu-fa-xian-zhi-eureka/</url>
      
        <content type="html"><![CDATA[<h4 id="Eureka简介"><a href="#Eureka简介" class="headerlink" title="Eureka简介"></a><code>Eureka</code>简介</h4><ul><li><code>Eureka</code>是<code>Netflix</code>开源的服务发现组件，本身是一个基于 REST 的服务。包含<code>Server</code>和<code>Client</code>两部分。<code>Spring Cloud</code>将它集成在子项目<code>Spring Cloud Netflix</code>中，从而实现微服务的注册与发现。</li></ul><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0%E4%B9%8BEureka/eureka%E6%9E%B6%E6%9E%84%E5%9B%BE.png?raw=true" alt="Eureka架构图"></p><ul><li><code>Application Service</code>相当于服务提供者。</li><li><code>Application Client</code>相当于服务消费者。</li><li><code>Make Remote Call</code>可以理解成调用<code>RESTful API</code>的行为。</li><li><code>us-east-1c</code>,<code>us-east-1d</code>等都是 zone,它们都是属于<code>us-east-1</code>这个 Region(<code>Spring Cloud</code>默认的 Region 是<code>us-east-1</code>)</li></ul><h5 id="Eureka包含两个组件Eureka-Server和Eureka-Client"><a href="#Eureka包含两个组件Eureka-Server和Eureka-Client" class="headerlink" title="Eureka包含两个组件Eureka Server和Eureka Client:"></a><code>Eureka</code>包含两个组件<code>Eureka Server</code>和<code>Eureka Client</code>:</h5><ul><li><code>Eureka Server</code>提供服务发现能力，各个微服务启动时，会向<code>Eureka Server</code>注册自己的信息，<code>Eureka Server</code>存储这些信息。</li><li><code>Eureka Client</code>是一个 Java 客户端，用于简化和<code>Eureka Server</code>的交互。</li><li>微服务启动后，会周期性(默认 30s)地向<code>Eureka Server</code>发送心跳以续约自己的租期。</li><li>如果<code>Eureka Server</code>在一定时间内没有接收到某个微服务实例的心跳，<code>Eureka Server</code>将注销该实例(默认 90s)。</li><li>默认情况下，<code>Eureka Server</code>同时也是<code>Eureka Client</code>。多个<code>Eureka Server</code>实例相互之间通过复制的方式来实现微服务注册表中数据的同步。</li><li><code>Eureka Client</code>会缓存服务注册表中的信息，这种方式有一定的优势——首先，微服务无需每次请求都查询<code>Eureka Server</code>，从而降低<code>Eureka Server</code>的压力；其次，即使<code>Eureka Server</code>所有节点宕机，服务消费者依然可以使用缓存中的信息找到服务提供者并完成调用。</li></ul><h4 id="创建单机Eureka-Server"><a href="#创建单机Eureka-Server" class="headerlink" title="创建单机Eureka Server"></a>创建单机<code>Eureka Server</code></h4><ol><li>创建 Maven 工程，<code>pom</code>文件添加已下依赖:</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li>在配置文件<code>application.yml</code>中添加:</li></ol><pre class=" language-yml"><code class="language-yml">server:  port: 8761eureka:  client:    # 表明是否将自己注册到Eureka Server中，默认为true。由于当前应用为Eureka Server，设为false。    registerWithEureka: false    # 表示是否从Eureka Server获取注册信息，默认为true，由于这是一个单点的Eureka Server，不需要同步其他的Eureka Server节点数据，设为false。    fetchRegistry: false    # 设置与Eureka Server交互的地址，查询服务个注册服务都需要依赖这个地址。多个地址间可使用,分隔。    serviceUrl:      defaultZone: http://localhost:8761/eureka/</code></pre><ol start="3"><li>创建启动类，添加<code>@EnableEurekaServer</code>注解声明是一个<code>Eureka Server</code>。</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaServer</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DiscoveryEurekaApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>DiscoveryEurekaApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0%E4%B9%8BEureka/EurekaServer.jpg?raw=true" alt="Eureka Server"></p><h4 id="将微服务注册到Eureka-Server上"><a href="#将微服务注册到Eureka-Server上" class="headerlink" title="将微服务注册到Eureka Server上"></a>将微服务注册到<code>Eureka Server</code>上</h4><ol><li>在<code>pom</code>文件中添加依赖:</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li>在配置文件<code>application.yml</code>中添加:</li></ol><pre class=" language-yml"><code class="language-yml">spring:  application:    # 指定注册到Eureka Server上的应用名称    name: microeservice-provider-usereureka:  client:    serviceUrl:      defaultZone: http://localhost:8761/eureka/    instance:      # 表示将自己的IP注册到Eureka Server      prefer-ip-address: true</code></pre><ol start="3"><li>创建启动类。</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProviderUserApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ProviderUserApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>在<code>Spring Cloud Edgware</code>之前，要想将微服务注册到<code>Eureka Server</code>,必须在启动类上添加<code>@EnableEurekaClient</code>或<code>@EnableDiscoverClient</code>。在<code>Spring Cloud Edgware</code>以及更高版本，只需添加相关依赖，即可自动注册。</li><li>若不想讲服务注册到<code>Eureka Server</code>，只需设置<code>spring.cloud.service-register.auto-registration.enabled=false</code>，或<code>@EnableDiscoveryClient(autoRegister = false)</code>即可。<br><img src="https://github.com/qliang0816/MarkdownImage/blob/master/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0%E4%B9%8BEureka/EurekaServer2.jpg?raw=true" alt="Eureka Server"></li></ul><h4 id="Eureka-Server的高可用"><a href="#Eureka-Server的高可用" class="headerlink" title="Eureka Server的高可用"></a><code>Eureka Server</code>的高可用</h4><ol><li>修改配置文件<code>application.yml</code>:</li></ol><pre class=" language-yml"><code class="language-yml">spring:  application:    name: microservice-discovery-eureka-haeureka:  client:    service-url:      defaultZone: http://localhost:8761/eureka/,http://localhost:8762/eureka/---spring:  # 指定profile=peer1  profiles: peer1server:  port: 8761---spring:  profiles: peer2server:  port: 8762</code></pre><ol start="2"><li><code>IDEA</code>启动两个 Configurations，<code>Program arguments</code>分别设置<code>--spring.profiles.active=peer1</code>和<code>--spring.profiles.active=peer2</code>。</li></ol><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0%E4%B9%8BEureka/peer1.jpg?raw=true" alt="peer1"><br><img src="https://github.com/qliang0816/MarkdownImage/blob/master/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0%E4%B9%8BEureka/peer2.jpg?raw=true" alt="peer2"></p><hr><h5 id="该文章摘自《Spring-Cloud-与-Docker-微服务架构实战-第二版-》"><a href="#该文章摘自《Spring-Cloud-与-Docker-微服务架构实战-第二版-》" class="headerlink" title="该文章摘自《Spring Cloud 与 Docker 微服务架构实战(第二版)》"></a>该文章摘自《Spring Cloud 与 Docker 微服务架构实战(第二版)》</h5><h2 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闲置服务器挂eBesucher</title>
      <link href="/2018/07/18/xian-zhi-fu-wu-qi-gua-ebesucher/"/>
      <url>/2018/07/18/xian-zhi-fu-wu-qi-gua-ebesucher/</url>
      
        <content type="html"><![CDATA[<h3 id="关于eBesucher"><a href="#关于eBesucher" class="headerlink" title="关于eBesucher"></a>关于<code>eBesucher</code></h3><p>ebesucher 是德国目前最著名的自动冲浪赚钱站，该站最低提现金额<code>PAYPAL</code>2 欧元，此站除了可以通过挂广告网站，还可以通过邮件交换的方式来赚取 BTP。<br>换算方式:10000BTP=2€。</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>去年年底购买的腾讯云的 3 年套餐，现在闲置下来，又不能退货，于是想收回一些成本。</p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/%E9%97%B2%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8C%82eBesucher/4.jpeg?raw=true" align="center" width="200"><hr><h3 id="centos"><a href="#centos" class="headerlink" title="centos"></a>centos</h3><h6 id="安装桌面"><a href="#安装桌面" class="headerlink" title="安装桌面"></a>安装桌面</h6><p>切换到 root 用户</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 安装桌面</span>yum updateyum groupinstall -y <span class="token string">"X Window system"</span>yum groupinstall -y xfcesystemctl isolate graphical.target<span class="token comment" spellcheck="true"># 安装中文</span>yum groupinstall <span class="token string">"Chinese support"</span><span class="token comment" spellcheck="true"># 如果失败运行下面命令</span>yum <span class="token function">groups</span> mark <span class="token function">install</span> <span class="token string">"Chinese support"</span>yum <span class="token function">install</span> -y cjkuni-ukai-fontsyum <span class="token function">install</span> -y fontforge<span class="token comment" spellcheck="true"># 增加字体 (可选)</span>C:\Windows\Fonts <span class="token operator">=</span><span class="token operator">></span> /usr/share/fonts/chinese/<span class="token function">cd</span> /usr/share/fonts/chinese/ <span class="token comment" spellcheck="true"># 切换到新字体目录</span>mkfontscale <span class="token comment" spellcheck="true"># 在当前目录下生成fonts.scale文件</span>mkfontdir   <span class="token comment" spellcheck="true"># 在当前目录下生成fonts.dir文件</span>fc-cache -fv <span class="token comment" spellcheck="true"># 重新建立字体缓存</span><span class="token comment" spellcheck="true"># 输入法平台</span><span class="token comment" spellcheck="true"># fictx，scim，ibus</span></code></pre><h6 id="安装-vnc"><a href="#安装-vnc" class="headerlink" title="安装 vnc"></a>安装 vnc</h6><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> -y tigervnc-server<span class="token keyword">echo</span> <span class="token string">'VNCSERVERS="1:root"'</span> <span class="token operator">></span> /etc/sysconfig/vncservers<span class="token keyword">echo</span> <span class="token string">'VNCSERVERARGS[1]="-geometry 1280x960"'</span> <span class="token operator">>></span> /etc/sysconfig/vncservers<span class="token comment" spellcheck="true"># 初始化vnc</span>vncserver 设置密码vncpasswd 修改密码<span class="token keyword">echo</span> <span class="token string">'#!/bin/sh'</span> <span class="token operator">></span> ~/.vnc/xstartup<span class="token keyword">echo</span> <span class="token string">'/usr/bin/startxfce4'</span> <span class="token operator">>></span> ~/.vnc/xstartup</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 开启vnc</span>vncserver :1<span class="token comment" spellcheck="true"># 删除vnc</span>vncserver -kill :1</code></pre><h6 id="安装-firefox"><a href="#安装-firefox" class="headerlink" title="安装 firefox"></a>安装 firefox</h6><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> firefox</code></pre><h6 id="安装-flash"><a href="#安装-flash" class="headerlink" title="安装 flash"></a>安装 flash</h6><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#1 添加源</span>rpm -Uvh http://linuxdownload.adobe.com/adobe-release/adobe-release-x86_64-1.0-1.noarch.rpm<span class="token comment" spellcheck="true">#2 安装Flash Player插件</span>yum <span class="token function">install</span> flash-plugin</code></pre><hr><h3 id="debian-或者-ubuntu"><a href="#debian-或者-ubuntu" class="headerlink" title="debian 或者 ubuntu"></a>debian 或者 ubuntu</h3><h6 id="安装桌面-1"><a href="#安装桌面-1" class="headerlink" title="安装桌面"></a>安装桌面</h6><blockquote><p>LXDE，全名为 Lightweight X11 Desktop Environment，是一个自由桌面环境，可在 Unix 以及如 Linux、BSD 等 POSIX 相容平台上执行。廉价迷你 Linux 机器 Raspberry Pi 安装的就是这个桌面，LXDE 支持 debian 及 ubuntu 环境。</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token function">apt-get</span> update<span class="token comment" spellcheck="true"># 安装LXDE环境</span><span class="token function">apt-get</span> <span class="token function">install</span> xorg lxde-core tightvncserver<span class="token comment" spellcheck="true"># xorg为x window</span></code></pre><h6 id="创建一个-VNC-通用文件"><a href="#创建一个-VNC-通用文件" class="headerlink" title="创建一个 VNC 通用文件"></a>创建一个 VNC 通用文件</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p ~/.vnc<span class="token function">cat</span> <span class="token operator">></span> ~/.vnc/xstartup <span class="token operator">&lt;&lt;</span> <span class="token string">EOF#!/bin/sh# Uncomment the following two lines for normal desktop:lxterminal &amp; /usr/bin/lxsession -s LXDE &amp;EOF</span><span class="token function">chmod</span> +x xstartup</code></pre><h6 id="初始化-VNC，并设置-VNC-密码"><a href="#初始化-VNC，并设置-VNC-密码" class="headerlink" title="初始化 VNC，并设置 VNC 密码"></a>初始化 VNC，并设置 VNC 密码</h6><pre class=" language-bash"><code class="language-bash">tightvncserver :1<span class="token comment" spellcheck="true">## 停止vnc</span>tightvncserver -kill :1</code></pre><h6 id="安装-firefox-1"><a href="#安装-firefox-1" class="headerlink" title="安装 firefox"></a>安装 firefox</h6><pre class=" language-bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> firefox</code></pre><h6 id="安装-flash-1"><a href="#安装-flash-1" class="headerlink" title="安装 flash"></a>安装 flash</h6><pre class=" language-bash"><code class="language-bash">1.在/etc/apt/sources.list文件中像下面这样添加一行:deb http://ftp.cn.debian.org/debian wheezy main contrib non-free或在/etc/apt/sources.list.d/ 下创建新的source.list2.更新软件列表并安装.<span class="token function">apt-get</span> update<span class="token function">apt-get</span> <span class="token function">install</span> flashplugin-nonfree</code></pre><p>设置重启脚本，将下列代码保存到 /root ，并命名为 ebesucher.sh</p><pre class=" language-bash"><code class="language-bash"><span class="token function">rm</span> -rf ~/.vnc/*.log /tmp/plugtmp* <span class="token operator">></span> /dev/null<span class="token function">killall</span> firefox <span class="token operator">></span> /dev/null 2<span class="token operator">></span><span class="token operator">&amp;</span>1/usr/bin/firefox --display<span class="token operator">=</span>localhost:1.0 -new-tab http://www.ebesucher.com/surfbar/你的用户名 <span class="token operator">></span> /dev/null 2<span class="token operator">></span><span class="token operator">&amp;</span>1 <span class="token operator">&amp;</span></code></pre><p>设置自动重启，因为官网一直在检测是否是机器人，这里我设置每五分钟重启一次</p><pre class=" language-bash"><code class="language-bash"><span class="token function">chmod</span> +x /root/ebesucher.sh<span class="token keyword">echo</span> <span class="token string">"*/5 * * * * root /root/ebesucher.sh"</span> <span class="token operator">>></span> /etc/crontab<span class="token function">service</span> <span class="token function">cron</span> restart重启 VNC 并启动浏览器，运行</code></pre><pre class=" language-bash"><code class="language-bash">/root/ebesucher.sh</code></pre><hr><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ol><li><p>采用<a href="https://www.realvnc.com/en/connect/download/viewer/" target="_blank" rel="noopener">vnc Viewer</a>进行登录，默认是<code>5901</code>端口，连接之后长这样:<br><img src="https://github.com/qliang0816/MarkdownImage/blob/master/%E9%97%B2%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8C%82eBesucher/1.jpg?raw=true" alt="image"></p></li><li><p>打开浏览器，长这样:<br><img src="https://github.com/qliang0816/MarkdownImage/blob/master/%E9%97%B2%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8C%82eBesucher/2.jpg?raw=true" alt="image"></p></li></ol><hr><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><ol><li><p>安装官方 Firefox Add-On<br>使用 VNC 连接到我们的服务器，在浏览器中直接打开<a href="https://www.ebesucher.com/data/firefoxaddon/latest.xpi，" target="_blank" rel="noopener">https://www.ebesucher.com/data/firefoxaddon/latest.xpi，</a> 他就会自动安装下载了，在插件里面设置好我们的用户名，并且将三个选项都选上即可。</p></li><li><p>关闭 Firefox 的浏览记录<br>由于我们在不断的浏览器会产生大量的日志，会占用大量的硬盘空间，因此我们需要关闭浏览记录。</p></li><li><p>关闭 Firefox 安装提示<br>在部分我们的挂的网页中，Firefox 可能会提示风险网站，这样会导致我们的挂机中断，建议关闭这个功能。</p></li></ol><hr><p><strong>迄今为止已经挂了一星期了，国内 ip 效益极差，经常出现这样的问题:</strong></p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/%E9%97%B2%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8C%82eBesucher/3.jpg?raw=true" alt="image"></p><p><strong>这是差不多一星期的收益:</strong></p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/%E9%97%B2%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8C%82eBesucher/5.jpg?raw=true" alt="image"></p><p><strong>其中 100BTP 还是一开始送的，也就是平均下来一天差不多只有 30BTP 不到，查不到一年可以赚取 2 欧，嗯！！！</strong></p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/%E9%97%B2%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8C%82eBesucher/6.jpeg?raw=true" alt="image"></p><p><strong>如果不是欧洲 ip，还是放弃这条门路，赚不到钱还费力。</strong></p><h2 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Vps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vps </tag>
            
            <tag> 服务器 </tag>
            
            <tag> 挣钱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java实现无限极分类</title>
      <link href="/2018/06/29/java-shi-xian-wu-xian-ji-fen-lei/"/>
      <url>/2018/06/29/java-shi-xian-wu-xian-ji-fen-lei/</url>
      
        <content type="html"><![CDATA[<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 递归     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">getTree</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Menus<span class="token operator">></span> list<span class="token punctuation">,</span> String pk<span class="token punctuation">,</span> String pid<span class="token punctuation">,</span> String child<span class="token punctuation">,</span> <span class="token keyword">int</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Object<span class="token operator">></span> tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Menus menus <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> menus_pid <span class="token operator">=</span> menus<span class="token punctuation">.</span><span class="token function">getpId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>menus_pid <span class="token operator">==</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> id <span class="token operator">=</span> menus<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                MenusCustom menusCustom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MenusCustom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                menusCustom<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>menus<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                menusCustom<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>menus<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                menusCustom<span class="token punctuation">.</span><span class="token function">setpId</span><span class="token punctuation">(</span>menus<span class="token punctuation">.</span><span class="token function">getpId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                menusCustom<span class="token punctuation">.</span><span class="token function">setUri</span><span class="token punctuation">(</span>menus<span class="token punctuation">.</span><span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                menusCustom<span class="token punctuation">.</span><span class="token function">setChild</span><span class="token punctuation">(</span>MenusUtil<span class="token punctuation">.</span><span class="token function">getTree</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> pk<span class="token punctuation">,</span> pid<span class="token punctuation">,</span> child<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                tree<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>menusCustom<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> tree<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 利用重载设置默认参数</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">getTree</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Menus<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> MenusUtil<span class="token punctuation">.</span><span class="token function">getTree</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"pid"</span><span class="token punctuation">,</span> <span class="token string">"child"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这是 Menus 类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Menus</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String uri<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer pId<span class="token punctuation">;</span>    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> name<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> uri<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUri</span><span class="token punctuation">(</span>String uri<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>uri <span class="token operator">=</span> uri <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> uri<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getpId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> pId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setpId</span><span class="token punctuation">(</span>Integer pId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pId <span class="token operator">=</span> pId<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这是 MenusCustom 类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MenusCustom</span> <span class="token keyword">extends</span> <span class="token class-name">Menus</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Object <span class="token function">getChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> child<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setChild</span><span class="token punctuation">(</span>Object child<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>child <span class="token operator">=</span> child<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Object child<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vultr能Ping但是SSH无法连接</title>
      <link href="/2018/06/27/vultr-neng-ping-dan-shi-ssh-wu-fa-lian-jie/"/>
      <url>/2018/06/27/vultr-neng-ping-dan-shi-ssh-wu-fa-lian-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><ul><li>最近<code>Vultr</code>的<code>ss</code>翻不出去了，机器可以 Ping 但是无法 ssh 连接，于是检测 IP 是不是被封了。</li></ul><h3 id="最方便的检测方式"><a href="#最方便的检测方式" class="headerlink" title="最方便的检测方式"></a>最方便的检测方式</h3><p><a href="https://ipcheck.need.sh/" target="_blank" rel="noopener">检测链接</a></p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/Vultr%E8%83%BDPing%E4%BD%86%E6%98%AFSSH%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5/6.jpg?raw=true" alt="image"></p><ul><li>ping走的<code>ICMP</code>协议</li><li>ssh走的<code>TCP</code>协议</li></ul><h3 id="其他检测方式"><a href="#其他检测方式" class="headerlink" title="其他检测方式"></a>其他检测方式</h3><h4 id="一、全国-Ping-测试网页-https-www-ipip-net-ping-php"><a href="#一、全国-Ping-测试网页-https-www-ipip-net-ping-php" class="headerlink" title="一、全国 Ping 测试网页(https://www.ipip.net/ping.php)"></a>一、全国 Ping 测试网页(<a href="https://www.ipip.net/ping.php" target="_blank" rel="noopener">https://www.ipip.net/ping.php</a>)</h4><p>如果如下图所示丢包率 100%，那肯定是被 Q 了，这种情况只能删除机器重建了。<br><img src="https://github.com/qliang0816/MarkdownImage/blob/master/Vultr%E8%83%BDPing%E4%BD%86%E6%98%AFSSH%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5/1.jpg?raw=true" alt="image"></p><p>若果出现下图所示，并没有丢包，那也不一定说明没有被 Q，接下来用下面两步继续检测。<br><img src="https://github.com/qliang0816/MarkdownImage/blob/master/Vultr%E8%83%BDPing%E4%BD%86%E6%98%AFSSH%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5/2.jpg?raw=true" alt="image"></p><h4 id="二、国内外端口扫描测试-http-tool-chinaz-com-port"><a href="#二、国内外端口扫描测试-http-tool-chinaz-com-port" class="headerlink" title="二、国内外端口扫描测试(http://tool.chinaz.com/port)"></a>二、国内外端口扫描测试(<a href="http://tool.chinaz.com/port" target="_blank" rel="noopener">http://tool.chinaz.com/port</a>)</h4><p>如果出现下面情况，说明在国内该 IP 已经被封掉了，试试下一步去国外检测端口是否可用。<br><img src="https://github.com/qliang0816/MarkdownImage/blob/master/Vultr%E8%83%BDPing%E4%BD%86%E6%98%AFSSH%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5/3.jpg?raw=true" alt="image"></p><p>如果出现下面情况，说明国内并没有封掉该 IP。<br><img src="https://github.com/qliang0816/MarkdownImage/blob/master/Vultr%E8%83%BDPing%E4%BD%86%E6%98%AFSSH%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5/4.jpg?raw=true" alt="image"></p><h4 id="三、国外测试-https-www-yougetsignal-com-tools-open-ports"><a href="#三、国外测试-https-www-yougetsignal-com-tools-open-ports" class="headerlink" title="三、国外测试(https://www.yougetsignal.com/tools/open-ports/)"></a>三、国外测试(<a href="https://www.yougetsignal.com/tools/open-ports/" target="_blank" rel="noopener">https://www.yougetsignal.com/tools/open-ports/</a>)</h4><p>如下图<br><img src="https://github.com/qliang0816/MarkdownImage/blob/master/Vultr%E8%83%BDPing%E4%BD%86%E6%98%AFSSH%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5/5.jpg?raw=true" alt="image"></p><ol><li>如果上一步 22 端口是关闭状态，在这边检测是 open 状态，说明 IP 肯定是被封掉了，只能删除机器重建。</li><li>如果上一步 22 店口是关闭状态，这边检测也是 close 状态，那就要查看是不是服务器的防火墙把端口限制了。</li></ol><hr><p>其实，如果买的 vps 只是作为科学上网的工具，使用 vpn 就行了，不管 IP 是不是被封，vpn 照样好用。</p><p><strong>传送门</strong> &gt; <a href="https://www.bestqliang.com/2018/06/20/centos%E6%90%AD%E5%BB%BASoftEtherVpn/" target="_blank" rel="noopener">centos 搭建 SoftEtherVpn</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Shadowsocks </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科学上网 </tag>
            
            <tag> Vps </tag>
            
            <tag> Shadowsocks </tag>
            
            <tag> Vpn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos搭建SoftEtherVpn</title>
      <link href="/2018/06/20/centos-da-jian-softethervpn/"/>
      <url>/2018/06/20/centos-da-jian-softethervpn/</url>
      
        <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>今天<code>vultr</code>ssh 服务突然就不能登录了，起先以为是<code>vultr</code>我的账号被禁了，于是重新建了 server，重新安装的 shadowsocks，结果还是一样</p><p><strong>百般尝试下，偶然在拨了公司的 vpn，竟然能够登进去了！！！</strong></p><p>于是我查了一下 ip:</p><ul><li>未拨 vpn</li></ul><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/centos%E6%90%AD%E5%BB%BAvpn/1.jpg?raw=true" alt="ip地址"></p><ul><li>拨通 vpn</li></ul><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/centos%E6%90%AD%E5%BB%BAvpn/2.jpg?raw=true" alt="ip地址"></p><p><strong>这难道是联通搞的鬼(黑人脸)??</strong></p><p><strong>为了防止之后再出现这样的情况，我决定在我的腾讯云上搭建 vpn 服务。</strong></p><hr><h4 id="搭建流程"><a href="#搭建流程" class="headerlink" title="搭建流程"></a>搭建流程</h4><h5 id="一、选择-vpn-服务"><a href="#一、选择-vpn-服务" class="headerlink" title="一、选择 vpn 服务"></a>一、选择 vpn 服务</h5><p>我选用的是<a href="https://www.softether.org/" target="_blank" rel="noopener">softether</a></p><p>选择的版本为 linux 版本(只有英文版)<code>SoftEther VPN Server</code></p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/centos%E6%90%AD%E5%BB%BAvpn/3.jpg?raw=true" alt="下载版本"></p><p>因为用的是 mac，在本地机上下载<code>SoftEther VPN Server Manager for Mac OS</code></p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/centos%E6%90%AD%E5%BB%BAvpn/4.jpg?raw=true" alt="下载版本"></p><h5 id="二、搭建-vpn-服务端"><a href="#二、搭建-vpn-服务端" class="headerlink" title="二、搭建 vpn 服务端"></a>二、搭建 vpn 服务端</h5><ol><li>通过 scp 将下载的<code>SoftEther VPN Server</code>上传到服务器</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">scp</span> ~/Desktop/softether-vpnserver-v4.27-9668-beta-2018.05.29-linux-x64-64bit.tar.gz user@ip:/home/user</code></pre><ol start="2"><li>进入服务器，解压文件</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> -zxvf softether-vpnserver-v4.27-9668-beta-2018.05.29-linux-x64-64bit.tar.gz</code></pre><ol start="3"><li>此时会得到一个<code>vpnserver</code>的文件夹，进入文件夹</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">make</span></code></pre><p>3 次同意即可。</p><ol start="4"><li>启动关闭</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> ./vpnserver start 开启服务<span class="token function">sudo</span> ./vpnserver stop 关闭服务</code></pre><h5 id="三、vpn-控制台"><a href="#三、vpn-控制台" class="headerlink" title="三、vpn 控制台"></a>三、vpn 控制台</h5><ol><li>开放服务器端口</li></ol><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/centos%E6%90%AD%E5%BB%BAvpn/23.jpg?raw=true" alt="image"></p><ol start="2"><li><p>本地安装<code>SoftEther VPN Server Manager for Mac OS</code></p></li><li><p>打开控制台</p></li></ol><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/centos%E6%90%AD%E5%BB%BAvpn/5.jpg?raw=true" alt="image"></p><ol start="4"><li>点击<code>New Setting</code></li></ol><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/centos%E6%90%AD%E5%BB%BAvpn/6.jpg?raw=true" alt="image"></p><p>填写 vpn 服务端 ip,输入登陆密码，此时会多一个 vpn 连接。</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/centos%E6%90%AD%E5%BB%BAvpn/7.jpg?raw=true" alt="image"></p><ol start="5"><li>点击 vpn 连接</li></ol><p>开始连接</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/centos%E6%90%AD%E5%BB%BAvpn/8.jpg?raw=true" alt="image"></p><p>连接成功</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/centos%E6%90%AD%E5%BB%BAvpn/9.jpg?raw=true" alt="image"></p><p>动态 dns 设置</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/centos%E6%90%AD%E5%BB%BAvpn/10.jpg?raw=true" alt="image"></p><p>之后连接 vpn 可以使用 ip 地址，也可以使用该主机名</p><ol start="6"><li>设置协议</li></ol><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/centos%E6%90%AD%E5%BB%BAvpn/11.jpg?raw=true" alt="image"></p><p>默认启用的 L2TP 服务器功能，<strong>注意这个预共享秘钥，之后登陆的时候会用到。</strong></p><ol start="7"><li>VPN Azure 设置</li></ol><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/centos%E6%90%AD%E5%BB%BAvpn/12.jpg?raw=true" alt="image"></p><p>这里默认是关闭的，我也没有启用。</p><ol start="8"><li>创建用户</li></ol><p>回到</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/centos%E6%90%AD%E5%BB%BAvpn/9.jpg?raw=true" alt="image"></p><p>点击<code>创建虚拟 HUB</code></p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/centos%E6%90%AD%E5%BB%BAvpn/13.jpg?raw=true" alt="image"></p><p>创建完成</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/centos%E6%90%AD%E5%BB%BAvpn/14.jpg?raw=true" alt="image"></p><p>这里不要忘记回到协议设置部分修改<code>默认虚拟HUB以防遗漏用户名上的HUB名称</code></p><p>双击新创建的<code>虚拟HUB</code></p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/centos%E6%90%AD%E5%BB%BAvpn/15.jpg?raw=true" alt="image"></p><p>点击<code>管理用户</code>(这是用来登陆的用户)</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/centos%E6%90%AD%E5%BB%BAvpn/16.jpg?raw=true" alt="image"></p><p>点击<code>虚拟NAT和虚拟DHCP服务器</code>,启用 SecureNAT</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/centos%E6%90%AD%E5%BB%BAvpn/17.jpg?raw=true" alt="image"></p><p>SecureNAT 配置可自由配置</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/centos%E6%90%AD%E5%BB%BAvpn/18.jpg?raw=true" alt="image"></p><p><strong>重要的事情说三遍</strong><br><strong>SecureNAT 和 Local Bridge（本地桥）不可以同时开启！</strong><br><strong>SecureNAT 和 Local Bridge（本地桥）不可以同时开启！</strong><br><strong>SecureNAT 和 Local Bridge（本地桥）不可以同时开启！</strong></p><h4 id="四、mac-连接-vpn"><a href="#四、mac-连接-vpn" class="headerlink" title="四、mac 连接 vpn"></a>四、mac 连接 vpn</h4><ol><li>打开网络设置，新建连接</li></ol><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/centos%E6%90%AD%E5%BB%BAvpn/19.jpg?raw=true" alt="image"></p><ol start="2"><li>选择类型</li></ol><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/centos%E6%90%AD%E5%BB%BAvpn/20.jpg?raw=true" alt="image"></p><ol start="3"><li>配置变量</li></ol><p>mac 的<code>SoftEther VPN Server Manager for Mac OS</code>快捷键沿用的 windows 的快捷键(反智)</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/centos%E6%90%AD%E5%BB%BAvpn/21.jpg?raw=true" alt="image"></p><p>鉴定设置</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/centos%E6%90%AD%E5%BB%BAvpn/22.jpg?raw=true" alt="image"></p><p>最后不要忘记设置流量<br><img src="https://github.com/qliang0816/MarkdownImage/blob/master/centos%E6%90%AD%E5%BB%BAvpn/24.jpg?raw=true" alt="image"></p><h4 id="至此，vpn-搭建完成"><a href="#至此，vpn-搭建完成" class="headerlink" title="至此，vpn 搭建完成"></a>至此，vpn 搭建完成</h4><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Vpn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科学上网 </tag>
            
            <tag> Vpn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VisualStudioCode通过SSH远程编辑文件</title>
      <link href="/2018/06/19/visualstudiocode-tong-guo-ssh-yuan-cheng-bian-ji-wen-jian/"/>
      <url>/2018/06/19/visualstudiocode-tong-guo-ssh-yuan-cheng-bian-ji-wen-jian/</url>
      
        <content type="html"><![CDATA[<p>翻译修改自:<a href="https://codepen.io/ginfuru/post/remote-editing-files-with-ssh" target="_blank" rel="noopener">https://codepen.io/ginfuru/post/remote-editing-files-with-ssh</a></p><p>在远程服务器上编写文件是一件很糟糕的事情，<code>vim</code>和其他终端编辑器，让速度和熟练度大打折扣，一整天使用<code>vim</code>和<code>FTP客户端</code>并不是一件舒心的事情。</p><p>所以，如果你已经知道 SSH 是什么以及涉及到什么，你可以完全访问你的服务器，你就无需害怕终端。</p><p>现在我们通过使用<code>Visual Studio</code>代码通过 SSH 远程编辑文件</p><h5 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一:"></a>步骤一:</h5><pre class=" language-bash"><code class="language-bash">安装扩展 <span class="token variable"><span class="token variable">`</span>remote-vscode<span class="token variable">`</span></span></code></pre><h5 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二:"></a>步骤二:</h5><p>添加 <code>RemoteForward 52698 127.0.0.1:52698</code> 到 <code>~/.ssh/config</code>:</p><pre class=" language-bash"><code class="language-bash">Host myRemoteServerName    HostName 12.34.567.89    User root    ForwardAgent <span class="token function">yes</span>    RemoteForward 52698 127.0.0.1:52698</code></pre><h5 id="步骤三"><a href="#步骤三" class="headerlink" title="步骤三:"></a>步骤三:</h5><p>连接远程:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> -v myRemoteServerName</code></pre><p>安装<code>rmate</code>:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> -O /usr/local/bin/rcode https://raw.github.com/aurora/rmate/master/rmate <span class="token operator">&amp;&amp;</span><span class="token function">chmod</span> a+x /usr/local/bin/rcode</code></pre><h5 id="步骤四"><a href="#步骤四" class="headerlink" title="步骤四:"></a>步骤四:</h5><p>重新登陆远程, 运行</p><pre class=" language-bash"><code class="language-bash">rcode some_file.php或者rmate some_file.php</code></pre><p>文件就会出现在<code>Visual Studio</code>。</p><h5 id="PS"><a href="#PS" class="headerlink" title="PS:"></a>PS:</h5><p>我在远程添加别名 <code>.bashrc</code> –&gt; <code>alias code='rcode'</code> 这样我的本地和远程就可以用相同的命令从终端打开<code>Visual Studio</code></p><p>如果报错 “no such file or directory” , 你需要编辑<code>PATH</code>:</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token string">"export PATH=\"<span class="token variable">$PATH</span>:/usr/local/bin\""</span> <span class="token operator">>></span> /etc/profile</code></pre><h3 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VisualStudioCode </tag>
            
            <tag> 技巧 </tag>
            
            <tag> 编辑器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos重建服务器</title>
      <link href="/2018/06/18/centos-chong-jian-fu-wu-qi/"/>
      <url>/2018/06/18/centos-chong-jian-fu-wu-qi/</url>
      
        <content type="html"><![CDATA[<h4 id="、云服务器重建系统"><a href="#、云服务器重建系统" class="headerlink" title="-、云服务器重建系统"></a>-、云服务器重建系统</h4><h6 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h6><p>centos 下 ssh 登录的目录权限严格限制</p><blockquote><p>地址:<a href="https://wiki.centos.org/HowTos/Network/SecuringSSH" target="_blank" rel="noopener">https://wiki.centos.org/HowTos/Network/SecuringSSH</a></p></blockquote><h4 id="二、搭建docker及docker-compose"><a href="#二、搭建docker及docker-compose" class="headerlink" title="二、搭建docker及docker-compose"></a>二、搭建<code>docker</code>及<code>docker-compose</code></h4><h6 id="安装-docker"><a href="#安装-docker" class="headerlink" title="安装 docker"></a>安装 docker</h6><blockquote><p>地址: <a href="https://docs.docker.com/engine/installation/linux/docker-ce/centos/" target="_blank" rel="noopener">https://docs.docker.com/engine/installation/linux/docker-ce/centos/</a></p></blockquote><h6 id="安装-docker-compose"><a href="#安装-docker-compose" class="headerlink" title="安装 docker-compose"></a>安装 docker-compose</h6><blockquote><p>地址:<a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener">https://docs.docker.com/compose/install/</a></p></blockquote><h6 id="镜像加速器"><a href="#镜像加速器" class="headerlink" title="镜像加速器"></a>镜像加速器</h6><p>在 /etc/docker/daemon.json 中写入如下内容（如果文件不存在请新建该文件)</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">{</span>  <span class="token string">"registry-mirrors"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>    <span class="token string">"https://registry.docker-cn.com"</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>重启服务</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl restart docker</code></pre><h4 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h4><h6 id="docker-部署方案"><a href="#docker-部署方案" class="headerlink" title="docker 部署方案"></a>docker 部署方案</h6><blockquote><p>地址:<a href="https://github.com/qliang0816/docker-platform" target="_blank" rel="noopener">https://github.com/qliang0816/docker-platform</a></p></blockquote><h6 id="后台接口"><a href="#后台接口" class="headerlink" title="后台接口"></a>后台接口</h6><blockquote><p>地址:<a href="https://github.com/qliang0816/blog_interface.git" target="_blank" rel="noopener">https://github.com/qliang0816/blog_interface.git</a></p></blockquote><h6 id="前端-vue"><a href="#前端-vue" class="headerlink" title="前端 vue"></a>前端 vue</h6><blockquote><p>地址:<a href="https://github.com/qliang0816/blog_vue" target="_blank" rel="noopener">https://github.com/qliang0816/blog_vue</a></p></blockquote><h4 id="数据库备定时备份"><a href="#数据库备定时备份" class="headerlink" title="数据库备定时备份"></a>数据库备定时备份</h4><blockquote><p>地址:<a href="https://www.bestqliang.com/2018/05/18/docker%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD/" target="_blank" rel="noopener">https://www.bestqliang.com/2018/05/18/docker%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD/</a></p></blockquote><ul><li>定时任务路径作相应调整</li></ul><h3 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos </tag>
            
            <tag> Linux </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装最新内核并开启BBR</title>
      <link href="/2018/06/11/an-zhuang-zui-xin-nei-he-bing-kai-qi-bbr/"/>
      <url>/2018/06/11/an-zhuang-zui-xin-nei-he-bing-kai-qi-bbr/</url>
      
        <content type="html"><![CDATA[<h3 id="关于-BBR-拥塞算法"><a href="#关于-BBR-拥塞算法" class="headerlink" title="关于 BBR 拥塞算法"></a>关于 BBR 拥塞算法</h3><p><a href="https://blog.csdn.net/dog250/article/details/52895080" target="_blank" rel="noopener">Google’s BBR 拥塞控制算法模型解析</a><br><a href="https://blog.csdn.net/dog250/article/details/52902029" target="_blank" rel="noopener">Google’s BBR 拥塞控制算法如何对抗丢包</a></p><blockquote><p>在部署了最新版内核并开启了 TCP BBR 的机器上，网速甚至可以提升好几个数量级。</p></blockquote><h3 id="开启-BBR"><a href="#开启-BBR" class="headerlink" title="开启 BBR"></a>开启 BBR</h3><h5 id="下载脚本并运行"><a href="#下载脚本并运行" class="headerlink" title="下载脚本并运行"></a>下载脚本并运行</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh <span class="token operator">&amp;&amp;</span> <span class="token function">chmod</span> +x bbr.sh <span class="token operator">&amp;&amp;</span> ./bbr.sh</code></pre><h5 id="重启完成后，进入-VPS，验证一下是否成功安装最新内核并开启-TCP-BBR"><a href="#重启完成后，进入-VPS，验证一下是否成功安装最新内核并开启-TCP-BBR" class="headerlink" title="重启完成后，进入 VPS，验证一下是否成功安装最新内核并开启 TCP BBR"></a>重启完成后，进入 VPS，验证一下是否成功安装最新内核并开启 TCP BBR</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">uname</span> -r</code></pre><h5 id="查看内核版本"><a href="#查看内核版本" class="headerlink" title="查看内核版本"></a>查看内核版本</h5><pre class=" language-bash"><code class="language-bash">sysctl net.ipv4.tcp_available_congestion_control</code></pre><p>返回值一般为：<br><code>net.ipv4.tcp_available_congestion_control = bbr cubic reno</code><br>或者为：<br><code>net.ipv4.tcp_available_congestion_control = reno cubic bbr</code></p><pre class=" language-bash"><code class="language-bash">sysctl net.ipv4.tcp_congestion_control</code></pre><p>返回值一般为：<br><code>net.ipv4.tcp_congestion_control = bbr</code></p><pre class=" language-bash"><code class="language-bash">sysctl net.core.default_qdisc</code></pre><p>返回值一般为：<br><code>net.core.default_qdisc = fq</code></p><pre class=" language-bash"><code class="language-bash">lsmod <span class="token operator">|</span> <span class="token function">grep</span> bbr</code></pre><p>返回值有 <code>tcp_bbr</code> 模块即说明 bbr 已启动。<strong>注意：并不是所有的 VPS 都会有此返回值，若没有也属正常。</strong></p><h3 id="CentOS-下最新版内核-headers-安装方法"><a href="#CentOS-下最新版内核-headers-安装方法" class="headerlink" title="CentOS 下最新版内核 headers 安装方法"></a>CentOS 下最新版内核 headers 安装方法</h3><p>执行以下命令</p><pre class=" language-bash"><code class="language-bash">yum --enablerepo<span class="token operator">=</span>elrepo-kernel -y <span class="token function">install</span> kernel-ml-headers</code></pre><p>根据 CentOS 版本的不同，此时一般会出现类似于以下的错误提示：</p><pre class=" language-bash"><code class="language-bash">Error: kernel-ml-headers conflicts with kernel-headers-2.6.32-696.20.1.el6.x86_64Error: kernel-ml-headers conflicts with kernel-headers-3.10.0-693.17.1.el7.x86_64</code></pre><p>因此需要先卸载原版内核 headers ，然后再安装最新版内核 headers。执行命令：</p><pre class=" language-bash"><code class="language-bash">yum remove kernel-headers</code></pre><p>确认无误后，输入 y，回车开始卸载。注意，有时候这么操作还会卸载一些对内核 headers 依赖的安装包，比如 gcc、gcc-c++ 之类的。不过不要紧，我们可以在安装完最新版内核 headers 后再重新安装回来即可。<br>卸载完成后，再次执行上面给出的安装命令。</p><pre class=" language-bash"><code class="language-bash">yum --enablerepo<span class="token operator">=</span>elrepo-kernel -y <span class="token function">install</span> kernel-ml-headers</code></pre><p>成功安装后，再把那些之前对内核 headers 依赖的安装包，比如 gcc、gcc-c++ 之类的再安装一次即可。</p><p>为什么要安装最新版内核 headers 呢？<br>这是因为 shadowsocks-libev 版有个 tcp fast open 功能，如果不安装的话，这个功能是无法开启的。</p><h3 id="内核升级方法"><a href="#内核升级方法" class="headerlink" title="内核升级方法"></a>内核升级方法</h3><p>如果是 CentOS 系统，执行如下命令即可升级内核：</p><pre class=" language-bash"><code class="language-bash">yum -y <span class="token function">install</span> kernel-ml kernel-ml-devel</code></pre><p>如果你还手动安装了新版内核 headers ，那么还需要以下命令来升级 headers ：</p><pre class=" language-bash"><code class="language-bash">yum -y <span class="token function">install</span> kernel-ml-headers</code></pre><p>CentOS 6 的话，执行命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sed</span> -i <span class="token string">'s/^default=.*/default=0/g'</span> /boot/grub/grub.conf</code></pre><p>CentOS 7 的话，执行命令：</p><pre class=" language-bash"><code class="language-bash">grub2-set-default 0</code></pre><p>如果是 Debian/Ubuntu 系统，则需要手动下载最新版内核来安装升级。<br>去<a href="http://kernel.ubuntu.com/~kernel-ppa/mainline/" target="_blank" rel="noopener">这里</a>下载最新版的内核 deb 安装包。<br>如果系统是 64 位，则下载 amd64 的 linux-image 中含有 generic 这个 deb 包；<br>如果系统是 32 位，则下载 i386 的 linux-image 中含有 generic 这个 deb 包；<br>安装的命令如下（以最新版的 64 位 4.12.4 举例而已，请替换为下载好的 deb 包）：</p><pre class=" language-bash"><code class="language-bash">dpkg -i linux-image-4.12.4-041204-generic_4.12.4-041204.201707271932_amd64.deb</code></pre><p>安装完成后，再执行命令：</p><pre class=" language-bash"><code class="language-bash">/usr/sbin/update-grub</code></pre><p>最后，重启 VPS 即可。</p><p>特别说明<br>如果你使用的是 Google Cloud Platform （GCP）更换内核，有时会遇到重启后，整个磁盘变为只读的情况。只需执行以下命令即可恢复：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mount</span> -o remount rw /</code></pre><p>转载自:<a href="https://teddysun.com/" target="_blank" rel="noopener">秋水逸冰</a>&gt;<a href="https://teddysun.com/489.html" target="_blank" rel="noopener">一键安装最新内核并开启 BBR 脚本</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Shadowsocks </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科学上网 </tag>
            
            <tag> Vps </tag>
            
            <tag> Shadowsocks </tag>
            
            <tag> Linux </tag>
            
            <tag> BBR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shadowsock搭建</title>
      <link href="/2018/06/11/shadowsock-da-jian/"/>
      <url>/2018/06/11/shadowsock-da-jian/</url>
      
        <content type="html"><![CDATA[<h5 id="安利秋水逸冰"><a href="#安利秋水逸冰" class="headerlink" title="安利秋水逸冰"></a>安利<code>秋水逸冰</code></h5><ul><li><code>github</code>:<a href="https://github.com/teddysun" target="_blank" rel="noopener">https://github.com/teddysun</a></li></ul><h3 id="采用四合一的脚本"><a href="#采用四合一的脚本" class="headerlink" title="采用四合一的脚本"></a>采用四合一的脚本</h3><h5 id="步骤一-下载脚本"><a href="#步骤一-下载脚本" class="headerlink" title="步骤一:下载脚本"></a>步骤一:下载脚本</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh</code></pre><p>出现以下成功</p><pre class=" language-bash"><code class="language-bash">--2018-06-11 09:53:44--  https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.shResolving raw.githubusercontent.com <span class="token punctuation">(</span>raw.githubusercontent.com<span class="token punctuation">)</span><span class="token punctuation">..</span>. 151.101.20.133Connecting to raw.githubusercontent.com <span class="token punctuation">(</span>raw.githubusercontent.com<span class="token punctuation">)</span><span class="token operator">|</span>151.101.20.133<span class="token operator">|</span>:443<span class="token punctuation">..</span>. connected.HTTP request sent, awaiting response<span class="token punctuation">..</span>. 200 OKLength: 46121 <span class="token punctuation">(</span>45K<span class="token punctuation">)</span> <span class="token punctuation">[</span>text/plain<span class="token punctuation">]</span>Saving to: <span class="token string">'shadowsocks-all.sh'</span>100%<span class="token punctuation">[</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">></span><span class="token punctuation">]</span> 46,121      --.-K/s   <span class="token keyword">in</span> 0.002s2018-06-11 09:53:44 <span class="token punctuation">(</span>19.3 MB/s<span class="token punctuation">)</span> - <span class="token string">'shadowsocks-all.sh'</span> saved <span class="token punctuation">[</span>46121/46121<span class="token punctuation">]</span></code></pre><h5 id="步骤二-修改权限"><a href="#步骤二-修改权限" class="headerlink" title="步骤二:修改权限"></a>步骤二:修改权限</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">chmod</span> +x shadowsocks-all.sh</code></pre><h5 id="步骤三-执行"><a href="#步骤三-执行" class="headerlink" title="步骤三:执行"></a>步骤三:执行</h5><pre class=" language-bash"><code class="language-bash">./shadowsocks-all.sh 2<span class="token operator">></span><span class="token operator">&amp;</span>1 <span class="token operator">|</span> <span class="token function">tee</span> shadowsocks-all.log</code></pre><p>选择版本</p><pre class=" language-bash"><code class="language-bash">Which Shadowsocks server you'd select:1<span class="token punctuation">)</span> Shadowsocks-Python2<span class="token punctuation">)</span> ShadowsocksR3<span class="token punctuation">)</span> Shadowsocks-Go4<span class="token punctuation">)</span> Shadowsocks-libevPlease enter a number <span class="token punctuation">(</span>Default Shadowsocks-Python<span class="token punctuation">)</span>:</code></pre><p>修改密码</p><pre class=" language-bash"><code class="language-bash">You choose <span class="token operator">=</span> Shadowsocks-PythonPlease enter password <span class="token keyword">for</span> Shadowsocks-Python<span class="token punctuation">(</span>Default password: teddysun.com<span class="token punctuation">)</span>:</code></pre><p>修改端口</p><pre class=" language-bash"><code class="language-bash">password <span class="token operator">=</span> qinliang978Please enter a port <span class="token keyword">for</span> Shadowsocks-Python <span class="token punctuation">[</span>1-65535<span class="token punctuation">]</span><span class="token punctuation">(</span>Default port: 19852<span class="token punctuation">)</span>:</code></pre><p>修改加密方式</p><pre class=" language-bash"><code class="language-bash">Please <span class="token keyword">select</span> stream cipher <span class="token keyword">for</span> Shadowsocks-Python:1<span class="token punctuation">)</span> aes-256-gcm2<span class="token punctuation">)</span> aes-192-gcm3<span class="token punctuation">)</span> aes-128-gcm4<span class="token punctuation">)</span> aes-256-ctr5<span class="token punctuation">)</span> aes-192-ctr6<span class="token punctuation">)</span> aes-128-ctr7<span class="token punctuation">)</span> aes-256-cfb8<span class="token punctuation">)</span> aes-192-cfb9<span class="token punctuation">)</span> aes-128-cfb10<span class="token punctuation">)</span> camellia-128-cfb11<span class="token punctuation">)</span> camellia-192-cfb12<span class="token punctuation">)</span> camellia-256-cfb13<span class="token punctuation">)</span> xchacha20-ietf-poly130514<span class="token punctuation">)</span> chacha20-ietf-poly130515<span class="token punctuation">)</span> chacha20-ietf16<span class="token punctuation">)</span> chacha2017<span class="token punctuation">)</span> salsa2018<span class="token punctuation">)</span> rc4-md5Which cipher you'd select<span class="token punctuation">(</span>Default: aes-256-gcm<span class="token punctuation">)</span>:</code></pre><p>开始执行</p><pre class=" language-bash"><code class="language-bash">Press any key to start<span class="token punctuation">..</span>.or Press Ctrl+C to cancel</code></pre><p>至此,enjoy it!</p><pre class=" language-bash"><code class="language-bash">Congratulations, Shadowsocks-Python server <span class="token function">install</span> completed<span class="token operator">!</span>Your Server IP        <span class="token keyword">:</span>  207.246.124.160Your Server Port      <span class="token keyword">:</span>  18513Your Password         <span class="token keyword">:</span>  qinliang978Your Encryption Method:  chacha20Your QR Code: <span class="token punctuation">(</span>For Shadowsocks Windows, OSX, Android and iOS clients<span class="token punctuation">)</span> ss://Y2hhY2hhMjA6cWlubGlhbmc5NzhAMjA3LjI0Ni4xMjQuMTYwOjE4NTEzYour QR Code has been saved as a PNG <span class="token function">file</span> path: /home/ql/shadowsock/shadowsocks_python_qr.pngWelcome to visit: https://teddysun.com/486.htmlEnjoy it<span class="token operator">!</span></code></pre><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><pre class=" language-bash"><code class="language-bash">./shadowsocks-all.sh uninstall</code></pre><h3 id="启动脚本"><a href="#启动脚本" class="headerlink" title="启动脚本"></a>启动脚本</h3><pre class=" language-bash"><code class="language-bash">Shadowsocks-Python 版：/etc/init.d/shadowsocks-python start <span class="token operator">|</span> stop <span class="token operator">|</span> restart <span class="token operator">|</span> statusShadowsocksR 版：/etc/init.d/shadowsocks-r start <span class="token operator">|</span> stop <span class="token operator">|</span> restart <span class="token operator">|</span> statusShadowsocks-Go 版：/etc/init.d/shadowsocks-go start <span class="token operator">|</span> stop <span class="token operator">|</span> restart <span class="token operator">|</span> statusShadowsocks-libev 版：/etc/init.d/shadowsocks-libev start <span class="token operator">|</span> stop <span class="token operator">|</span> restart <span class="token operator">|</span> status</code></pre><h3 id="默认配置文件"><a href="#默认配置文件" class="headerlink" title="默认配置文件"></a>默认配置文件</h3><pre class=" language-bash"><code class="language-bash">Shadowsocks-Python 版：/etc/shadowsocks-python/config.jsonShadowsocksR 版：/etc/shadowsocks-r/config.jsonShadowsocks-Go 版：/etc/shadowsocks-go/config.jsonShadowsocks-libev 版：/etc/shadowsocks-libev/config.json</code></pre><h3 id="关于在-linux-上查看图片"><a href="#关于在-linux-上查看图片" class="headerlink" title="关于在 linux 上查看图片"></a>关于在 linux 上查看图片</h3><ul><li>采用内置图片查看器<code>eog</code>(eye of gmone)</li></ul><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> eog</code></pre><h5 id="查看图片"><a href="#查看图片" class="headerlink" title="查看图片"></a>查看图片</h5><pre class=" language-bash"><code class="language-bash">eog pic.png</code></pre><p>如果报错</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">(</span>process:20859<span class="token punctuation">)</span>: Gtk-WARNING **: Locale not supported by C library.    Using the fallback <span class="token string">'C'</span> locale.</code></pre><p>解决方案:<a href="https://askubuntu.com/questions/359753/gtk-warning-locale-not-supported-by-c-library-when-starting-apps-from-th" target="_blank" rel="noopener">https://askubuntu.com/questions/359753/gtk-warning-locale-not-supported-by-c-library-when-starting-apps-from-th</a></p><p>如果报错</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">(</span>eog:20928<span class="token punctuation">)</span>: Gtk-WARNING **: cannot <span class="token function">open</span> display:</code></pre><p>解决方案:<a href="https://blog.csdn.net/Lux_Veritas/article/details/19244349" target="_blank" rel="noopener">https://blog.csdn.net/Lux_Veritas/article/details/19244349</a></p><blockquote><p>建议还是通过<code>scp</code>拷贝到本地机上。</p></blockquote><p>转载自:<a href="https://teddysun.com/" target="_blank" rel="noopener">秋水逸冰</a>&gt;<a href="https://teddysun.com/486.html" target="_blank" rel="noopener">Shadowsocks 一键安装脚本（四合一）</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Shadowsocks </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科学上网 </tag>
            
            <tag> Vps </tag>
            
            <tag> Shadowsocks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用jwt完成sso单点登录</title>
      <link href="/2018/06/02/shi-yong-jwt-wan-cheng-sso-dan-dian-deng-lu/"/>
      <url>/2018/06/02/shi-yong-jwt-wan-cheng-sso-dan-dian-deng-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><h3 id="在了解-jwt-之前，先了解一下常用的会话管理"><a href="#在了解-jwt-之前，先了解一下常用的会话管理" class="headerlink" title="在了解 jwt 之前，先了解一下常用的会话管理"></a><strong><em>在了解 jwt 之前，先了解一下常用的会话管理</em></strong></h3><ul><li>基于<code>server-session</code>的管理方式</li><li><code>cookie-based</code>的管理方式</li><li><code>token-based</code>的管理方式</li></ul><h4 id="一-基于server-session的管理"><a href="#一-基于server-session的管理" class="headerlink" title="一.基于server-session的管理"></a>一.基于<code>server-session</code>的管理</h4><ol><li>服务端<code>session</code>是用户第一次访问应用时，服务器就会创建的对象，代表用户的一次会话过程，服务器为每一个<code>session</code>都分配一个唯一的<code>sessionid</code>，以保证每个用户都有一个不同的<code>session</code>对象。</li><li>服务器在创建完<code>session</code>后，会把<code>sessionid</code>通过<code>cookie</code>返回给用户所在的浏览器，这样当用户第二次及以后向服务器发送请求的时候，就会通过<code>cookie</code>把<code>sessionid</code>传回给服务器，以便服务器能够根据<code>sessionid</code>找到与该用户对应的<code>session</code>对象。</li><li><code>session</code>通常有失效时间的设定，比如 2 个小时。当失效时间到，服务器会销毁之前的<code>session</code>，并创建新的<code>session</code>返回给用户。但是只要用户在失效时间内，有发送新的请求给服务器，通常服务器都会把他对应的<code>session</code>的失效时间根据当前的请求时间再延长 2 个小时。</li><li><code>session</code>在一开始并不具备会话管理的作用。它只有在用户登录认证成功之后，并且往<code>session</code>对象里面放入了用户登录成功的凭证，才能用来管理会话。管理会话的逻辑也很简单，只要拿到用户的<code>session</code>对象，看它里面有没有登录成功的凭证，就能判断这个用户是否已经登录。当用户主动退出的时候，会把它的<code>session</code>对象里的登录凭证清掉。所以在用户登录前或退出后或者<code>session</code>对象失效时，肯定都是拿不到需要的登录凭证的。</li></ol><p>以上过程可简单使用流程图描述如下：<br><img src="https://github.com/qliang0816/MarkdownImage/blob/master/jwt_oauth/server-session.png?raw=true" alt="server-sessionid"></p><p>它还有一个比较大的优点就是安全性好，因为在浏览器端与服务器端保持会话状态的媒介始终只是一个<code>sessionid</code>串，只要这个串够随机，攻击者就不能轻易冒充他人的<code>sessionid</code>进行操作；除非通过 CSRF 或 http 劫持的方式，才有可能冒充别人进行操作；即使冒充成功，也必须被冒充的用户<code>session</code>里面包含有效的登录凭证才行。但是在真正决定用它管理会话之前，也得根据自己的应用情况考虑以下几个问题：</p><ol><li>这种方式将会话信息存储在 web 服务器里面，所以在用户同时在线量比较多时，这些会话信息会占据比较多的内存；</li><li>当应用采用集群部署的时候，会遇到多台 web 服务器之间如何做<code>session</code>共享的问题。因为<code>session</code>是由单个服务器创建的，但是处理用户请求的服务器不一定是那个创建<code>session</code>的服务器，这样他就拿不到之前已经放入到<code>session</code>中的登录凭证之类的信息了；</li><li>多个应用要共享<code>session</code>时，除了以上问题，还会遇到跨域问题，因为不同的应用可能部署的主机不一样，需要在各个应用做好<code>cookie</code>跨域的处理。</li></ol><p>针对问题 1 和问题 2，我见过的解决方案是采用<code>redis</code>这种中间服务器来管理<code>session</code>的增删改查，一来减轻 web 服务器的负担，二来解决不同 web 服务器共享<code>session</code>的问题。针对问题 3，由于服务端的<code>session</code>依赖<code>cookie</code>来传递<code>sessionid</code>，所以在实际项目中，只要解决各个项目里面如何实现<code>sessionid</code>的<code>cookie</code>跨域访问即可，这个是可以实现的，就是比较麻烦，前后端有可能都要做处理。</p><h4 id="二-cookie-based的管理方式"><a href="#二-cookie-based的管理方式" class="headerlink" title="二. cookie-based的管理方式"></a>二. <code>cookie-based</code>的管理方式</h4><p>由于前一种方式会增加服务器的负担和架构的复杂性，所以后来就有人想出直接把用户的登录凭证直接存到客户端的方案，当用户登录成功之后，把登录凭证写到<code>cookie</code>里面，并给<code>cookie</code>设置有效期，后续请求直接验证存有登录凭证的<code>cookie</code>是否存在以及凭证是否有效，即可判断用户的登录状态。使用它来实现会话管理的整体流程如下：</p><ol><li>用户发起登录请求，服务端根据传入的用户密码之类的身份信息，验证用户是否满足登录条件，如果满足，就根据用户信息创建一个登录凭证，这个登录凭证简单来说就是一个对象，最简单的形式可以只包含用户<code>id</code>，凭证创建时间和过期时间三个值。</li><li>服务端把上一步创建好的登录凭证，先对它做数字签名，然后再用对称加密算法做加密处理，将签名、加密后的字串，写入<code>cookie</code>。<code>cookie</code>的名字必须固定（如<code>ticket</code>），因为后面再获取的时候，还得根据这个名字来获取<code>cookie</code>值。这一步添加数字签名的目的是防止登录凭证里的信息被篡改，因为一旦信息被篡改，那么下一步做签名验证的时候肯定会失败。做加密的目的，是防止<code>cookie</code>被别人截取的时候，无法轻易读到其中的用户信息。</li><li>用户登录后发起后续请求，服务端根据上一步存登录凭证的<code>cookie</code>名字，获取到相关的<code>cookie</code>值。然后先做解密处理，再做数字签名的认证，如果这两步都失败，说明这个登录凭证非法；如果这两步成功，接着就可以拿到原始存入的登录凭证了。然后用这个凭证的过期时间和当前时间做对比，判断凭证是否过期，如果过期，就需要用户再重新登录；如果未过期，则允许请求继续。</li></ol><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/jwt_oauth/cookie-base.png?raw=true" alt="cookie-based"></p><p>这种方式最大的优点就是实现了服务端的无状态化，彻底移除了服务端对会话的管理的逻辑，服务端只需要负责创建和验证登录<code>cookie</code>即可，无需保持用户的状态信息。对于第一种方式的第二个问题，用户会话信息共享的问题，它也能很好解决：因为如果只是同一个应用做集群部署，由于验证登录凭证的代码都是一样的，所以不管是哪个服务器处理用户请求，总能拿到<code>cookie</code>中的登录凭证来进行验证；如果是不同的应用，只要每个应用都包含相同的登录逻辑，那么他们也是能轻易实现会话共享的，不过这种情况下，登录逻辑里面数字签名以及加密解密要用到的密钥文件或者密钥串，需要在不同的应用里面共享，总而言之，就是需要算法完全保持一致。</p><p>这种方式由于把登录凭证直接存放客户端，并且需要<code>cookie</code>传来传去，所以它的缺点也比较明显：</p><ol><li><code>cookie</code>有大小限制，存储不了太多数据，所以要是登录凭证存的消息过多，导致加密签名后的串太长，就会引发别的问题，比如其它业务场景需要<code>cookie</code>的时候，就有可能没那么多空间可用了；所以用的时候得谨慎，得观察实际的登录<code>cookie</code>的大小；比如太长，就要考虑是非是数字签名的算法太严格，导致签名后的串太长，那就适当调整签名逻辑；比如如果一开始用 4096 位的 RSA 算法做数字签名，可以考虑换成 1024、2048 位；</li><li>每次传送<code>cookie</code>，增加了请求的数量，对访问性能也有影响；</li><li>也有跨域问题，毕竟还是要用<code>cookie</code>。</li></ol><p>前面两种会话管理方式因为都用到<code>cookie</code>，不适合用在 native app 里面：native app 不好管理<code>cookie</code>，毕竟它不是浏览器。这两种方案都不适合用来做纯 api 服务的登录认证。要实现 api 服务的登录认证，就要考虑下面要介绍的第三种会话管理方式。</p><h4 id="三-token-based的管理方式"><a href="#三-token-based的管理方式" class="headerlink" title="三.token-based的管理方式"></a>三.<code>token-based</code>的管理方式</h4><p>这种方式从流程和实现上来说，跟<code>cookie-based</code>的方式没有太多区别，只不过<code>cookie-based</code>里面写到<code>cookie</code>里面的<code>ticket</code>在这种方式下称为<code>token</code>，这个<code>token</code>在返回给客户端之后，后续请求都必须通过 url 参数或者是 http header 的形式，主动带上<code>token</code>，这样服务端接收到请求之后就能直接从 http header 或者 url 里面取到 token 进行验证：</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/jwt_oauth/token-base.png?raw=true" alt="token-base"></p><p>这种方式不通过<code>cookie</code>进行<code>token</code>的传递，而是每次请求的时候，主动把<code>token</code>加到 http header 里面或者 url 后面，所以即使在 native app 里面也能使用它来调用我们通过 web 发布的 api 接口。app 里面还要做两件事情：</p><ol><li>有效存储<code>token</code>，得保证每次调接口的时候都能从同一个位置拿到同一个<code>token</code>；</li><li>每次调接口的的代码里都得把<code>token</code>加到 header 或者接口地址里面。</li></ol><p>看起来麻烦，其实也不麻烦，这两件事情，对于 app 来说，很容易做到，只要对接口调用的模块稍加封装即可。</p><p>这种方式同样适用于网页应用，<code>token</code>可以存于<code>localStorage</code>或者<code>sessionStorage</code>里面，然后每发 ajax 请求的时候，都把<code>token</code>拿出来放到 ajax 请求的 header 里即可。不过如果是非接口的请求，比如直接通过点击链接请求一个页面这种，是无法自动带上<code>token</code>的。所以这种方式也仅限于走纯接口的 web 应用。</p><p>这种方式用在 web 应用里也有跨域的问题，比如应用如果部署在 a.com，api 服务部署在 b.com，从 a.com 里面发出 ajax 请求到 b.com，默认情况下是会报跨域错误的，这种问题可以用 CORS（跨域资源共享）的方式来快速解决。</p><p>这种方式跟<code>cookie-based</code>的方式同样都还有的一个问题就是<code>ticket</code>或者<code>token</code>刷新的问题。有的产品里面，你肯定不希望用户登录后，操作了半个小时，结果<code>ticket</code>或者<code>token</code>到了过期时间，然后用户又得去重新登录的情况出现。这个时候就得考虑<code>ticket</code>或<code>token</code>的自动刷新的问题，简单来说，可以在验证<code>ticket</code>或<code>token</code>有效之后，自动把<code>ticket</code>或<code>token</code>的失效时间延长，然后把它再返回给客户端；客户端如果检测到服务器有返回新的<code>ticket</code>或<code>token</code>，就替换原来的<code>ticket</code>或<code>token</code>。</p><h4 id="四-安全问题"><a href="#四-安全问题" class="headerlink" title="四. 安全问题"></a>四. 安全问题</h4><p>在 web 应用里面，会话管理的安全性始终是最重要的安全问题，这个对用户的影响极大。</p><p>首先从会话管理凭证来说，第一种方式的会话凭证仅仅是一个<code>sessionid</code>，所以只要这个<code>sessionid</code>足够随机，而不是一个自增的数字 id 值，那么其它人就不可能轻易地冒充别人的<code>sessionid</code>进行操作；第二种方式的凭证<code>ticket</code>以及第三种方式的凭证<code>token</code>都是一个在服务端做了数字签名，和加密处理的串，所以只要密钥不泄露，别人也无法轻易地拿到这个串中的有效信息并对它进行篡改。总之，这三种会话管理方式的凭证本身是比较安全的。</p><p>然后从客户端和服务端的 http 过程来说，当别人截获到客户端请求中的会话凭证，就能拿这个凭证冒充原用户，做一些非法操作，而服务器也认不出来。这种安全问题，可以简单采用 https 来解决，虽然可能还有 http 劫持这种更高程度的威胁存在，但是我们从代码能做的防范，确实也就是这个层次了。</p><hr><h4 id="JWT-介绍-https-jwt-io"><a href="#JWT-介绍-https-jwt-io" class="headerlink" title="JWT 介绍 (https://jwt.io/)"></a><strong><em>JWT 介绍</em></strong> (<a href="https://jwt.io/" target="_blank" rel="noopener">https://jwt.io/</a>)</h4><p><code>JSON Web Token（JWT）</code>是一个开放标准（RFC 7519），它定义了一种紧凑和自包含的方式，用于在各方之间作为 JSON 对象安全地传输信息。作为标准，它没有提供技术实现，但是大部分的语言平台都有按照它规定的内容提供了自己的技术实现，所以实际在用的时候，只要根据自己当前项目的技术平台，到官网上选用合适的实现库即可。</p><p>使用<code>JWT</code>来传输数据，实际上传输的是一个字符串，这个字符串就是所谓的 json web token 字符串。所以广义上，<code>JWT</code>是一个标准的名称；狭义上，<code>JWT</code>指的就是用来传递的那个<code>token</code>字符串。这个串有两个特点：</p><ol><li>紧凑：指的是这个串很小，能通过 url 参数，http 请求提交的数据以及 http header 的方式来传递；</li><li>自包含：这个串可以包含很多信息，比如用户的 id、角色等，别人拿到这个串，就能拿到这些关键的业务信息，从而避免再通过数据库查询等方式才能得到它们。</li></ol><p>通常一个<code>JWT</code>是长这个样子的：</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/jwt_oauth/jwt1.png?raw=true" alt="image"></p><p>要知道一个<code>JWT</code>是怎么产生以及如何用于会话管理，只要弄清楚<code>JWT</code>的数据结构以及它签发和验证的过程即可。</p><h5 id="一-JWT的数据结构以及签发过程"><a href="#一-JWT的数据结构以及签发过程" class="headerlink" title="一. JWT的数据结构以及签发过程"></a>一. <code>JWT</code>的数据结构以及签发过程</h5><p>一个<code>JWT</code>实际上是由三个部分组成：<code>header（头部）</code>、<code>payload（载荷）</code>和<code>signature（签名</code>）。这三个部分在<code>JWT</code>里面分别对应英文句号分隔出来的三个串：</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/jwt_oauth/jwt2.png?raw=true" alt="image"></p><p>先来看<code>header</code>部分的结构以及它的生成方法。<code>header</code>部分是由下面格式的 json 结构生成出来：</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/jwt_oauth/jwt3.png?raw=true" alt="image"></p><p>这个 json 中的<code>typ</code>属性，用来标识整个<code>token</code>字符串是一个<code>JWT</code>字符串；它的<code>alg</code>属性，用来说明这个<code>JWT</code>签发的时候所使用的签名和摘要算法，常用的值以及对应的算法如下：</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/jwt_oauth/jwt4.png?raw=true" alt="image"></p><p><code>typ</code>跟<code>alg</code>属性的全称其实是<code>type</code>跟<code>algorithm</code>，分别是类型跟算法的意思。之所以都用三个字母来表示，也是基于<code>JWT</code>最终字串大小的考虑，同时也是跟<code>JWT</code>这个名称保持一致，这样就都是三个字符了…<code>typ</code>跟<code>alg</code>是<code>JWT</code>中标准中规定的属性名称，虽然在签发<code>JWT</code>的时候，也可以把这两个名称换掉，但是如果随意更换了这个名称，就有可能在<code>JWT</code>验证的时候碰到问题，因为拿到<code>JWT</code>的人，默认会根据<code>typ</code>和<code>alg</code>去拿<code>JWT</code>中的<code>header</code>信息，当你改了名称之后，显然别人是拿不到<code>header</code>信息的，他又不知道你把这两个名字换成了什么。<code>JWT</code>作为标准的意义在于统一各方对同一个事情的处理方式，各个使用方都按它约定好的格式和方法来签发和验证<code>token</code>，这样即使运行的平台不一样，也能够保证<code>token</code>进行正确的传递。</p><p>一般签发<code>JWT</code>的时候，<code>header</code>对应的 json 结构只需要<code>typ</code>和<code>alg</code>属性就够了。<code>JWT</code>的<code>header</code>部分是把前面的 json 结构，经过 Base64Url 编码之后生成出来的：</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/jwt_oauth/jwt5.png?raw=true" alt="image"></p><p>（在线 base64 编码：<a href="http://www1.tc711.com/tool/BASE64.htm）" target="_blank" rel="noopener">http://www1.tc711.com/tool/BASE64.htm）</a></p><p>再来看<code>payload</code>部分的结构和生成过程。<code>payload</code>部分是由下面类似格式的 json 结构生成出来：</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/jwt_oauth/jwt6.png?raw=true" alt="image"></p><p><code>payload</code>的 json 结构并不像<code>header</code>那么简单，<code>payload</code>用来承载要传递的数据，它的 json 结构实际上是对<code>JWT</code>要传递的数据的一组声明，这些声明被<code>JWT</code>标准称为<code>claims</code>，它的一个“属性值对”其实就是一个<code>claim</code>，每一个<code>claim</code>的都代表特定的含义和作用。比如上面结构中的<code>sub</code>代表这个<code>token</code>的所有人，存储的是所有人的<code>ID</code>；<code>name</code>表示这个所有人的名字；<code>admin</code>表示所有人是否管理员的角色。当后面对<code>JWT</code>进行验证的时候，这些<code>claim</code>都能发挥特定的作用。</p><p>根据<code>JWT</code>的标准，这些<code>claims</code>可以分为以下三种类型：</p><ol><li><code>Reserved claims（保留）</code>，它的含义就像是编程语言的保留字一样，属于<code>JWT</code>标准里面规定的一些<code>claim</code>。<code>JWT</code>标准里面定好的<code>claim</code>有：</li></ol><p><code>iss(Issuser)</code>：代表这个 JWT 的签发主体；<br><code>sub(Subject)</code>：代表这个 JWT 的主体，即它的所有人；<br><code>aud(Audience)</code>：代表这个 JWT 的接收对象；<br><code>exp(Expiration time)</code>：是一个时间戳，代表这个 JWT 的过期时间；<br><code>nbf(Not Before)</code>：是一个时间戳，代表这个 JWT 生效的开始时间，意味着在这个时间之前验证 JWT 是会失败的；<br><code>iat(Issued at)</code>：是一个时间戳，代表这个 JWT 的签发时间；<br><code>jti(JWT ID)</code>：是 JWT 的唯一标识。</p><ol start="2"><li><p><code>Public claims</code>，略（不重要）</p></li><li><p><code>Private claims</code>，这个指的就是自定义的<code>claim</code>。比如前面那个结构举例中的<code>admin</code>和<code>name</code>都属于自定的<code>claim</code>。这些<code>claim</code>跟<code>JWT</code>标准规定的<code>claim</code>区别在于：<code>JWT</code>规定的<code>claim</code>，<code>JWT</code>的接收方在拿到<code>JWT</code>之后，都知道怎么对这些标准的<code>claim</code>进行验证；而<code>private claims</code>不会验证，除非明确告诉接收方要对这些 claim 进行验证以及规则才行。</p></li></ol><p>按照<code>JWT</code>标准的说明：保留的<code>claims</code>都是可选的，在生成<code>payload</code>不强制用上面的那些<code>claim</code>，你可以完全按照自己的想法来定义<code>payload</code>的结构，不过这样搞根本没必要：第一是，如果把<code>JWT</code>用于认证， 那么<code>JWT</code>标准内规定的几个<code>claim</code>就足够用了，甚至只需要其中一两个就可以了，假如想往<code>JWT</code>里多存一些用户业务信息，比如角色和用户名等，这倒是用自定义的<code>claim</code>来添加；第二是，<code>JWT</code>标准里面针对它自己规定的<code>claim</code>都提供了有详细的验证规则描述，每个实现库都会参照这个描述来提供<code>JWT</code>的验证实现，所以如果是自定义的<code>claim</code>名称，那么你用到的实现库就不会主动去验证这些<code>claim</code>。</p><p>最后也是把这个 json 结构做 base64url 编码之后，就能生成<code>payload</code>部分的串：</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/jwt_oauth/jwt7.png?raw=true" alt="image"></p><p>（在线 base64 编码：<a href="http://www1.tc711.com/tool/BASE64.htm）" target="_blank" rel="noopener">http://www1.tc711.com/tool/BASE64.htm）</a></p><p>最后看<code>signature</code>部分的生成过程。签名是把<code>header</code>和<code>payload</code>对应的 json 结构进行 base64url 编码之后得到的两个串用英文句点号拼接起来，然后根据<code>header</code>里面<code>alg</code>指定的签名算法生成出来的。算法不同，签名结果不同，但是不同的算法最终要解决的问题是一样的。以<code>alg: HS256</code>为例来说明前面的签名如何来得到。按照前面<code>alg</code>可用值的说明，HS256 其实包含的是两种算法：HMAC 算法和 SHA256 算法，前者用于生成摘要，后者用于对摘要进行数字签名。这两个算法也可以用 HMACSHA256 来统称。运用 HMACSHA256 实现<code>signature</code>的算法是：</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/jwt_oauth/jwt8.png?raw=true" alt="image"></p><p>正好找到一个在线工具能够测试这个签名算法的结果，比如我们拿前面的<code>header</code>和<code>payload</code>串来测试，并把“secret”这个字符串就当成密钥来测试：</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/jwt_oauth/jwt9.png?raw=true" alt="image"></p><p>（<a href="https://1024tools.com/hmac）" target="_blank" rel="noopener">https://1024tools.com/hmac）</a></p><p>最后的结果 B 其实就是 JWT 需要的 signature。不过对比我在介绍 JWT 的开始部分给出的 JWT 的举例：</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/jwt_oauth/jwt10.png?raw=true" alt="image"></p><p>会发现通过在线工具生成的<code>header</code>与<code>payload</code>都与这个举例中的对应部分相同，但是通过在线工具生成的<code>signature</code>与上面图中<code>的signature</code>有细微区别，在于最后是否有“=”字符。这个区别产生的原因在于上图中的<code>JWT</code>是通过<code>JWT</code>的实现库签发的<code>JWT</code>，这些实现库最后编码的时候都用的是 base64url 编码，而前面那些在线工具都是 bas64 编码，这两种编码方式不完全相同，导致编码结果有区别。</p><p>以上就是一个<code>JWT</code>包含的全部内容以及它的签发过程。接下来看看该如何去验证一个<code>JWT</code>是否为一个有效的<code>JWT</code>。</p><h5 id="二-JWT的验证过程"><a href="#二-JWT的验证过程" class="headerlink" title="二.JWT的验证过程"></a>二.<code>JWT</code>的验证过程</h5><p>这个部分介绍<code>JWT</code>的验证规则，主要包括签名验证和<code>payload</code>里面各个标准<code>claim</code>的验证逻辑介绍。只有验证成功的<code>JWT</code>，才能当做有效的凭证来使用。</p><p>先说签名验证。当接收方接收到一个<code>JWT</code>的时候，首先要对这个<code>JWT</code>的完整性进行验证，这个就是签名认证。它验证的方法其实很简单，只要把<code>header</code>做 base64url 解码，就能知道<code>JWT</code>用的什么算法做的签名，然后用这个算法，再次用同样的逻辑对<code>header</code>和<code>payload</code>做一次签名，并比较这个签名是否与<code>JWT</code>本身包含的第三个部分的串是否完全相同，只要不同，就可以认为这个<code>JWT</code>是一个被篡改过的串，自然就属于验证失败了。接收方生成签名的时候必须使用跟<code>JWT</code>发送方相同的密钥，意味着要做好密钥的安全传递或共享。</p><p>再来看<code>payload</code>的<code>claim</code>验证，拿前面标准的<code>claim</code>来一一说明：</p><p><code>iss(Issuser)</code>：如果签发的时候这个<code>claim</code>的值是“a.com”，验证的时候如果这个<code>claim</code>的值不是“a.com”就属于验证失败；<br><code>sub(Subject)</code>：如果签发的时候这个<code>claim</code>的值是“liuyunzhuge”，验证的时候如果这个<code>claim</code>的值不是“liuyunzhuge”就属于验证失败；<br><code>(Audience)</code>：如果签发的时候这个<code>claim</code>的值是“[‘b.com’,’c.com’]”，验证的时候这个<code>claim</code>的值至少要包含 b.com，c.com 的其中一个才能验证通过；<br><code>exp(Expiration time)</code>：如果验证的时候超过了这个<code>claim</code>指定的时间，就属于验证失败；<br><code>nbf(Not Before)</code>：如果验证的时候小于这个<code>claim</code>指定的时间，就属于验证失败；<br><code>iat(Issued at)</code>：它可以用来做一些 maxAge 之类的验证，假如验证时间与这个<code>claim</code>指定的时间相差的时间大于通过 maxAge 指定的一个值，就属于验证失败；<br><code>jti(JWT ID)</code>：如果签发的时候这个<code>claim</code>的值是“1”，验证的时候如果这个<code>claim</code>的值不是“1”就属于验证失败；<br>需要注意的是，在验证一个<code>JWT</code>的时候，签名认证是每个实现库都会自动做的，但是<code>payload</code>的认证是由使用者来决定的。因为<code>JWT</code>里面可能不会包含任何一个标准的<code>claim</code>，所以它不会自动去验证这些<code>claim</code>。</p><p>以登录认证来说，在签发<code>JWT</code>的时候，完全可以只用<code>sub</code>跟<code>exp</code>两个<code>claim</code>，用<code>sub</code>存储用户的<code>id</code>，用<code>exp</code>存储它本次登录之后的过期时间，然后在验证的时候仅验证<code>exp</code>这个<code>claim</code>，以实现会话的有效期管理。</p><h4 id="JWT-SSO"><a href="#JWT-SSO" class="headerlink" title="JWT SSO"></a><strong><em>JWT SSO</em></strong></h4><p>场景一：用户发起对业务系统的第一次访问，假设他第一次访问的是系统 A 的 some/page 这个页面，它最终成功访问到这个页面的过程是：</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/jwt_oauth/sso11.png?raw=true" alt="image"></p><p>在这个过程里面，我认为理解的关键点在于：</p><ol><li><p>它用到了两个<code>cookie</code>(<code>jwt</code>和<code>sid</code>)和三次重定向来完成会话的创建和会话的传递；</p></li><li><p><code>jwt</code>的<code>cookie</code>是写在 systemA.com 这个域下的，所以每次重定向到 systemA.com 的时候，<code>jwt</code>这个<code>cookie</code>只要有就会带过去；</p></li><li><p><code>sid</code>的<code>cookie</code>是写在 cas.com 这个域下的，所以每次重定向到 cas.com 的时候，<code>sid</code>这个<code>cookie</code>只要有就会带过去；</p></li><li><p>在验证<code>jwt</code>的时候，如何知道当前用户已经创建了 sso 的会话？<br>因为<code>jwt</code>的<code>payload</code>里面存储了之前创建的 sso 会话的<code>sessionid</code>，所以当 cas 拿到<code>jwt</code>，就相当于拿到了<code>sessionid</code>，然后用这个<code>sessionid</code>去判断有没有的对应的<code>session</code>对象即可。</p></li></ol><p>还要注意的是：CAS 服务里面的<code>session</code>属于服务端创建的对象，所以要考虑<code>sessionid</code>唯一性以及<code>session</code>共享（假如 CAS 采用集群部署的话）的问题。<code>sessionid</code>的唯一性可以通过用户名密码加随机数然后用 hash 算法如 md5 简单处理；<code>session</code>共享，可以用<code>memcached</code>或者<code>redis</code>这种专门的支持集群部署的缓存服务器管理<code>session</code>来处理。</p><p>由于服务端<code>session</code>具有生命周期的特点，到期需自动销毁，所以不要自己去写<code>session</code>的管理，免得引发其它问题，到 github 里找开源的缓存管理中间件来处理即可。存储<code>session</code>对象的时候，只要用<code>sessionid</code>作为 key，<code>session</code>对象本身作为<code>value</code>，存入缓存即可。<code>session</code>对象里面除了<code>sessionid</code>，还可以存放登录之后获取的用户信息等业务数据，方便业务系统调用的时候，从<code>session</code>里面返回会话数据。</p><p>场景二：用户登录之后，继续访问系统 A 的其它页面，如 some/page2，它的处理过程是：</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/jwt_oauth/sso2.png?raw=true" alt="image"></p><p>从这一步可以看出，即使登录之后，也要每次跟 CAS 校验<code>jwt</code>的有效性以及会话的有效性，其实<code>jwt</code>的有效性也可以放在业务系统里面处理的，但是会话的有效性就必须到 CAS 那边才能完成了。当 CAS 拿到<code>jwt</code>里面的<code>sessionid</code>之后，就能到<code>session</code>缓存服务器里面去验证该<code>sessionid</code>对应的<code>session</code>对象是否存在，不存在，就说明会话已经销毁了（退出）。</p><p>场景三：用户登录了系统 A 之后，再去访问其他系统如系统 B 的资源，比如系统 B 的 some/page，它最终能访问到系统 B 的 some/page 的流程是：</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/jwt_oauth/sso13.png?raw=true" alt="image"></p><p>这个过程的关键在于第一次重定向的时候，它会把<code>sid</code>这个<code>cookie</code>带回给 CAS 服务器，所以 CAS 服务器能够判断出会话是否已经建立，如果已经建立就跳过登录页的逻辑。</p><p>场景四：用户继续访问系统 B 的其它资源，如系统 B 的 some/page2：</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/jwt_oauth/sso4.png?raw=true" alt="image"></p><p>这个场景的逻辑跟场景二完全一致。</p><p>场景五：退出登录，假如它从系统 B 发起退出，最终的流程是：</p><p><img src="https://github.com/qliang0816/MarkdownImage/blob/master/jwt_oauth/sso5.png?raw=true" alt="image"></p><p>最重要的是要清除<code>sid</code>的<code>cookie</code>，<code>jwt</code>的<code>cookie</code>可能业务系统都有创建，所以不可能在退出的时候还挨个去清除那些系统的<code>cookie</code>，只要<code>sid</code>一清除，那么即使那些<code>jwt</code>的<code>cookie</code>在下次访问的时候还会被传递到业务系统的服务端，由于<code>jwt</code>里面的<code>sid</code>已经无效，所以最后还是会被重定向到 CAS 登录页进行处理。</p><p>方案总结<br>以上方案两个关键的前提：</p><ol><li>整个会话管理其实还是基于服务端的<code>session</code>来做的，只不过这个<code>session</code>只存在于 CAS 服务里面；</li><li>CAS 之所以信任业务系统的<code>jwt</code>，是因为这个<code>jwt</code>是 CAS 签发的，理论上只要认证通过，就可以认为这个<code>jwt</code>是合法的。</li></ol><p><code>jwt</code>本身是不可伪造，不可篡改的，但是不代表非法用户冒充正常用法发起请求，所以常规的几个安全策略在实际项目中都应该使用：</p><ol><li>使用 https</li><li>使用 http-only 的<code>cookie</code>，针对<code>sid</code>和<code>jwt</code></li><li>管理好密钥</li><li>防范 CSRF 攻击。</li></ol><p>尤其是 CSRF 攻击形式，很多都是钻代码的漏洞发生的，所以一旦出现 CSRF 漏洞，并且被人利用，那么别人就能用获得的<code>jwt</code>，冒充正常用户访问所有业务系统，这个安全问题的后果还是很严重的。考虑到这一点，为了在即使有漏洞的情况将损害减至最小，可以在<code>jwt</code>里面加入一个系统标识，添加一个验证，只有传过来的<code>jwt</code>内的系统标识与发起<code>jwt</code>验证请求的服务一致的情况下，才允许验证通过。这样的话，一个非法用户拿到某个系统的<code>jwt</code>，就不能用来访问其它业务系统了。</p><p>在业务系统跟 CAS 发起 attach/validate 请求的时候，也可以在 CAS 端做些处理，因为这个请求，在一次 SSO 过程中，一个系统只应该发一次，所以只要之前已经给这个系统签发过 jwt 了，那么后续 同一系统的 attach/validate 请求都可以忽略掉。</p><p>总的来说，这个方案的好处有：</p><ol><li>完全分布式，跨平台，CAS 以及业务系统均可采用不同的语言来开发；</li><li>业务系统如系统 A 和系统 B，可实现服务端无状态</li><li>假如是自己来实现，那么可以轻易的在 CAS 里面集成用户注册服务以及第三方登录服务，如微信登录等。</li></ol><p>它的缺陷是：</p><ol><li>第一次登录某个系统，需要三次重定向；</li><li>登录后的后续请求，每次都需要跟 CAS 进行会话验证，所以 CAS 的性能负载会比较大</li><li>登陆后的后续请求，每次都跟 CAS 交互，也会增加请求响应时间，影响用户体验。</li></ol><p>转载自:<br><a href="http://www.cnblogs.com/lyzg/p/6067766.html" target="_blank" rel="noopener">3 种 web 会话管理的方式</a><br><a href="https://www.cnblogs.com/lyzg/p/6132801.html" target="_blank" rel="noopener">看图理解 JWT 如何用于单点登录</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 单点登录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSO </tag>
            
            <tag> JWT </tag>
            
            <tag> 单点登陆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu定时备份数据库并发送邮件</title>
      <link href="/2018/05/18/ubuntu-ding-shi-bei-fen-shu-ju-ku-bing-fa-song-you-jian/"/>
      <url>/2018/05/18/ubuntu-ding-shi-bei-fen-shu-ju-ku-bing-fa-song-you-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="一、-安装-mail"><a href="#一、-安装-mail" class="headerlink" title="一、 安装 mail"></a>一、 安装 mail</h2><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul><li><code>sudo apt-get install heirloom-mailx</code></li></ul><h4 id="修改配置文件-etc-s-nail-rc-Ubuntu-，-etc-mail-rc-centOS"><a href="#修改配置文件-etc-s-nail-rc-Ubuntu-，-etc-mail-rc-centOS" class="headerlink" title="修改配置文件 /etc/s-nail.rc(Ubuntu)，/etc/mail.rc(centOS)"></a>修改配置文件 <code>/etc/s-nail.rc(Ubuntu)</code>，<code>/etc/mail.rc(centOS)</code></h4><ul><li><code>sudo vim /etc/s-nail.rc</code></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 在最后加上下面一部分</span><span class="token keyword">set</span> from<span class="token operator">=</span>example@163.com smtp<span class="token operator">=</span>smtp.163.com//此处以163邮箱举例，也可以使用qq邮箱，此时smtp<span class="token operator">=</span>smtp.exmail.qq.com//其他企业邮箱以自己公司邮箱服务器为准<span class="token keyword">set</span> smtp-auth-user<span class="token operator">=</span><span class="token string">"example@163.com"</span> smtp-auth-password<span class="token operator">=</span><span class="token string">"password"</span> smtp-auth<span class="token operator">=</span>login</code></pre><p>之后即可使用 mail 命令发送邮件，发送邮件有以下三种方式：</p><h6 id="方法一：交互形式发送邮件"><a href="#方法一：交互形式发送邮件" class="headerlink" title="方法一：交互形式发送邮件"></a>方法一：交互形式发送邮件</h6><p>mail + 邮箱地址<br>填写主题<br>填写内容<br>ctrl + d 结束输入<br>cc 代表抄送，回车完成发送</p><h6 id="方法二：通道形式发送"><a href="#方法二：通道形式发送" class="headerlink" title="方法二：通道形式发送"></a>方法二：通道形式发送</h6><p>echo “邮件内容” | mail -s “主题” 邮箱地址</p><h6 id="方法三：读取文件内容发送"><a href="#方法三：读取文件内容发送" class="headerlink" title="方法三：读取文件内容发送"></a>方法三：读取文件内容发送</h6><p>mail -s “主题” “邮箱地址” &lt; “path/filename”</p><h2 id="二、备份数据库"><a href="#二、备份数据库" class="headerlink" title="二、备份数据库"></a>二、备份数据库</h2><h4 id="此处不再赘述-详情可见docker-数据库备份"><a href="#此处不再赘述-详情可见docker-数据库备份" class="headerlink" title="此处不再赘述,详情可见docker 数据库备份"></a>此处不再赘述,详情可见<a href="https://www.bestqliang.com/#/article/18" target="_blank" rel="noopener">docker 数据库备份</a></h4><h2 id="三、编写-mail-脚本"><a href="#三、编写-mail-脚本" class="headerlink" title="三、编写 mail 脚本"></a>三、编写 mail 脚本</h2><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>data_dir<span class="token operator">=</span>/home/ubuntu/data/mysql_dumpreceive_email<span class="token operator">=</span>example@qq.com<span class="token keyword">echo</span> <span class="token string">"database backup"</span> <span class="token operator">|</span> /usr/bin/mail -s <span class="token string">"BackUp"</span> -a <span class="token variable">$data_dir</span>/data_<span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%Y%m%d<span class="token variable">`</span></span>.sql <span class="token variable">$receive_email</span></code></pre><h2 id="四、放到定时任务"><a href="#四、放到定时任务" class="headerlink" title="四、放到定时任务"></a>四、放到定时任务</h2><ul><li><code>crontab -e</code></li></ul><pre class=" language-bash"><code class="language-bash">0 23 * * * /bin/sh /home/ubuntu/shell/mysql_dumps.sh30 23 * * 7 /bin/sh /home/ubuntu/shell/send_email.sh</code></pre><h4 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h4><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实践 </tag>
            
            <tag> Docker </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker数据库备份</title>
      <link href="/2018/05/18/docker-shu-ju-ku-bei-fen/"/>
      <url>/2018/05/18/docker-shu-ju-ku-bei-fen/</url>
      
        <content type="html"><![CDATA[<h4 id="第一次备份脚本"><a href="#第一次备份脚本" class="headerlink" title="第一次备份脚本"></a>第一次备份脚本</h4><p>直接执行可以备份成功，当使用定时任务进行备份的时候，备份的文件为空，也就是说没有<code>mysqldump</code>出内容</p><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>docker_name<span class="token operator">=</span>mysql_containerdata_dir<span class="token operator">=</span>/home/ubuntu/mysql_dump/usr/bin/docker <span class="token function">exec</span> -it <span class="token variable">$docker_name</span> mysqldump -u username -p password --all-databases <span class="token operator">></span> <span class="token string">"<span class="token variable">$data_dir</span>/data_<span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%Y%m%d<span class="token variable">`</span></span>.sql"</span><span class="token function">find</span> <span class="token variable">$data_dir</span> -mtime +7 -name <span class="token string">'data_*.sql'</span> -exec <span class="token function">rm</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span></code></pre><h4 id="第二次备份脚本"><a href="#第二次备份脚本" class="headerlink" title="第二次备份脚本"></a>第二次备份脚本</h4><p>修改备份脚本，通过在容器内执行<code>mysqldump</code>，并备份到容器内<code>/var/local</code>目录下，再把此目录映射到宿主目录<code>/home/ubuntu/.data/mysql_dump</code>即可</p><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>docker_name<span class="token operator">=</span>mysql_containerdata_dir<span class="token operator">=</span>/home/ubuntu/.data/mysql_dump/usr/bin/docker <span class="token function">exec</span> <span class="token variable">$docker_name</span> sh -c <span class="token string">"mysqldump -u username -p password --all-databases > /var/local/data_<span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%Y%m%d<span class="token variable">`</span></span>.sql"</span><span class="token function">find</span> <span class="token variable">$data_dir</span> -mtime +7 -name <span class="token string">'data_*.sql'</span> -exec <span class="token function">sudo</span> <span class="token function">rm</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实践 </tag>
            
            <tag> 问题处理 </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue和jquery配合使用出现的问题</title>
      <link href="/2018/03/28/vue-he-jquery-pei-he-shi-yong-chu-xian-de-wen-ti/"/>
      <url>/2018/03/28/vue-he-jquery-pei-he-shi-yong-chu-xian-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<blockquote><p>按照官方文档<code>this.$nextTick</code>可以在dom渲染完成之后执行操作，于是出现了以下问题</p></blockquote><p>如图<br><img src="https://github.com/qliang0816/MarkdownImage/raw/master/vue_jquery/1.jpeg" alt="图片描述"></p><p><img src="https://github.com/qliang0816/MarkdownImage/raw/master/vue_jquery/2.jpeg" alt="图片描述"></p><ul><li>上图为列表部分，下图为vue部分</li><li>采用<code>watch</code>监听数据变化,然后用<code>this.$nextTick</code>等待dom渲染完成再执行方法</li></ul><p>预期得到这样的结果<br><img src="https://github.com/qliang0816/MarkdownImage/raw/master/vue_jquery/3.jpeg" alt="图片描述"></p><p>实际上得到的结果<br><img src="https://github.com/qliang0816/MarkdownImage/raw/master/vue_jquery/4.jpeg" alt="图片描述"></p><p>如果说在控制台执行方法，可以将上图变为预期结果<br><img src="https://github.com/qliang0816/MarkdownImage/raw/master/vue_jquery/5.jpeg" alt="图片描述"></p><ul><li>初看之下，似乎<code>this.$nextTick</code>并没有生效，但是实际上的确是dom渲染完成之后才执行的方法;</li><li>猜测原因是图片源是位于服务器端，而不在vue端，dom渲染完成，但是图片资源并没有加载完成，于是出现了这样的情况;</li><li>解决方案是设置定时器,如图</li></ul><p><img src="https://github.com/qliang0816/MarkdownImage/raw/master/vue_jquery/6.jpg" alt="图片描述"><br>采用这种方式延时等待图片资源加载完成，但是如果请求端网络情况较差，仍然会出现加载不全的情况，因此此方案也有一些不稳定性。</p><h4 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h4><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实践 </tag>
            
            <tag> 问题处理 </tag>
            
            <tag> Vue </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java中的集合区别</title>
      <link href="/2018/03/20/java-zhong-de-ji-he-qu-bie/"/>
      <url>/2018/03/20/java-zhong-de-ji-he-qu-bie/</url>
      
        <content type="html"><![CDATA[<h4 id="HashMap和HaspTable"><a href="#HashMap和HaspTable" class="headerlink" title="HashMap和HaspTable"></a>HashMap和HaspTable</h4><ul><li>1.历史原因<br>  HashTable是基于陈旧的Directionary类的，HashMap是在Java1.2引进的Map接口的一个实现。</li><li>2.同步性<br>  HashTable是同步的，这个类中的一些方法保证了HashTable的对象是线程安全的。而HashMap中的对象不是线程安全的。因为同步的要求会影响执行效率，所以如果不需要线程安全的集合那么使用HashMap时一个很好的选择，这样可以避免由于同步带来的不必要的性能开销，从而提高效率。</li><li>3.值<br>  HashMap可以让你将空值作为一个表的条目的key或value，但是HashTable是不能放入空值的(null)。</li></ul><h4 id="ArrayList和Vector"><a href="#ArrayList和Vector" class="headerlink" title="ArrayList和Vector"></a>ArrayList和Vector</h4><ul><li>1.同步性<br>  Vector是同步的。这个类中的一些方法保证了Vector中的对象是线程安全的。而ArrayList则是异步的，因此ArrayList中的对象不是线程安全的，所以如果不需要线程安全的集合那么使用ArrayList时一个很好的选择，这样可以避免由于同步带来的不必要的性能开销。</li><li>2.数据增长<br>  从内部实现机制来讲ArrayList和Vector都是使用数组来控制集合中的对象。当你向这两种类型中增加元素的时候，如果元素的数目超过内部数组目前的长度都需要扩展内部数组的长度，Vector缺省情况下自动增长原来一倍的数组长度，ArrayList是原来的50%，所以最后你获得的这个几个所占的空间总是比及实际需要的大。所以如果你要在集合中保存大量的数据那么使用Vector有一些优势，因为你可以通过设置集合的初始化大小来避免不必要的资源开销。</li></ul><h4 id="集合使用选择"><a href="#集合使用选择" class="headerlink" title="集合使用选择"></a>集合使用选择</h4><ul><li>1.如果要求线程安全，使用Vector,HashTable;</li><li>2.如果不要求线程安全，应该使用ArrayList，LinkedList，HashMap;</li><li>3.如果要求键值对，则使用HashMap，HashTable;</li><li>4.如果数据量很大，又要线程安全考虑Vector。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mycat实践</title>
      <link href="/2018/03/01/mycat-shi-jian/"/>
      <url>/2018/03/01/mycat-shi-jian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本次实践基于 ubuntu 系统;<br>mycat:1.6.5;<br>采用<code>docker</code>拉起 3 个<code>mysql</code>容器,端口分别位于 33061，33062，33063。</p></blockquote><h3 id="安装java"><a href="#安装java" class="headerlink" title="安装java"></a>安装<code>java</code></h3><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> openjdk-8-jdk-headless</code></pre><h3 id="安装mycat"><a href="#安装mycat" class="headerlink" title="安装mycat"></a>安装<code>mycat</code></h3><p>将<code>mycat</code>安装包解压到<code>/usr/local</code>下:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chown</span> -R <span class="token variable">$USER</span> /usr/local/mycat</code></pre><h3 id="启动mycat"><a href="#启动mycat" class="headerlink" title="启动mycat"></a>启动<code>mycat</code></h3><pre class=" language-bash"><code class="language-bash">/usr/local/mycat/bin/mycat start</code></pre><p>查看<code>logs/wrapper.log</code>监控启动状态</p><h3 id="使用mycat"><a href="#使用mycat" class="headerlink" title="使用mycat"></a>使用<code>mycat</code></h3><h5 id="1-配置-mycat"><a href="#1-配置-mycat" class="headerlink" title="1.配置 mycat"></a>1.配置 mycat</h5><ul><li>在<code>server.xml</code>中配置可访问用户:</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mycat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>mycat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>schemas<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>db1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span></code></pre><p>这里的<code>db1</code>必须是<code>schema.xml</code>中配置的，否则报错。</p><ul><li>在<code>schema.xml</code>中配置参数:</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype">&lt;!DOCTYPE mycat:schema SYSTEM "schema.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mycat:</span>schema</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>mycat</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://io.mycat/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    // schema标签的name对应server.xml中的schema    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>schema</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>db1<span class="token punctuation">"</span></span> <span class="token attr-name">checkSQLschema</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">sqlMaxLimit</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1000000<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">primaryKey</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">autoIncrement</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">dataNode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dn$1-3<span class="token punctuation">"</span></span> <span class="token attr-name">rule</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mod-long<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>schema</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dn1<span class="token punctuation">"</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node1<span class="token punctuation">"</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dn4<span class="token punctuation">"</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node1<span class="token punctuation">"</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dn7<span class="token punctuation">"</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node1<span class="token punctuation">"</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dn11<span class="token punctuation">"</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node1<span class="token punctuation">"</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dn2<span class="token punctuation">"</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node2<span class="token punctuation">"</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dn5<span class="token punctuation">"</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node2<span class="token punctuation">"</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dn8<span class="token punctuation">"</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node2<span class="token punctuation">"</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dn11<span class="token punctuation">"</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node2<span class="token punctuation">"</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dn3<span class="token punctuation">"</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node3<span class="token punctuation">"</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dn6<span class="token punctuation">"</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node3<span class="token punctuation">"</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dn9<span class="token punctuation">"</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node3<span class="token punctuation">"</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dn12<span class="token punctuation">"</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node3<span class="token punctuation">"</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    // dataHost的name对应dataNode中的dataHost    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataHost</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node1<span class="token punctuation">"</span></span> <span class="token attr-name">maxCon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span> <span class="token attr-name">minCon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">balance</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">writeType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">dbType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span> <span class="token attr-name">dbDriver</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>native<span class="token punctuation">"</span></span> <span class="token attr-name">switchType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>  <span class="token attr-name">slaveThreshold</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>heartbeat</span><span class="token punctuation">></span></span>select user()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>heartbeat</span><span class="token punctuation">></span></span>        // 在这里配置docker拉起来的3个容器        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>writeHost</span> <span class="token attr-name">host</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hostM1<span class="token punctuation">"</span></span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>192.168.1.5:33061<span class="token punctuation">"</span></span> <span class="token attr-name">user</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span> <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>writeHost</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataHost</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataHost</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node2<span class="token punctuation">"</span></span> <span class="token attr-name">maxCon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span> <span class="token attr-name">minCon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">balance</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">writeType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">dbType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span> <span class="token attr-name">dbDriver</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>native<span class="token punctuation">"</span></span> <span class="token attr-name">switchType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>  <span class="token attr-name">slaveThreshold</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>heartbeat</span><span class="token punctuation">></span></span>select user()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>heartbeat</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>writeHost</span> <span class="token attr-name">host</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hostM2<span class="token punctuation">"</span></span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>192.168.1.5:33062<span class="token punctuation">"</span></span> <span class="token attr-name">user</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span> <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>writeHost</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataHost</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataHost</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node3<span class="token punctuation">"</span></span> <span class="token attr-name">maxCon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span> <span class="token attr-name">minCon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">balance</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">writeType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">dbType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span> <span class="token attr-name">dbDriver</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>native<span class="token punctuation">"</span></span> <span class="token attr-name">switchType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>  <span class="token attr-name">slaveThreshold</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>heartbeat</span><span class="token punctuation">></span></span>select user()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>heartbeat</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>writeHost</span> <span class="token attr-name">host</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hostM3<span class="token punctuation">"</span></span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>192.168.1.5:33063<span class="token punctuation">"</span></span> <span class="token attr-name">user</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span> <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>writeHost</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataHost</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mycat:</span>schema</span><span class="token punctuation">></span></span></code></pre><ul><li>进入 mycat 数据库层:</li></ul><pre class=" language-bash"><code class="language-bash">root@063b64a0619f:/<span class="token comment" spellcheck="true"># mysql -u mycat -p -P 8066 -h HOST</span></code></pre><p>此处<code>HOST</code>为<code>mycat</code>安装所在的 ip。</p><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+</span><span class="token operator">|</span> <span class="token keyword">DATABASE</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+</span><span class="token operator">|</span> <span class="token number">db1</span>      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span></code></pre><p>这里的 db1 是 schema 标签中对应的名称，这是一个虚拟库。</p><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">use</span> <span class="token number">db1</span><span class="token punctuation">;</span>Reading <span class="token keyword">table</span> information <span class="token keyword">for</span> completion <span class="token keyword">of</span> <span class="token keyword">table</span> <span class="token operator">and</span> <span class="token keyword">column</span> namesYou can turn <span class="token keyword">off</span> this feature <span class="token keyword">to</span> get <span class="token number">a</span> quicker startup <span class="token keyword">with</span> <span class="token operator">-</span>A<span class="token keyword">Database</span> changedmysql<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------+</span><span class="token operator">|</span> <span class="token keyword">Tables</span> <span class="token operator">in</span> datacache        <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------+</span><span class="token operator">|</span> <span class="token keyword">user</span>                       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------+</span><span class="token number">5</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span></code></pre><p>这里的 user 表实际上目前也是个虚拟表，只有当在子节点中创建表之后，这个表才有意义。</p><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token punctuation">(</span>    <span class="token operator">-</span><span class="token operator">></span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'ID'</span><span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span>  <span class="token punctuation">`</span>created_at<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span>MyISAM <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected<span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span></code></pre><p>1.这里的<code>id</code>不采用 int 类型，是因为我采用的全局序列是默认的本地时间戳方式，int 长度不够;<br>2.这里创建表结构，必须在对用的所有 dataNode 上创建相同的表，如果只是在 mycat 库中创建，只会在第一个 dataNode 中创建成功，并不能在所有 dataNode 中一起创建，我想这是 mycat 仍然会进行优化的地方吧。</p><ul><li>插入数据:</li></ul><pre class=" language-sql"><code class="language-sql"> mysql<span class="token operator">></span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span><span class="token keyword">date</span><span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'mycat'</span><span class="token punctuation">,</span><span class="token string">'2017-10-10'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span></code></pre><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------+---------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name  <span class="token operator">|</span> created_at          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------+---------------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> mycat <span class="token operator">|</span> <span class="token number">2018</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">07</span>:<span class="token number">12</span>:<span class="token number">26</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------+---------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span></code></pre><p>1.当插入多条数据时，数据会根据<code>mod-long</code>的分片方式分散到不同节点上;<br>2.如果以时间维度作为筛选条件,会遍历所有节点，所以，根据我的业务需求，我将分片方式改为<code>sharding-by-month</code>。</p><blockquote><p>原本是分布在 3 个节点上的相同 database 上，但是发现当我插入一条数据，就会产生 3 条数据;<br>解决方式是分布到不同的 database 上。</p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>schema</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>db1<span class="token punctuation">"</span></span> <span class="token attr-name">checkSQLschema</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">sqlMaxLimit</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1000000<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">primaryKey</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">autoIncrement</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">dataNode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dn$1-12<span class="token punctuation">"</span></span> <span class="token attr-name">rule</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sharding-by-month<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>schema</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dn1<span class="token punctuation">"</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node1<span class="token punctuation">"</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dn4<span class="token punctuation">"</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node1<span class="token punctuation">"</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node2<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dn7<span class="token punctuation">"</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node1<span class="token punctuation">"</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node3<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dn11<span class="token punctuation">"</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node1<span class="token punctuation">"</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node4<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dn2<span class="token punctuation">"</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node2<span class="token punctuation">"</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dn5<span class="token punctuation">"</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node2<span class="token punctuation">"</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node2<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dn8<span class="token punctuation">"</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node2<span class="token punctuation">"</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node3<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dn11<span class="token punctuation">"</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node2<span class="token punctuation">"</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node4<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dn3<span class="token punctuation">"</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node3<span class="token punctuation">"</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dn6<span class="token punctuation">"</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node3<span class="token punctuation">"</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node2<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dn9<span class="token punctuation">"</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node3<span class="token punctuation">"</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node3<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dn12<span class="token punctuation">"</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node3<span class="token punctuation">"</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>node4<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>这样虽然需要创建 12 个 database，数据准确性问题得到解决。</p><h3 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 实践 </tag>
            
            <tag> Mycat </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue代理</title>
      <link href="/2018/02/24/vue-dai-li/"/>
      <url>/2018/02/24/vue-dai-li/</url>
      
        <content type="html"><![CDATA[<ul><li>使用<code>vue-cli</code>调接口的时候，总是会出现跨域问题，在<code>vue-cli</code>中，有关于<code>proxyTable</code>，这个配置就是将 localhost 映射成访问的域名。</li></ul><p>那么何为代理？</p><ul><li>代理服务器英文全称是 Proxy Server，其功能就是代理网络用户去取得网络信息。形象的说：它是网络信息的中转站。</li></ul><p>那么在 vue 里，如何设置代理？</p><ul><li><p>1.config 目录找到 index.js</p></li><li><p>2.在 dev 里添加 proxyTable</p></li></ul><pre class=" language-js"><code class="language-js">proxyTable<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'/'</span><span class="token punctuation">:</span><span class="token punctuation">{</span>        target<span class="token punctuation">:</span><span class="token string">'http://localhost:3000'</span><span class="token punctuation">,</span>        changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        pathRewrite<span class="token punctuation">:</span><span class="token punctuation">{</span>          <span class="token string">'^/'</span><span class="token punctuation">:</span><span class="token string">'/'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>这样我们在写 url 的时候，只用写成/test/1 就可以代表<a href="http://localhost:3000/test/1" target="_blank" rel="noopener">http://localhost:3000/test/1</a>.</p><p>这一步为止，重新<code>npm start</code>。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 实践 </tag>
            
            <tag> 问题处理 </tag>
            
            <tag> Vue </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql分区</title>
      <link href="/2017/12/14/mysql-fen-qu/"/>
      <url>/2017/12/14/mysql-fen-qu/</url>
      
        <content type="html"><![CDATA[<h2 id="一、什么是数据库分区"><a href="#一、什么是数据库分区" class="headerlink" title="一、什么是数据库分区"></a>一、什么是数据库分区</h2><ul><li>mysql 数据库中的数据是以文件的形势存在磁盘上的，默认放在/mysql/data 下面（可以通过 my.cnf 中的 datadir 来查看），一张表主要对应着三个文件，一个是 frm 存放表结构的，一个是 myd 存放表数据的，一个是 myi 存表索引的。如果一张表的数据量太大的话，那么 myd,myi 就会变的很大，查找数据就会变的很慢。</li><li>这个时候我们可以利用 mysql 的分区功能，在物理上将这一张表对应的三个文件，分割成许多个小块，我们查找一条数据时，就不用全部查找了，只要知道这条数据在哪一块，然后在那一块找就行了。如果表的数据太大，可能一个磁盘放不下，这个时候，我们可以把数据分配到不同的磁盘里面去。</li></ul><h5 id="分区的二种方式"><a href="#分区的二种方式" class="headerlink" title="分区的二种方式"></a>分区的二种方式</h5><h6 id="1、横向分区"><a href="#1、横向分区" class="headerlink" title="1、横向分区"></a>1、横向分区</h6><blockquote><p>举例来说明，假如有 100W 条数据，分成十份，前 10W 条数据放到第一个分区，第二个 10W 条数据放到第二个分区，依此类推。也就是把表分成了十分，和 merge 来分表类似。表的结构并没有变化。</p></blockquote><h6 id="2、纵向分区"><a href="#2、纵向分区" class="headerlink" title="2、纵向分区"></a>2、纵向分区</h6><blockquote><p>举例来说明，在设计用户表的时候，开始的时候没有考虑好，而把个人的所有信息都放到了一张表里面去，这样这个表里面就会有比较大的字段，分区的时候，可以把这样的大字段，分开来。</p></blockquote><h2 id="二、mysql-的分区"><a href="#二、mysql-的分区" class="headerlink" title="二、mysql 的分区"></a>二、mysql 的分区</h2><h6 id="1、mysql5-1-及以上支持分区功能"><a href="#1、mysql5-1-及以上支持分区功能" class="headerlink" title="1、mysql5.1 及以上支持分区功能"></a>1、mysql5.1 及以上支持分区功能</h6><blockquote><p>安装安装的时候，我们就可以查看一下</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token punctuation">[</span>root<span class="token variable">@BlackGhost</span> mysql<span class="token number">-5.1</span><span class="token punctuation">.</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ./configure --help |grep -A 3 Partition</span> <span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span> <span class="token keyword">Partition</span> Support <span class="token operator">=</span><span class="token operator">=</span><span class="token operator">=</span> Plugin Name:      <span class="token keyword">partition</span> Description:      MySQL Partitioning Support Supports build:   static Configurations:   max<span class="token punctuation">,</span> max<span class="token operator">-</span><span class="token keyword">no</span><span class="token operator">-</span>ndb</code></pre><blockquote><p>查看一下，如果发现有上面这个东西，说明他是支持分区的，默认是打开的。如果你已经安装过了 mysql 的话。</p></blockquote><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">"%part%"</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------+-------+</span><span class="token operator">|</span> Variable_name     <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------+-------+</span><span class="token operator">|</span> have_partitioning <span class="token operator">|</span> YES   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------+-------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span></code></pre><blockquote><p>查看一下变量，如果支持的话，会有上面的提示的。</p></blockquote><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SHOW</span> PLUGINS<span class="token punctuation">;</span></code></pre><blockquote><p>显示所有插件，如果有 partition ACTIVE STORAGE ENGINE GPL 插件则表明支持分区。</p></blockquote><h6 id="2、range-分区"><a href="#2、range-分区" class="headerlink" title="2、range 分区"></a>2、range 分区</h6><blockquote><p>按照 RANGE 分区的表是通过如下一种方式进行分区的，每个分区包含那些分区表达式的值位于一个给定的连续区间内的行。</p></blockquote><pre class=" language-sql"><code class="language-sql">创建range分区表<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token punctuation">(</span>    <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户ID'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'名称'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>sex<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'0为男，1为女'</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span>MyISAM  <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">1</span>    <span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">(</span>    <span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">DATA</span> DIRECTORY <span class="token operator">=</span> <span class="token string">'/data01/data'</span>    <span class="token keyword">INDEX</span> DIRECTORY <span class="token operator">=</span> <span class="token string">'/data02/idx'</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 数据文件位置和索引文件位置分开</span>    <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>    <span class="token keyword">DATA</span> DIRECTORY <span class="token operator">=</span> <span class="token string">'/data11/data'</span>    <span class="token keyword">INDEX</span> DIRECTORY <span class="token operator">=</span> <span class="token string">'/data12/idx'</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>    <span class="token keyword">DATA</span> DIRECTORY <span class="token operator">=</span> <span class="token string">'/data21/data'</span>    <span class="token keyword">INDEX</span> DIRECTORY <span class="token operator">=</span> <span class="token string">'/data22/idx'</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p3 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>    <span class="token keyword">DATA</span> DIRECTORY <span class="token operator">=</span> <span class="token string">'/data31/data'</span>    <span class="token keyword">INDEX</span> DIRECTORY <span class="token operator">=</span> <span class="token string">'/data32/idx'</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p4 <span class="token keyword">VALUES</span> LESS THAN MAXVALUE    <span class="token keyword">DATA</span> DIRECTORY <span class="token operator">=</span> <span class="token string">'/data41/data'</span>    <span class="token keyword">INDEX</span> DIRECTORY <span class="token operator">=</span> <span class="token string">'/data42/idx'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql">插入一些数据<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>test<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token punctuation">,</span><span class="token punctuation">`</span>sex<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'tank'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'zhang'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'ying'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'张'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'映'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'test1'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'tank2'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'tank1'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'test2'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'test3'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'test4'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'test5'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'tank3'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'tank4'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'tank5'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'tank6'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'tank7'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'tank8'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'tank9'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'tank10'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'tank11'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'tank12'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'tank13'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'tank21'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'tank42'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql">到存放数据库表文件的地方看一下，my<span class="token punctuation">.</span>cnf里面有配置，datadir后面就是<span class="token punctuation">[</span>root<span class="token variable">@BlackGhost</span> test<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls |grep user |xargs du -sh</span>    <span class="token number">4</span><span class="token punctuation">.</span>0K    <span class="token keyword">user</span><span class="token comment" spellcheck="true">#P#p0.MYD</span>    <span class="token number">4</span><span class="token punctuation">.</span>0K    <span class="token keyword">user</span><span class="token comment" spellcheck="true">#P#p0.MYI</span>    <span class="token number">4</span><span class="token punctuation">.</span>0K    <span class="token keyword">user</span><span class="token comment" spellcheck="true">#P#p1.MYD</span>    <span class="token number">4</span><span class="token punctuation">.</span>0K    <span class="token keyword">user</span><span class="token comment" spellcheck="true">#P#p1.MYI</span>    <span class="token number">4</span><span class="token punctuation">.</span>0K    <span class="token keyword">user</span><span class="token comment" spellcheck="true">#P#p2.MYD</span>    <span class="token number">4</span><span class="token punctuation">.</span>0K    <span class="token keyword">user</span><span class="token comment" spellcheck="true">#P#p2.MYI</span>    <span class="token number">4</span><span class="token punctuation">.</span>0K    <span class="token keyword">user</span><span class="token comment" spellcheck="true">#P#p3.MYD</span>    <span class="token number">4</span><span class="token punctuation">.</span>0K    <span class="token keyword">user</span><span class="token comment" spellcheck="true">#P#p3.MYI</span>    <span class="token number">4</span><span class="token punctuation">.</span>0K    <span class="token keyword">user</span><span class="token comment" spellcheck="true">#P#p4.MYD</span>    <span class="token number">4</span><span class="token punctuation">.</span>0K    <span class="token keyword">user</span><span class="token comment" spellcheck="true">#P#p4.MYI</span>    <span class="token number">12</span><span class="token punctuation">.</span>0K   <span class="token keyword">user</span><span class="token punctuation">.</span>frm    <span class="token number">4</span><span class="token punctuation">.</span>0K    <span class="token keyword">user</span><span class="token punctuation">.</span>par</code></pre><pre class=" language-sql"><code class="language-sql">取出数据mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">as</span> count <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+</span><span class="token operator">|</span> count <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+</span><span class="token operator">|</span>    <span class="token number">25</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span></code></pre><pre class=" language-sql"><code class="language-sql">删除第四个分区mysql<span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token keyword">user</span> <span class="token keyword">drop</span> <span class="token keyword">partition</span> p4<span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.11</span> sec<span class="token punctuation">)</span>Records: <span class="token number">0</span>  Duplicates: <span class="token number">0</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span></code></pre><pre class=" language-sql"><code class="language-sql">存放在分区里面的数据丢失了，第四个分区里面有<span class="token number">14</span>条数据，剩下的<span class="token number">3</span>个分区只有<span class="token number">11</span>条数据，但是统计出来的文件大小都是<span class="token number">4</span><span class="token punctuation">.</span>0K，从这儿我们可以看出分区的最小区块是4K。mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">as</span> count <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+</span><span class="token operator">|</span> count <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+</span><span class="token operator">|</span>    <span class="token number">11</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span></code></pre><pre class=" language-sql"><code class="language-sql">第四个区块已删除<span class="token punctuation">[</span>root<span class="token variable">@BlackGhost</span> test<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls |grep user |xargs du -sh</span>    <span class="token number">4</span><span class="token punctuation">.</span>0K    <span class="token keyword">user</span><span class="token comment" spellcheck="true">#P#p0.MYD</span>    <span class="token number">4</span><span class="token punctuation">.</span>0K    <span class="token keyword">user</span><span class="token comment" spellcheck="true">#P#p0.MYI</span>    <span class="token number">4</span><span class="token punctuation">.</span>0K    <span class="token keyword">user</span><span class="token comment" spellcheck="true">#P#p1.MYD</span>    <span class="token number">4</span><span class="token punctuation">.</span>0K    <span class="token keyword">user</span><span class="token comment" spellcheck="true">#P#p1.MYI</span>    <span class="token number">4</span><span class="token punctuation">.</span>0K    <span class="token keyword">user</span><span class="token comment" spellcheck="true">#P#p2.MYD</span>    <span class="token number">4</span><span class="token punctuation">.</span>0K    <span class="token keyword">user</span><span class="token comment" spellcheck="true">#P#p2.MYI</span>    <span class="token number">4</span><span class="token punctuation">.</span>0K    <span class="token keyword">user</span><span class="token comment" spellcheck="true">#P#p3.MYD</span>    <span class="token number">4</span><span class="token punctuation">.</span>0K    <span class="token keyword">user</span><span class="token comment" spellcheck="true">#P#p3.MYI</span>    <span class="token number">12</span><span class="token punctuation">.</span>0K   <span class="token keyword">user</span><span class="token punctuation">.</span>frm    <span class="token number">4</span><span class="token punctuation">.</span>0K    <span class="token keyword">user</span><span class="token punctuation">.</span>par</code></pre><pre class=" language-sql"><code class="language-sql">可以对现有表进行分区<span class="token punctuation">,</span>并且会按規则自动的将表中的数据分配相应的分区中，这样就比较好了，可以省去很多事情，看下面的操作<span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token number">aa</span> <span class="token keyword">partition</span> <span class="token keyword">by</span> RANGE<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">(</span>    <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> less than <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> less than <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p3 <span class="token keyword">VALUES</span> less than MAXVALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//对15数据进行分区</span></code></pre><pre class=" language-sql"><code class="language-sql">总共有<span class="token number">15</span>条mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token number">aa</span><span class="token punctuation">;</span>    <span class="token operator">+</span><span class="token comment" spellcheck="true">----------+</span>    <span class="token operator">|</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">|</span>    <span class="token operator">+</span><span class="token comment" spellcheck="true">----------+</span>    <span class="token operator">|</span>       <span class="token number">15</span> <span class="token operator">|</span>    <span class="token operator">+</span><span class="token comment" spellcheck="true">----------+</span>    <span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span></code></pre><pre class=" language-sql"><code class="language-sql">删除一个分区mysql<span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token number">aa</span> <span class="token keyword">drop</span> <span class="token keyword">partition</span> p2<span class="token punctuation">;</span>    Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.30</span> sec<span class="token punctuation">)</span>    Records: <span class="token number">0</span>  Duplicates: <span class="token number">0</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span></code></pre><pre class=" language-sql"><code class="language-sql">只有<span class="token number">11</span>条了，说明对现有的表分区成功了mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token number">aa</span><span class="token punctuation">;</span>    <span class="token operator">+</span><span class="token comment" spellcheck="true">----------+</span>    <span class="token operator">|</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">|</span>    <span class="token operator">+</span><span class="token comment" spellcheck="true">----------+</span>    <span class="token operator">|</span>       <span class="token number">11</span> <span class="token operator">|</span>    <span class="token operator">+</span><span class="token comment" spellcheck="true">----------+</span>    <span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span></code></pre><h6 id="3、list-分区"><a href="#3、list-分区" class="headerlink" title="3、list 分区"></a>3、list 分区</h6><blockquote><p>LIST 分区中每个分区的定义和选择是基于某列的值从属于一个值列表集中的一个值，而 RANGE 分区是从属于一个连续区间值的集合。</p></blockquote><pre class=" language-sql"><code class="language-sql">这种方式失败<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>list_part<span class="token punctuation">`</span> <span class="token punctuation">(</span>    <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户ID'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>province_id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'省'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'名称'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>sex<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'0为男，1为女'</span><span class="token punctuation">,</span>     <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span>  <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">1</span>    <span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> LIST <span class="token punctuation">(</span>province_id<span class="token punctuation">)</span> <span class="token punctuation">(</span>    <span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p3 <span class="token keyword">VALUES</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ERROR <span class="token number">1503</span> <span class="token punctuation">(</span>HY000<span class="token punctuation">)</span>: A <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> must include <span class="token keyword">all</span> <span class="token keyword">columns</span> <span class="token operator">in</span> the <span class="token keyword">table</span>'s partitioning <span class="token keyword">function</span></code></pre><pre class=" language-sql"><code class="language-sql">这种方式成功<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>list_part<span class="token punctuation">`</span> <span class="token punctuation">(</span>    <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>  <span class="token keyword">COMMENT</span> <span class="token string">'用户ID'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>province_id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'省'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'名称'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>sex<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'0为男，1为女'</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span>  <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8    <span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> LIST <span class="token punctuation">(</span>province_id<span class="token punctuation">)</span> <span class="token punctuation">(</span>   <span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token keyword">PARTITION</span> p3 <span class="token keyword">VALUES</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.33</span> sec<span class="token punctuation">)</span></code></pre><blockquote><p>上面的这个创建 list 分区时，如果有主键的话，分区时主键必须在其中，不然就会报错。如果我不用主键，分区就创建成功了，一般情况下，一个张表肯定会有一个主键，这算是一个分区的局限性吧。</p></blockquote><blockquote><p>如果对数据进行测试，请参考 range 分区的测试来操作。</p></blockquote><h6 id="4、hash-分区"><a href="#4、hash-分区" class="headerlink" title="4、hash 分区"></a>4、hash 分区</h6><blockquote><p>HASH 分区主要用来确保数据在预先确定数目的分区中平均分布，你所要做的只是基于将要被哈希的列值指定一个列值或表达式，以及指定被分区的表将要被分割成的分区数量。</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>hash_part<span class="token punctuation">`</span> <span class="token punctuation">(</span>    <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'评论ID'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span><span class="token keyword">comment</span><span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'评论'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>ip<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'来源IP'</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span>  <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">1</span>    <span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token keyword">HASH</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>    PARTITIONS <span class="token number">3</span><span class="token punctuation">;</span></code></pre><blockquote><p>测试请参考 range 分区的操作。</p></blockquote><h6 id="5、key-分区"><a href="#5、key-分区" class="headerlink" title="5、key 分区"></a>5、key 分区</h6><blockquote><p>按照 KEY 进行分区类似于按照 HASH 分区，除了 HASH 分区使用的用户定义的表达式，而 KEY 分区的哈希函数是由 MySQL 服务器提供。</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>key_part<span class="token punctuation">`</span> <span class="token punctuation">(</span>    <span class="token punctuation">`</span>news_id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>  <span class="token keyword">COMMENT</span> <span class="token string">'新闻ID'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>content<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'新闻内容'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>u_id<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'来源IP'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0000-00-00 00:00:00'</span> <span class="token keyword">COMMENT</span> <span class="token string">'时间'</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span>  <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8    <span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> LINEAR <span class="token keyword">HASH</span><span class="token punctuation">(</span>YEAR<span class="token punctuation">(</span>create_time<span class="token punctuation">)</span><span class="token punctuation">)</span>    PARTITIONS <span class="token number">3</span><span class="token punctuation">;</span></code></pre><blockquote><p>测试请参考 range 分区的操作。</p></blockquote><h6 id="6、子分区"><a href="#6、子分区" class="headerlink" title="6、子分区"></a>6、子分区</h6><blockquote><p>子分区是分区表中每个分区的再次分割，子分区既可以使用 HASH 希分区，也可以使用 KEY 分区。这 也被称为复合分区（composite partitioning）。</p></blockquote><blockquote><p>1，如果一个分区中创建了子分区，其他分区也要有子分区 <br><br>2，如果创建了了分区，每个分区中的子分区数必有相同 <br><br>3，同一分区内的子分区，名字不相同，不同分区内的子分区名子可以相同（5.1.50 不适用）</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>sub_part<span class="token punctuation">`</span> <span class="token punctuation">(</span>    <span class="token punctuation">`</span>news_id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>  <span class="token keyword">COMMENT</span> <span class="token string">'新闻ID'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>content<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'新闻内容'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>u_id<span class="token punctuation">`</span>  <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> 0s <span class="token keyword">COMMENT</span> <span class="token string">'来源IP'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">DATE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0000-00-00 00:00:00'</span> <span class="token keyword">COMMENT</span> <span class="token string">'时间'</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span>  <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8    <span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE<span class="token punctuation">(</span>YEAR<span class="token punctuation">(</span>create_time<span class="token punctuation">)</span><span class="token punctuation">)</span>    SUBPARTITION <span class="token keyword">BY</span> <span class="token keyword">HASH</span><span class="token punctuation">(</span>TO_DAYS<span class="token punctuation">(</span>create_time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>    <span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">1990</span><span class="token punctuation">)</span><span class="token punctuation">(</span>SUBPARTITION s0<span class="token punctuation">,</span>SUBPARTITION s1<span class="token punctuation">,</span>SUBPARTITION s2<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">(</span>SUBPARTITION s3<span class="token punctuation">,</span>SUBPARTITION s4<span class="token punctuation">,</span>SUBPARTITION good<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN MAXVALUE<span class="token punctuation">(</span>SUBPARTITION tank0<span class="token punctuation">,</span>SUBPARTITION tank1<span class="token punctuation">,</span>SUBPARTITION tank3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>官方网站说不同分区内的子分区可以有相同的名字，但是 mysql5.1.50 却不行会提示以下错误。 <br><br>ERROR 1517 (HY000): Duplicate partition name s1</p></blockquote><h2 id="三、分区管理"><a href="#三、分区管理" class="headerlink" title="三、分区管理"></a>三、分区管理</h2><h6 id="1、删除分区"><a href="#1、删除分区" class="headerlink" title="1、删除分区"></a>1、删除分区</h6><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token keyword">user</span> <span class="token keyword">drop</span> <span class="token keyword">partition</span> p4<span class="token punctuation">;</span></code></pre><h6 id="2、新增分区"><a href="#2、新增分区" class="headerlink" title="2、新增分区"></a>2、新增分区</h6><pre class=" language-sql"><code class="language-sql">range添加新分区mysql<span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token keyword">user</span> <span class="token keyword">add</span> <span class="token keyword">partition</span><span class="token punctuation">(</span><span class="token keyword">partition</span> p4 <span class="token keyword">values</span> less than MAXVALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.06</span> sec<span class="token punctuation">)</span>Records: <span class="token number">0</span>  Duplicates: <span class="token number">0</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span></code></pre><pre class=" language-sql"><code class="language-sql">list添加新分区mysql<span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">table</span> list_part <span class="token keyword">add</span> <span class="token keyword">partition</span><span class="token punctuation">(</span><span class="token keyword">partition</span> p4 <span class="token keyword">values</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>Records: <span class="token number">0</span>  Duplicates: <span class="token number">0</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">hash</span>添加新分区mysql<span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">table</span> hash_part <span class="token keyword">add</span> <span class="token keyword">partition</span> partitions <span class="token number">4</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.12</span> sec<span class="token punctuation">)</span>Records: <span class="token number">0</span>  Duplicates: <span class="token number">0</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">key</span>添加新分区mysql<span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">table</span> key_part <span class="token keyword">add</span> <span class="token keyword">partition</span> partitions <span class="token number">4</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.06</span> sec<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//有数据也会被重新分配</span>Records: <span class="token number">1</span>  Duplicates: <span class="token number">0</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span></code></pre><pre class=" language-sql"><code class="language-sql">子分区添加新分区，虽然我没有指定子分区，但是系统会给子分区命名的mysql<span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">table</span> sub1_part <span class="token keyword">add</span> <span class="token keyword">partition</span><span class="token punctuation">(</span><span class="token keyword">partition</span> p3 <span class="token keyword">values</span> less than MAXVALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.02</span> sec<span class="token punctuation">)</span>Records: <span class="token number">0</span>  Duplicates: <span class="token number">0</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span></code></pre><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> sub1_part\G<span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">.</span> <span class="token keyword">row</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token keyword">Table</span>: sub1_part<span class="token keyword">create</span> <span class="token keyword">Table</span>: <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>sub1_part<span class="token punctuation">`</span> <span class="token punctuation">(</span>    <span class="token punctuation">`</span>news_id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'新闻ID'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>content<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'新闻内容'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>u_id<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'来源IP'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">date</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0000-00-00'</span> <span class="token keyword">COMMENT</span> <span class="token string">'时间'</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8    <span class="token operator">!</span><span class="token number">50100</span> <span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE <span class="token punctuation">(</span>YEAR<span class="token punctuation">(</span>create_time<span class="token punctuation">)</span><span class="token punctuation">)</span>    SUBPARTITION <span class="token keyword">BY</span> <span class="token keyword">HASH</span> <span class="token punctuation">(</span>TO_DAYS<span class="token punctuation">(</span>create_time<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">1990</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span>SUBPARTITION s0 <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span><span class="token punctuation">,</span>    SUBPARTITION s1 <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span><span class="token punctuation">,</span>    SUBPARTITION s2 <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span>SUBPARTITION s3 <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span><span class="token punctuation">,</span>    SUBPARTITION s4 <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span><span class="token punctuation">,</span>    SUBPARTITION good <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span>SUBPARTITION tank0 <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span><span class="token punctuation">,</span>    SUBPARTITION tank1 <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span><span class="token punctuation">,</span>    SUBPARTITION tank3 <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p3 <span class="token keyword">VALUES</span> LESS THAN MAXVALUE    <span class="token punctuation">(</span>SUBPARTITION p3sp0 <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//子分区的名子是自动生成的</span>    SUBPARTITION p3sp1 <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span><span class="token punctuation">,</span>    SUBPARTITION p3sp2 <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h6 id="3、重新分区"><a href="#3、重新分区" class="headerlink" title="3、重新分区"></a>3、重新分区</h6><pre class=" language-sql"><code class="language-sql">range重新分区mysql<span class="token operator">></span> <span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token keyword">user</span> REORGANIZE <span class="token keyword">PARTITION</span> p0<span class="token punctuation">,</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>p3<span class="token punctuation">,</span>p4 <span class="token keyword">INTO</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN MAXVALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">11</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.08</span> sec<span class="token punctuation">)</span>Records: <span class="token number">11</span>  Duplicates: <span class="token number">0</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span></code></pre><pre class=" language-sql"><code class="language-sql">list重新分区mysql<span class="token operator">></span> <span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> list_part REORGANIZE <span class="token keyword">PARTITION</span> p0<span class="token punctuation">,</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>p3<span class="token punctuation">,</span>p4 <span class="token keyword">INTO</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.28</span> sec<span class="token punctuation">)</span>Records: <span class="token number">0</span>  Duplicates: <span class="token number">0</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">hash</span>和<span class="token keyword">key</span>分区不能用REORGANIZE，官方网站说的很清楚mysql<span class="token operator">></span> <span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> key_part REORGANIZE <span class="token keyword">PARTITION</span> <span class="token keyword">COALESCE</span> <span class="token keyword">PARTITION</span> <span class="token number">9</span><span class="token punctuation">;</span>ERROR <span class="token number">1064</span> <span class="token punctuation">(</span><span class="token number">42000</span><span class="token punctuation">)</span>: You have an error <span class="token operator">in</span> your SQL syntax<span class="token punctuation">;</span> <span class="token keyword">check</span> the manual that corresponds <span class="token keyword">to</span> your MySQL server version <span class="token keyword">for</span> the <span class="token keyword">right</span> syntax <span class="token keyword">to</span> <span class="token keyword">use</span> near <span class="token string">'PARTITION 9'</span> at line <span class="token number">1</span></code></pre><h2 id="四、分区优点"><a href="#四、分区优点" class="headerlink" title="四、分区优点"></a>四、分区优点</h2><blockquote><ul><li>分区可以分在多个磁盘，存储更大一点;</li><li>根据查找条件，也就是 where 后面的条件，查找只查找相应的分区不用全部查找了;</li><li>进行大数据搜索时可以进行并行处理;</li><li>跨多个磁盘来分散数据查询，来获得更大的查询吞吐量。</li></ul></blockquote><h2 id="五、分区注意"><a href="#五、分区注意" class="headerlink" title="五、分区注意"></a>五、分区注意</h2><blockquote><ul><li>要 5.5 以上版本 分区才支持 varchar， 可是试到 5.6 都一直报错： “VALUES value for partition ‘P_XX’ must have type INT”;</li><li>LIST COLUMNS 才支持 varchar 类型的分区字段;<br>mysql 官方文档:<a href="http://dev.mysql.com/tech-resources/articles/mysql_55_partitioning.html" target="_blank" rel="noopener">http://dev.mysql.com/tech-resources/articles/mysql_55_partitioning.html</a><br>译文：<br>The intuitive part: partition by non-integer columns;</li><li>任何使用过分区的人应该都遇到过不少问题，特别是面对非整数列分区时，MySQL5.1 只能处理整数列分区，如果你想在日期或字符串列上进行分区，你不得不使用 YEAR 或 TO_DAYS 对其进行转换;</li><li>MySQL 5.5 中新增了两类分区方法，RANG 和 LIST 分区法，同时在新的函数中增加了一个 COLUMNS 关键词。</li></ul></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 实践 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>postgresql分区表</title>
      <link href="/2017/12/01/postgresql-fen-qu-biao/"/>
      <url>/2017/12/01/postgresql-fen-qu-biao/</url>
      
        <content type="html"><![CDATA[<h2 id="分区表介绍"><a href="#分区表介绍" class="headerlink" title="分区表介绍"></a>分区表介绍</h2><ul><li>主表/父表/Master Table 　该表是创建子表的模板。它是一个正常的普通表，但正常情况下它并不储存任何数据。</li><li>子表/分区表/Child Table/Partition Table 　这些表继承并属于一个主表。子表中存储所有的数据。主表与分区表属于一对多的关系，也就是说，一个主表包含多个分区表，而一个分区表只从属于一个主表</li></ul><hr><blockquote><h2 id="创建自动分区表采用两种方式"><a href="#创建自动分区表采用两种方式" class="headerlink" title="创建自动分区表采用两种方式"></a>创建自动分区表采用两种方式</h2><ol><li>采用视图分区表方式</li><li>采用直接分区表方式</li></ol></blockquote><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token keyword">public</span><span class="token punctuation">.</span>sales<span class="token punctuation">(</span>    id bigserial <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">,</span>    store_id <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>    business_date <span class="token keyword">date</span><span class="token punctuation">,</span>    start_time time<span class="token punctuation">,</span>    end_time time<span class="token punctuation">,</span>    dine_in_tc <span class="token keyword">int</span><span class="token punctuation">,</span>    delivery_tc <span class="token keyword">int</span><span class="token punctuation">,</span>    takeout_tc <span class="token keyword">int</span><span class="token punctuation">,</span>    dine_in_s <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    delivery_s <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    takeout_s <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    voucher_overcharge <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    freight <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    currency <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    created_at <span class="token keyword">timestamp</span> <span class="token keyword">default</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    updated_at <span class="token keyword">timestamp</span> <span class="token keyword">default</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><pre class=" language-sql"><code class="language-sql"> <span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> sales_store_id <span class="token keyword">ON</span> <span class="token keyword">public</span><span class="token punctuation">.</span>sales <span class="token punctuation">(</span>store_id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> sales_business_date <span class="token keyword">ON</span> <span class="token keyword">public</span><span class="token punctuation">.</span>sales <span class="token punctuation">(</span>business_date<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token keyword">public</span><span class="token punctuation">.</span>sales  <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> sales_storeid_businessdate_starttime_endtime <span class="token keyword">UNIQUE</span><span class="token punctuation">(</span>store_id<span class="token punctuation">,</span>business_date<span class="token punctuation">,</span>start_time<span class="token punctuation">,</span>end_time<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="1-采用视图分区方式"><a href="#1-采用视图分区方式" class="headerlink" title="1.采用视图分区方式"></a>1.采用视图分区方式</h3><h4 id="建立视图"><a href="#建立视图" class="headerlink" title="建立视图"></a>建立视图</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> <span class="token keyword">public</span><span class="token punctuation">.</span>sales_view <span class="token keyword">AS</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">public</span><span class="token punctuation">.</span>sales<span class="token punctuation">;</span></code></pre><h4 id="定义分表-function"><a href="#定义分表-function" class="headerlink" title="定义分表 function"></a>定义分表 function</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token operator">OR</span> REPLACE <span class="token keyword">FUNCTION</span> <span class="token keyword">public</span><span class="token punctuation">.</span>insert_sales<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">RETURNS</span> <span class="token keyword">TRIGGER</span> <span class="token keyword">AS</span><span class="token string">".'$BODY'."</span>$<span class="token keyword">DECLARE</span>    _start_dt <span class="token keyword">text</span><span class="token punctuation">;</span>    _end_dt <span class="token keyword">text</span><span class="token punctuation">;</span>    _table_name <span class="token keyword">text</span><span class="token punctuation">;</span><span class="token keyword">BEGIN</span><span class="token keyword">IF</span> NEW<span class="token punctuation">.</span>id <span class="token operator">IS</span> <span class="token boolean">NULL</span> <span class="token keyword">THEN</span>NEW<span class="token punctuation">.</span>id :<span class="token operator">=</span> nextval<span class="token punctuation">(</span><span class="token string">'sales_id_seq'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 保证分区后的id可以自增</span><span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>_table_name :<span class="token operator">=</span> <span class="token string">'sales_view_'</span> <span class="token operator">||</span> to_char<span class="token punctuation">(</span>NEW<span class="token punctuation">.</span>business_date<span class="token punctuation">,</span> <span class="token string">'YYYY_MM'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 按照时间进行分区</span>PERFORM <span class="token number">1</span><span class="token keyword">FROM</span>   pg_catalog<span class="token punctuation">.</span>pg_class <span class="token number">c</span><span class="token keyword">JOIN</span>   pg_catalog<span class="token punctuation">.</span>pg_namespace n <span class="token keyword">ON</span> n<span class="token punctuation">.</span>oid <span class="token operator">=</span> <span class="token number">c</span><span class="token punctuation">.</span>relnamespace<span class="token keyword">WHERE</span>  <span class="token number">c</span><span class="token punctuation">.</span>relkind <span class="token operator">=</span> <span class="token string">'r'</span><span class="token operator">AND</span>    <span class="token number">c</span><span class="token punctuation">.</span>relname <span class="token operator">=</span> _table_name<span class="token operator">AND</span>    n<span class="token punctuation">.</span>nspname <span class="token operator">=</span> <span class="token keyword">public</span><span class="token punctuation">;</span><span class="token keyword">IF</span> <span class="token operator">NOT</span> FOUND <span class="token keyword">THEN</span>    _start_dt :<span class="token operator">=</span> to_char<span class="token punctuation">(</span>date_trunc<span class="token punctuation">(</span><span class="token string">'month'</span><span class="token punctuation">,</span> NEW<span class="token punctuation">.</span>business_date<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'YYYY-MM-DD'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    _end_dt:<span class="token operator">=</span>_start_dt::<span class="token keyword">timestamp</span> <span class="token operator">+</span> INTERVAL <span class="token string">'1 month'</span><span class="token punctuation">;</span>    <span class="token keyword">EXECUTE</span>    <span class="token string">'CREATE TABLE public.'</span>    <span class="token operator">||</span> quote_ident<span class="token punctuation">(</span>_table_name<span class="token punctuation">)</span>    <span class="token operator">||</span> <span class="token string">' (CHECK (business_date >= '</span>    <span class="token operator">||</span> quote_literal<span class="token punctuation">(</span>_start_dt<span class="token punctuation">)</span>    <span class="token operator">||</span> <span class="token string">'AND business_date &lt; '</span>    <span class="token operator">||</span> quote_literal<span class="token punctuation">(</span>_end_dt<span class="token punctuation">)</span>    <span class="token operator">||</span> <span class="token string">')) INHERITS (public.sales)'</span><span class="token punctuation">;</span>    <span class="token keyword">EXECUTE</span> <span class="token string">'CREATE INDEX '</span> <span class="token operator">||</span> quote_ident<span class="token punctuation">(</span>_table_name<span class="token operator">||</span><span class="token string">'_business_date'</span><span class="token operator">||</span>_start_dt<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">' ON public.'</span> <span class="token operator">||</span> quote_ident<span class="token punctuation">(</span>_table_name<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">' (business_date)'</span><span class="token punctuation">;</span>    <span class="token keyword">EXECUTE</span> <span class="token string">'CREATE INDEX '</span> <span class="token operator">||</span> quote_ident<span class="token punctuation">(</span>_table_name<span class="token operator">||</span><span class="token string">'_store_id'</span><span class="token operator">||</span>_start_dt<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">' ON public.'</span> <span class="token operator">||</span> quote_ident<span class="token punctuation">(</span>_table_name<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">' (store_id)'</span><span class="token punctuation">;</span>    <span class="token keyword">EXECUTE</span> <span class="token string">'ALTER TABLE public.'</span> <span class="token operator">||</span> quote_ident<span class="token punctuation">(</span>_table_name<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">' ADD CONSTRAINT '</span> <span class="token operator">||</span> quote_ident<span class="token punctuation">(</span>_table_name<span class="token operator">||</span><span class="token string">'_storeid_businessdate_starttime_endtime'</span><span class="token operator">||</span>_start_dt<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">' UNIQUE (store_id,business_date,start_time,end_time)'</span><span class="token punctuation">;</span>    <span class="token keyword">EXECUTE</span> <span class="token string">'ALTER TABLE public.'</span> <span class="token operator">||</span> quote_ident<span class="token punctuation">(</span>_table_name<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">' OWNER TO '</span> <span class="token operator">||</span> quote_ident<span class="token punctuation">(</span><span class="token keyword">current_user</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">EXECUTE</span> <span class="token string">'GRANT ALL ON TABLE public.'</span> <span class="token operator">||</span> quote_ident<span class="token punctuation">(</span>_table_name<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">' TO '</span> <span class="token operator">||</span> quote_ident<span class="token punctuation">(</span><span class="token keyword">current_user</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>    <span class="token keyword">EXECUTE</span> <span class="token string">'INSERT INTO public.'</span> <span class="token operator">||</span> quote_ident<span class="token punctuation">(</span>_table_name<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">' VALUES ($1.*) RETURNING *'</span> <span class="token keyword">USING</span> NEW<span class="token punctuation">;</span>    <span class="token keyword">RETURN</span> NEW<span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span class="token string">".'$BODY'."</span>$LANGUAGE plpgsql<span class="token punctuation">;</span>"<span class="token punctuation">;</span></code></pre><h4 id="分表触发器"><a href="#分表触发器" class="headerlink" title="分表触发器"></a>分表触发器</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> insert_sales_trigger INSTEAD <span class="token keyword">OF</span> <span class="token keyword">INSERT</span> <span class="token keyword">ON</span> <span class="token keyword">public</span><span class="token punctuation">.</span>sales_view <span class="token keyword">FOR EACH ROW</span> <span class="token keyword">EXECUTE</span> <span class="token keyword">PROCEDURE</span> insert_sales<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="定义更新-function"><a href="#定义更新-function" class="headerlink" title="定义更新 function"></a>定义更新 function</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token operator">OR</span> REPLACE <span class="token keyword">FUNCTION</span> update_sales<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">RETURNS</span> <span class="token keyword">TRIGGER</span> <span class="token keyword">AS</span> $$<span class="token keyword">BEGIN</span>    <span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> sales_view <span class="token keyword">WHERE</span> id <span class="token operator">=</span> NEW<span class="token punctuation">.</span>id<span class="token punctuation">;</span>    <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> sales_view <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>NEW<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">RETURN</span> NEW<span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span>$$ LANGUAGE plpgsql<span class="token punctuation">;</span>"<span class="token punctuation">;</span></code></pre><h4 id="更新触发器"><a href="#更新触发器" class="headerlink" title="更新触发器"></a>更新触发器</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> update_sales_trigger INSTEAD <span class="token keyword">OF</span> <span class="token keyword">UPDATE</span> <span class="token keyword">ON</span> sales_view <span class="token keyword">FOR EACH ROW</span> <span class="token keyword">EXECUTE</span> <span class="token keyword">PROCEDURE</span> update_oc_sales<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-直接分区方式"><a href="#2-直接分区方式" class="headerlink" title="2.直接分区方式"></a>2.直接分区方式</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token operator">OR</span> REPLACE <span class="token keyword">FUNCTION</span> insert_sales<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">RETURNS</span> <span class="token keyword">TRIGGER</span> <span class="token keyword">AS</span><span class="token string">".'$BODY'."</span>$<span class="token keyword">DECLARE</span>    _start_dt <span class="token keyword">text</span><span class="token punctuation">;</span>    _end_dt <span class="token keyword">text</span><span class="token punctuation">;</span>    _table_name <span class="token keyword">text</span><span class="token punctuation">;</span><span class="token keyword">BEGIN</span><span class="token keyword">IF</span> NEW<span class="token punctuation">.</span>id <span class="token operator">IS</span> <span class="token boolean">NULL</span> <span class="token keyword">THEN</span>    NEW<span class="token punctuation">.</span>id :<span class="token operator">=</span> nextval<span class="token punctuation">(</span><span class="token string">'".$this->tableName."_id_seq'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>_table_name :<span class="token operator">=</span> <span class="token string">'sales_'</span> <span class="token operator">||</span> to_char<span class="token punctuation">(</span>NEW<span class="token punctuation">.</span>business_date<span class="token punctuation">,</span> <span class="token string">'YYYY_MM'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>PERFORM <span class="token number">1</span><span class="token keyword">FROM</span>   pg_catalog<span class="token punctuation">.</span>pg_class <span class="token number">c</span><span class="token keyword">JOIN</span>   pg_catalog<span class="token punctuation">.</span>pg_namespace n <span class="token keyword">ON</span> n<span class="token punctuation">.</span>oid <span class="token operator">=</span> <span class="token number">c</span><span class="token punctuation">.</span>relnamespace<span class="token keyword">WHERE</span>  <span class="token number">c</span><span class="token punctuation">.</span>relkind <span class="token operator">=</span> <span class="token string">'r'</span><span class="token operator">AND</span>    <span class="token number">c</span><span class="token punctuation">.</span>relname <span class="token operator">=</span> _table_name<span class="token operator">AND</span>    n<span class="token punctuation">.</span>nspname <span class="token operator">=</span> <span class="token string">'public'</span><span class="token punctuation">;</span><span class="token keyword">IF</span> <span class="token operator">NOT</span> FOUND <span class="token keyword">THEN</span>    _start_dt :<span class="token operator">=</span> to_char<span class="token punctuation">(</span>date_trunc<span class="token punctuation">(</span><span class="token string">'month'</span><span class="token punctuation">,</span> NEW<span class="token punctuation">.</span>business_date<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'YYYY-MM-DD'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    _end_dt:<span class="token operator">=</span>_start_dt::<span class="token keyword">timestamp</span> <span class="token operator">+</span> INTERVAL <span class="token string">'1 month'</span><span class="token punctuation">;</span>    <span class="token keyword">EXECUTE</span>    <span class="token string">'CREATE TABLE IF NOT EXISTS public.'</span>    <span class="token operator">||</span> quote_ident<span class="token punctuation">(</span>_table_name<span class="token punctuation">)</span>    <span class="token operator">||</span> <span class="token string">' (CHECK (business_date >= '</span>    <span class="token operator">||</span> quote_literal<span class="token punctuation">(</span>_start_dt<span class="token punctuation">)</span>    <span class="token operator">||</span> <span class="token string">'AND business_date &lt; '</span>    <span class="token operator">||</span> quote_literal<span class="token punctuation">(</span>_end_dt<span class="token punctuation">)</span>    <span class="token operator">||</span> <span class="token string">')) INHERITS (public.sales)'</span><span class="token punctuation">;</span>    <span class="token keyword">EXECUTE</span> <span class="token string">'CREATE INDEX IF NOT EXISTS'</span> <span class="token operator">||</span> quote_ident<span class="token punctuation">(</span>_table_name<span class="token operator">||</span><span class="token string">'_business_date'</span><span class="token operator">||</span>_start_dt<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">' ON public.'</span> <span class="token operator">||</span> quote_ident<span class="token punctuation">(</span>_table_name<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">' (business_date)'</span><span class="token punctuation">;</span>    <span class="token keyword">EXECUTE</span> <span class="token string">'CREATE INDEX IF NOT EXISTS'</span> <span class="token operator">||</span> quote_ident<span class="token punctuation">(</span>_table_name<span class="token operator">||</span><span class="token string">'_store_id'</span><span class="token operator">||</span>_start_dt<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">' ON public.'</span> <span class="token operator">||</span> quote_ident<span class="token punctuation">(</span>_table_name<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">' (store_id)'</span><span class="token punctuation">;</span>    <span class="token keyword">EXECUTE</span> <span class="token string">'CREATE UNIQUE INDEX IF NOT EXISTS'</span> <span class="token operator">||</span> quote_ident<span class="token punctuation">(</span>_table_name<span class="token operator">||</span><span class="token string">'_storeid_businessdate_starttime_endtime'</span><span class="token operator">||</span>_start_dt<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">' ON public.'</span> <span class="token operator">||</span> quote_ident<span class="token punctuation">(</span>_table_name<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">' (store_id,business_date,start_time,end_time)'</span><span class="token punctuation">;</span>    <span class="token keyword">EXECUTE</span> <span class="token string">'ALTER TABLE public.'</span> <span class="token operator">||</span> quote_ident<span class="token punctuation">(</span>_table_name<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">' OWNER TO '</span> <span class="token operator">||</span> quote_ident<span class="token punctuation">(</span><span class="token keyword">current_user</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">EXECUTE</span> <span class="token string">'GRANT ALL ON TABLE public.'</span> <span class="token operator">||</span> quote_ident<span class="token punctuation">(</span>_table_name<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">' TO '</span> <span class="token operator">||</span> quote_ident<span class="token punctuation">(</span><span class="token keyword">current_user</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>    <span class="token keyword">EXECUTE</span> <span class="token string">'INSERT INTO public.'</span> <span class="token operator">||</span> quote_ident<span class="token punctuation">(</span>_table_name<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">' VALUES ($1.*) on conflict(store_id,business_date,start_time,end_time) do nothing RETURNING *'</span> <span class="token keyword">USING</span> NEW<span class="token punctuation">;</span>    <span class="token keyword">RETURN</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span class="token string">".'$BODY'."</span>$LANGUAGE plpgsql<span class="token punctuation">;</span></code></pre><h4 id="分表触发器-1"><a href="#分表触发器-1" class="headerlink" title="分表触发器"></a>分表触发器</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> insert_sales_trigger BEFORE <span class="token keyword">INSERT</span> <span class="token keyword">ON</span> <span class="token keyword">public</span><span class="token punctuation">.</span>salses <span class="token keyword">FOR EACH ROW</span> <span class="token keyword">EXECUTE</span> <span class="token keyword">PROCEDURE</span> insert_sales<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><h3 id="两种方式比较"><a href="#两种方式比较" class="headerlink" title="两种方式比较"></a>两种方式比较</h3><ul><li>视图分区所有操作都是对视图的操作，直接分区是对主表进行操作；</li><li>视图分区触发器使用<code>instead of</code>,直接分区使用<code>before</code>,因为无法直接用触发器替代对主表的操作，只能操作视图；</li><li>视图分区用<code>instead of</code>，在 function 中可以<code>RETURN NEW</code>，对数据库操作后有明确的返回，直接分区用<code>before</code>方式，在 function 中采用<code>RETURN NULL</code>,数据库操作没有返回；</li><li>直接分区可以用<code>on conflict</code>对主表<code>insert</code>进行<code>ignore</code>操作，视图分区不能。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 实践 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> PostgreSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql的merge分区</title>
      <link href="/2017/11/10/mysql-de-merge-fen-qu/"/>
      <url>/2017/11/10/mysql-de-merge-fen-qu/</url>
      
        <content type="html"><![CDATA[<h4 id="1-测试数据"><a href="#1-测试数据" class="headerlink" title="1.测试数据"></a>1.测试数据</h4><blockquote><p>1.usera <strong>插入 500w 数据</strong><br>2.userb <strong>插入 500w 数据</strong><br>3.userall <em>(主表)</em></p></blockquote><pre><code>     usert1 *(子表)* **插入250w数据**     usert2 *(子表)* **插入250w数据**</code></pre><blockquote><p>4.userall2 <em>(主表)</em></p></blockquote><pre><code>     usert3 *(子表)* **插入250w数据**     usert4 *(子表)* **插入250w数据**</code></pre><ul><li>建表语句</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> usertb<span class="token punctuation">(</span>    id <span class="token keyword">serial</span><span class="token punctuation">,</span>    uname  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>    ucreatetime  <span class="token keyword">datetime</span>  <span class="token punctuation">,</span>    age <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span>MYISAM<span class="token keyword">DEFAULT</span> <span class="token keyword">CHARACTER SET</span><span class="token operator">=</span>utf8 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8_general_ci<span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">1</span>ROW_FORMAT<span class="token operator">=</span>COMPACT<span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> usertall<span class="token punctuation">(</span>    id <span class="token keyword">serial</span><span class="token punctuation">,</span>    uname  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>    ucreatetime  <span class="token keyword">datetime</span>  <span class="token punctuation">,</span>    age <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">MERGE</span> <span class="token keyword">union</span><span class="token punctuation">(</span>usert1<span class="token punctuation">,</span>usert2<span class="token punctuation">)</span> insert_method<span class="token operator">=</span><span class="token keyword">last</span><span class="token keyword">DEFAULT</span> <span class="token keyword">CHARACTER SET</span><span class="token operator">=</span>utf8 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8_general_ci<span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">1</span>ROW_FORMAT<span class="token operator">=</span>COMPACT<span class="token punctuation">;</span></code></pre><ul><li>使用存储过程插入测试数据</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">delimiter</span> $$<span class="token keyword">SET</span> AUTOCOMMIT <span class="token operator">=</span> <span class="token number">0</span>$$<span class="token keyword">create</span>  <span class="token keyword">procedure</span> test1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">declare</span> v_cnt <span class="token keyword">decimal</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token keyword">default</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token number">dd</span>:loop        <span class="token keyword">insert</span> <span class="token keyword">into</span> userta <span class="token keyword">values</span>        <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'用户1'</span><span class="token punctuation">,</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'用户2'</span><span class="token punctuation">,</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'用户3'</span><span class="token punctuation">,</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'用户4'</span><span class="token punctuation">,</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'用户5'</span><span class="token punctuation">,</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'用户6'</span><span class="token punctuation">,</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'用户7'</span><span class="token punctuation">,</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'用户8'</span><span class="token punctuation">,</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'用户9'</span><span class="token punctuation">,</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'用户0'</span><span class="token punctuation">,</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">commit</span><span class="token punctuation">;</span>        <span class="token keyword">set</span> v_cnt <span class="token operator">=</span> v_cnt<span class="token operator">+</span><span class="token number">10</span> <span class="token punctuation">;</span>            <span class="token keyword">if</span>  v_cnt <span class="token operator">=</span> <span class="token number">5000000</span> <span class="token keyword">then</span> leave <span class="token number">dd</span><span class="token punctuation">;</span>            <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>        <span class="token keyword">end</span> loop <span class="token number">dd</span> <span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span>$$<span class="token keyword">delimiter</span><span class="token punctuation">;</span></code></pre><ul><li>调用存储过程</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">call</span> test1<span class="token punctuation">;</span></code></pre><ul><li>测试查询时间</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> userta<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">--3.63s</span></code></pre><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><blockquote><p>1.分表必须保证主表和子表表结构一致，否则报错<br>Error Code : 1168 Unable to open underlying table which is differently defined or of non-MyISAM type or doesn’t exist</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 实践 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql存储过程</title>
      <link href="/2017/10/23/mysql-cun-chu-guo-cheng/"/>
      <url>/2017/10/23/mysql-cun-chu-guo-cheng/</url>
      
        <content type="html"><![CDATA[<h4 id="1-什么是存储过程"><a href="#1-什么是存储过程" class="headerlink" title="1 什么是存储过程"></a>1 什么是存储过程</h4><ul><li>简单的说，就是一组 SQL 语句集，功能强大，可以实现一些比较复杂的逻辑功能，类似于 JAVA 语言中的方法;</li><li>ps:存储过程跟触发器有点类似，都是一组 SQL 集，但是存储过程是主动调用的，且功能比触发器更加强大，触发器是某件事触发后自动调用。</li></ul><h4 id="2-有哪些特性"><a href="#2-有哪些特性" class="headerlink" title="2 有哪些特性"></a>2 有哪些特性</h4><ul><li>有输入输出参数，可以声明变量，有 if/else, case,while 等控制语句，通过编写存储过程，可以实现复杂的逻辑功能;</li><li>函数的普遍特性：模块化，封装，代码复用;</li><li>速度快，只有首次执行需经过编译和优化步骤，后续被调用可以直接执行，省去以上步骤。</li></ul><h4 id="3-创建一个简单的存储过程"><a href="#3-创建一个简单的存储过程" class="headerlink" title="3 创建一个简单的存储过程"></a>3 创建一个简单的存储过程</h4><ul><li><strong>存储过程 proc_adder 功能很简单，两个整型输入参数 a 和 b，一个整型输出参数 sum，功能就是计算输入参数 a 和 b 的结果，赋值给输出参数 sum</strong></li></ul><blockquote><p>几点说明</p></blockquote><ul><li>DELIMITER ;; ：之前说过了，把默认的输入的结束符;替换成;;。</li><li>DEFINER：创建者；</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token comment" spellcheck="true">-- Procedure structure for `proc_adder`</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>proc_adder<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">DEFINER</span><span class="token operator">=</span><span class="token punctuation">`</span>root<span class="token punctuation">`</span><span class="token variable">@`localhost`</span> <span class="token keyword">PROCEDURE</span> <span class="token punctuation">`</span>proc_adder<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token operator">IN</span> <span class="token number">a</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token operator">IN</span> <span class="token number">b</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">OUT</span> sum <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span>    <span class="token comment" spellcheck="true">#Routine body goes here...</span>    <span class="token keyword">DECLARE</span> <span class="token number">c</span> <span class="token keyword">int</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token number">a</span> <span class="token operator">is</span> <span class="token boolean">null</span> <span class="token keyword">then</span> <span class="token keyword">set</span> <span class="token number">a</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token number">b</span> <span class="token operator">is</span> <span class="token boolean">null</span> <span class="token keyword">then</span> <span class="token keyword">set</span> <span class="token number">b</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>    <span class="token keyword">set</span> sum  <span class="token operator">=</span> <span class="token number">a</span> <span class="token operator">+</span> <span class="token number">b</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span></code></pre><blockquote><p>执行以上存储结果，验证是否正确：</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> <span class="token variable">@b</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">call</span> proc_adder<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token variable">@b</span><span class="token punctuation">,</span><span class="token variable">@s</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token variable">@s</span> <span class="token keyword">as</span> sum<span class="token punctuation">;</span>如果结果 sum <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>ok</code></pre><h4 id="4-存储过程中的控制语句"><a href="#4-存储过程中的控制语句" class="headerlink" title="4 存储过程中的控制语句"></a>4 存储过程中的控制语句</h4><blockquote><p>IF 语句：</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token comment" spellcheck="true">-- Procedure structure for `proc_if`</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>proc_if<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">DEFINER</span><span class="token operator">=</span><span class="token punctuation">`</span>root<span class="token punctuation">`</span><span class="token variable">@`localhost`</span> <span class="token keyword">PROCEDURE</span> <span class="token punctuation">`</span>proc_if<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token operator">IN</span> <span class="token keyword">type</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span>    <span class="token comment" spellcheck="true">#Routine body goes here...</span>    <span class="token keyword">DECLARE</span> <span class="token number">c</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">IF</span> <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">THEN</span>        <span class="token keyword">set</span> <span class="token number">c</span> <span class="token operator">=</span> <span class="token string">'param is 0'</span><span class="token punctuation">;</span>    ELSEIF <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">THEN</span>        <span class="token keyword">set</span> <span class="token number">c</span> <span class="token operator">=</span> <span class="token string">'param is 1'</span><span class="token punctuation">;</span>    <span class="token keyword">ELSE</span>        <span class="token keyword">set</span> <span class="token number">c</span> <span class="token operator">=</span> <span class="token string">'param is others, not 0 or 1'</span><span class="token punctuation">;</span>    <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>    <span class="token keyword">select</span> <span class="token number">c</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span></code></pre><blockquote><p>执行以上存储结果，验证是否正确：</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> <span class="token variable">@type</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">call</span> proc_if<span class="token punctuation">(</span><span class="token variable">@type</span><span class="token punctuation">)</span><span class="token punctuation">;</span>如果结果 <span class="token number">c</span> <span class="token operator">=</span> param <span class="token operator">is</span> <span class="token number">1</span><span class="token punctuation">;</span>ok</code></pre><blockquote><p>CASE 语句：</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token comment" spellcheck="true">-- Procedure structure for `proc_case`</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>proc_case<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">DEFINER</span><span class="token operator">=</span><span class="token punctuation">`</span>root<span class="token punctuation">`</span><span class="token variable">@`localhost`</span> <span class="token keyword">PROCEDURE</span> <span class="token punctuation">`</span>proc_case<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token operator">IN</span> <span class="token keyword">type</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span>    <span class="token comment" spellcheck="true">#Routine body goes here...</span>    <span class="token keyword">DECLARE</span> <span class="token number">c</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">CASE</span> <span class="token keyword">type</span>    <span class="token keyword">WHEN</span> <span class="token number">0</span> <span class="token keyword">THEN</span>        <span class="token keyword">set</span> <span class="token number">c</span> <span class="token operator">=</span> <span class="token string">'param is 0'</span><span class="token punctuation">;</span>    <span class="token keyword">WHEN</span> <span class="token number">1</span> <span class="token keyword">THEN</span>        <span class="token keyword">set</span> <span class="token number">c</span> <span class="token operator">=</span> <span class="token string">'param is 1'</span><span class="token punctuation">;</span>    <span class="token keyword">ELSE</span>        <span class="token keyword">set</span> <span class="token number">c</span> <span class="token operator">=</span> <span class="token string">'param is others, not 0 or 1'</span><span class="token punctuation">;</span>    <span class="token keyword">END</span> <span class="token keyword">CASE</span><span class="token punctuation">;</span>    <span class="token keyword">select</span> <span class="token number">c</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span></code></pre><blockquote><p>执行以上存储结果，验证是否正确：</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> <span class="token variable">@type</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">call</span> proc_case<span class="token punctuation">(</span><span class="token variable">@type</span><span class="token punctuation">)</span><span class="token punctuation">;</span>如果结果 <span class="token number">c</span> <span class="token operator">=</span> param <span class="token operator">is</span> <span class="token number">1</span><span class="token punctuation">;</span>ok</code></pre><blockquote><p>循环 while 语句：</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token comment" spellcheck="true">-- Procedure structure for `proc_while`</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>proc_while<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">DEFINER</span><span class="token operator">=</span><span class="token punctuation">`</span>root<span class="token punctuation">`</span><span class="token variable">@`localhost`</span> <span class="token keyword">PROCEDURE</span> <span class="token punctuation">`</span>proc_while<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token operator">IN</span> n <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span>    <span class="token comment" spellcheck="true">#Routine body goes here...</span>    <span class="token keyword">DECLARE</span> i <span class="token keyword">int</span><span class="token punctuation">;</span>    <span class="token keyword">DECLARE</span> s <span class="token keyword">int</span><span class="token punctuation">;</span>    <span class="token keyword">SET</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">SET</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">WHILE</span> i <span class="token operator">&lt;=</span> n <span class="token keyword">DO</span>        <span class="token keyword">set</span> s <span class="token operator">=</span> s <span class="token operator">+</span> i<span class="token punctuation">;</span>        <span class="token keyword">set</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">END</span> <span class="token keyword">WHILE</span><span class="token punctuation">;</span>    <span class="token keyword">SELECT</span> s<span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span></code></pre><blockquote><p>执行以上存储结果，验证是否正确：</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> <span class="token variable">@type</span><span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">call</span> proc_while<span class="token punctuation">(</span><span class="token variable">@type</span><span class="token punctuation">)</span><span class="token punctuation">;</span>如果结果 s <span class="token operator">=</span> <span class="token number">5050</span><span class="token punctuation">;</span>ok</code></pre><h4 id="5-存储过程弊端"><a href="#5-存储过程弊端" class="headerlink" title="5 存储过程弊端"></a>5 存储过程弊端</h4><ul><li>不同数据库，语法差别很大，移植困难，换了数据库，需要重新编写;</li><li>不好管理，把过多业务逻辑写在存储过程不好维护，不利于分层管理，容易混乱，一般存储过程适用于个别对性能要求较高的业务，其它的必要性不是很大。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 实践 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql事件</title>
      <link href="/2017/10/19/mysql-shi-jian/"/>
      <url>/2017/10/19/mysql-shi-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="1-事件简介"><a href="#1-事件简介" class="headerlink" title="1 事件简介"></a>1 事件简介</h2><ul><li>事件（event）是 MySQL 在相应的时刻调用的过程式数据库对象。一个事件可调用一次，也可周期性的启动，它由一个特定的线程来管理的，也就是所谓的“事件调度器”。</li><li>事件和触发器类似，都是在某些事情发生的时候启动。当数据库上启动一条语句的时候，触发器就启动了，而事件是根据调度事件来启动的。由于他们彼此相似，所以事件也称为临时性触发器。</li><li>事件取代了原先只能由操作系统的计划任务来执行的工作，而且 MySQL 的事件调度器可以精确到每秒钟执行一个任务，而操作系统的计划任务（如：Linux 下的 CRON 或 Windows 下的任务计划）只能精确到每分钟执行一次。</li></ul><h2 id="2-事件的优缺点"><a href="#2-事件的优缺点" class="headerlink" title="2 事件的优缺点"></a>2 事件的优缺点</h2><h4 id="2-1-优点"><a href="#2-1-优点" class="headerlink" title="2.1 优点"></a>2.1 优点</h4><ul><li>一些对数据定时性操作不再依赖外部程序，而直接使用数据库本身提供的功能。</li><li>可以实现每秒钟执行一个任务，这在一些对实时性要求较高的环境下就非常实用了。</li></ul><h4 id="2-2-缺点"><a href="#2-2-缺点" class="headerlink" title="2.2 缺点"></a>2.2 缺点</h4><ul><li>定时触发，不可以调用。</li></ul><h2 id="3-创建事件"><a href="#3-创建事件" class="headerlink" title="3 创建事件"></a>3 创建事件</h2><ul><li>一条 create event 语句创建一个事件。每个事件由两个主要部分组成，第一部分是事件调度（eventschedule），表示事件何时启动以及按什么频率启动，第二部分是事件动作（event action ），这是事件启动时执行的代码，事件的动作包含一条 SQL 语句，它可能是一个简单地 insert 或者 update 语句，也可以使一个存储过程或者 benin…end 语句块，这两种情况允许我们执行多条 SQL。</li><li>一个事件可以是活动（打开）的或停止（关闭）的，活动意味着事件调度器检查事件动作是否必须调用，停止意味着事件的声明存储在目录中，但调度器不会检查它是否应该调用。在一个事件创建之后，它立即变为活动的，一个活动的事件可以执行一次或者多次。</li></ul><h4 id="3-1-创建语法如下"><a href="#3-1-创建语法如下" class="headerlink" title="3.1 创建语法如下"></a>3.1 创建语法如下</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span>    <span class="token punctuation">[</span><span class="token keyword">DEFINER</span> <span class="token operator">=</span> { <span class="token keyword">user</span> <span class="token operator">|</span> <span class="token keyword">CURRENT_USER</span> }<span class="token punctuation">]</span>    EVENT    <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span>    event_name    <span class="token keyword">ON</span> SCHEDULE schedule    <span class="token punctuation">[</span><span class="token keyword">ON</span> COMPLETION <span class="token punctuation">[</span><span class="token operator">NOT</span><span class="token punctuation">]</span> PRESERVE<span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token keyword">ENABLE</span> <span class="token operator">|</span> <span class="token keyword">DISABLE</span> <span class="token operator">|</span> <span class="token keyword">DISABLE</span> <span class="token keyword">ON</span> SLAVE<span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> <span class="token string">'comment'</span><span class="token punctuation">]</span>    <span class="token keyword">DO</span> event_body<span class="token punctuation">;</span>schedule:    AT <span class="token keyword">timestamp</span> <span class="token punctuation">[</span><span class="token operator">+</span> INTERVAL interval<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token operator">|</span> EVERY interval    <span class="token punctuation">[</span>STARTS <span class="token keyword">timestamp</span> <span class="token punctuation">[</span><span class="token operator">+</span> INTERVAL interval<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>    <span class="token punctuation">[</span>ENDS <span class="token keyword">timestamp</span> <span class="token punctuation">[</span><span class="token operator">+</span> INTERVAL interval<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>interval:    quantity {YEAR <span class="token operator">|</span> QUARTER <span class="token operator">|</span> MONTH <span class="token operator">|</span> DAY <span class="token operator">|</span> HOUR <span class="token operator">|</span> MINUTE <span class="token operator">|</span>              WEEK <span class="token operator">|</span> SECOND <span class="token operator">|</span> YEAR_MONTH <span class="token operator">|</span> DAY_HOUR <span class="token operator">|</span> DAY_MINUTE <span class="token operator">|</span>              DAY_SECOND <span class="token operator">|</span> HOUR_MINUTE <span class="token operator">|</span> HOUR_SECOND <span class="token operator">|</span> MINUTE_SECOND}</code></pre><ul><li>从 2013 年 1 月 13 号 0 点开始，每天运行一次</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ON</span> SCHEDULE EVERY <span class="token number">1</span> DAY STARTS <span class="token string">'2013-01-13 00:00:00'</span><span class="token punctuation">;</span></code></pre><ul><li>从现在开始每隔九天定时执行</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ON</span> SCHEDULE EVERY <span class="token number">9</span> DAY STARTS <span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>每个月的一号凌晨 1 点执行</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">on</span> schedule every <span class="token number">1</span> month starts date_add<span class="token punctuation">(</span>date_add<span class="token punctuation">(</span>date_sub<span class="token punctuation">(</span>curdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>interval day<span class="token punctuation">(</span>curdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> day<span class="token punctuation">)</span><span class="token punctuation">,</span>interval <span class="token number">1</span> month<span class="token punctuation">)</span><span class="token punctuation">,</span>interval <span class="token number">1</span> hour<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>每个季度一号的凌晨 1 点执行</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">on</span> schedule every <span class="token number">1</span> quarter starts date_add<span class="token punctuation">(</span>date_add<span class="token punctuation">(</span><span class="token keyword">date</span><span class="token punctuation">(</span>concat<span class="token punctuation">(</span>year<span class="token punctuation">(</span>curdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'-'</span><span class="token punctuation">,</span>elt<span class="token punctuation">(</span>quarter<span class="token punctuation">(</span>curdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'-'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>interval <span class="token number">1</span> quarter<span class="token punctuation">)</span><span class="token punctuation">,</span>interval <span class="token number">1</span> hour<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>名词解释：</p></blockquote><ul><li>event_name ：创建的 event 名字（唯一确定的）。</li><li>ON SCHEDULE：计划任务。</li><li>schedule: 决定 event 的执行时间和频率（注意时间一定要是将来的时间，过去的时间会出错），有两种形式 AT 和 EVERY。</li><li>[ON COMPLETION [NOT] PRESERVE]： 可选项，默认是 ON COMPLETION NOT PRESERVE 即计划任务执行完毕后自动 drop 该事件；ON COMPLETION PRESERVE 则不会 drop 掉。</li><li>[COMMENT ‘comment’] ：可选项，comment 用来描述 event；相当注释，最大长度 64 个字节。</li><li>[ENABLE | DISABLE] ：设定 event 的状态，默认 ENABLE：表示系统尝试执行这个事件， DISABLE：关闭该事情，可以用 alter 修改</li><li>DO event_body: 需要执行的 sql 语句（可以是复合语句）。CREATE EVENT 在存储过程中使用时合法的。</li></ul><h4 id="3-2-开启关闭事件调度器"><a href="#3-2-开启关闭事件调度器" class="headerlink" title="3.2 开启关闭事件调度器"></a>3.2 开启关闭事件调度器</h4><h6 id="3-2-1-MySQL-事件调度器-event-scheduler-负责调用事件，它默认是关闭的。这个调度器不断地监视一个事件是否要调用，-要创建事件，必须打开调度器。"><a href="#3-2-1-MySQL-事件调度器-event-scheduler-负责调用事件，它默认是关闭的。这个调度器不断地监视一个事件是否要调用，-要创建事件，必须打开调度器。" class="headerlink" title="3.2.1 MySQL 事件调度器 event_scheduler 负责调用事件，它默认是关闭的。这个调度器不断地监视一个事件是否要调用， 要创建事件，必须打开调度器。"></a>3.2.1 MySQL 事件调度器 event_scheduler 负责调用事件，它默认是关闭的。这个调度器不断地监视一个事件是否要调用， 要创建事件，必须打开调度器。</h6><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%event_scheduler%'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------+-------+</span><span class="token operator">|</span> Variable_name   <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------+-------+</span><span class="token operator">|</span> event_scheduler <span class="token operator">|</span> <span class="token keyword">OFF</span>   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------+-------+</span></code></pre><h6 id="3-2-2-开启事件调度器"><a href="#3-2-2-开启事件调度器" class="headerlink" title="3.2.2 开启事件调度器"></a>3.2.2 开启事件调度器</h6><blockquote><p>通过命令行 <br><br>可通过如下任何一个命令行</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> event_scheduler <span class="token operator">=</span> <span class="token keyword">ON</span><span class="token punctuation">;</span><span class="token keyword">SET</span> @<span class="token variable">@global.event_scheduler</span> <span class="token operator">=</span> <span class="token keyword">ON</span><span class="token punctuation">;</span><span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> event_scheduler <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">SET</span> @<span class="token variable">@global.event_scheduler</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><blockquote><p>通过配置文件 my.cnf</p></blockquote><pre class=" language-sql"><code class="language-sql">event_scheduler <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">#或者ON</span></code></pre><blockquote><p>查看调度器线程</p></blockquote><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> processlist<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-----------------+-----------+------+---------+------+------------------------+------------------+</span><span class="token operator">|</span> Id <span class="token operator">|</span> <span class="token keyword">User</span>            <span class="token operator">|</span> Host      <span class="token operator">|</span> <span class="token number">db</span>   <span class="token operator">|</span> Command <span class="token operator">|</span> Time <span class="token operator">|</span> State                  <span class="token operator">|</span> Info             <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-----------------+-----------+------+---------+------+------------------------+------------------+</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> root            <span class="token operator">|</span> localhost <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> Query   <span class="token operator">|</span>    <span class="token number">0</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>                   <span class="token operator">|</span> <span class="token keyword">show</span> processlist <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> event_scheduler <span class="token operator">|</span> localhost <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> Daemon  <span class="token operator">|</span>    <span class="token number">6</span> <span class="token operator">|</span> Waiting <span class="token keyword">on</span> empty queue <span class="token operator">|</span> <span class="token boolean">NULL</span>             <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-----------------+-----------+------+---------+------+------------------------+------------------+</span></code></pre><h6 id="3-2-3-关闭事件调度器"><a href="#3-2-3-关闭事件调度器" class="headerlink" title="3.2.3 关闭事件调度器"></a>3.2.3 关闭事件调度器</h6><blockquote><p>通过命令行<br>可通过如下任何一个命令行</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> event_scheduler <span class="token operator">=</span> <span class="token keyword">OFF</span><span class="token punctuation">;</span><span class="token keyword">SET</span> @<span class="token variable">@global.event_scheduler</span> <span class="token operator">=</span> <span class="token keyword">OFF</span><span class="token punctuation">;</span><span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> event_scheduler <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">SET</span> @<span class="token variable">@global.event_scheduler</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></code></pre><blockquote><p>通过配置文件 my.cnf<br>在[mysqld]下增加</p></blockquote><pre class=" language-sql"><code class="language-sql">event_scheduler <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">#或者OFF，DISABLED</span></code></pre><blockquote><p>查看调度器线程</p></blockquote><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> processlist<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+-----------+------+---------+------+-------+------------------+</span><span class="token operator">|</span> Id <span class="token operator">|</span> <span class="token keyword">User</span> <span class="token operator">|</span> Host      <span class="token operator">|</span> <span class="token number">db</span>   <span class="token operator">|</span> Command <span class="token operator">|</span> Time <span class="token operator">|</span> State <span class="token operator">|</span> Info             <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+-----------+------+---------+------+-------+------------------+</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> root <span class="token operator">|</span> localhost <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> Query   <span class="token operator">|</span>    <span class="token number">0</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>  <span class="token operator">|</span> <span class="token keyword">show</span> processlist <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------+-----------+------+---------+------+-------+------------------+</span></code></pre><h4 id="3-3-例如：创建一个表记录每次事件调度的名字和时间戳"><a href="#3-3-例如：创建一个表记录每次事件调度的名字和时间戳" class="headerlink" title="3.3 例如：创建一个表记录每次事件调度的名字和时间戳"></a>3.3 例如：创建一个表记录每次事件调度的名字和时间戳</h4><h6 id="3-3-1-创建测试表"><a href="#3-3-1-创建测试表" class="headerlink" title="3.3.1 创建测试表"></a>3.3.1 创建测试表</h6><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> events_list<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> events_list<span class="token punctuation">(</span>event_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span> event_started <span class="token keyword">timestamp</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="3-3-2-创建事件-1（立即启动事件）"><a href="#3-3-2-创建事件-1（立即启动事件）" class="headerlink" title="3.3.2 创建事件 1（立即启动事件）"></a>3.3.2 创建事件 1（立即启动事件）</h6><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> event event_now<span class="token keyword">on</span> scheduleat <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">do</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> events_list <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'event_now'</span><span class="token punctuation">,</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>查看事件执行结果</p></blockquote><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> events_list<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------+---------------------+</span><span class="token operator">|</span> event_name <span class="token operator">|</span> event_started       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------+---------------------+</span><span class="token operator">|</span> event_now  <span class="token operator">|</span> <span class="token number">2014</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">04</span>:<span class="token number">06</span>:<span class="token number">40</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------+---------------------+</span></code></pre><h6 id="3-3-3-创建事件-2（每分钟启动事件）"><a href="#3-3-3-创建事件-2（每分钟启动事件）" class="headerlink" title="3.3.3 创建事件 2（每分钟启动事件）"></a>3.3.3 创建事件 2（每分钟启动事件）</h6><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> event test<span class="token punctuation">.</span>event_minute<span class="token keyword">on</span> scheduleevery <span class="token number">1</span> minute<span class="token keyword">do</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> events_list <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'event_now'</span><span class="token punctuation">,</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>查看事件执行结果</p></blockquote><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> events_list<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------+---------------------+</span><span class="token operator">|</span> event_name <span class="token operator">|</span> event_started       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------+---------------------+</span><span class="token operator">|</span> event_now  <span class="token operator">|</span> <span class="token number">2014</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">04</span>:<span class="token number">26</span>:<span class="token number">53</span> <span class="token operator">|</span><span class="token operator">|</span> event_now  <span class="token operator">|</span> <span class="token number">2014</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">04</span>:<span class="token number">27</span>:<span class="token number">53</span> <span class="token operator">|</span><span class="token operator">|</span> event_now  <span class="token operator">|</span> <span class="token number">2014</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">04</span>:<span class="token number">28</span>:<span class="token number">53</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------+---------------------+</span></code></pre><h4 id="3-4-注意："><a href="#3-4-注意：" class="headerlink" title="3.4 注意："></a>3.4 注意：</h4><ul><li>默认创建事件存储在当前库中，也可显示指定事件创建在哪个库中。</li><li>通过 show events 只能查看当前库中创建的事件。</li><li>事件执行完即释放，如立即执行事件，执行完后，事件便自动删除，多次调用事件或等待执行事件可以查看到。</li><li>如果两个事件需要在同一时刻调用，mysql 会确定调用他们的顺序，如果要指定顺序，需要确保一个事件至少在另一个事件 1 秒后执行。</li><li>对于递归调度的事件，结束日期不能在开始日期之前。</li><li>select 可以包含在一个事件中，然而他的结果消失了，就好像没执行过。</li></ul><h2 id="4-查看事件"><a href="#4-查看事件" class="headerlink" title="4 查看事件"></a>4 查看事件</h2><pre class=" language-sql"><code class="language-sql">查看当前所在库的事件<span class="token keyword">show</span> events<span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql">查看所有事件<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> mysql<span class="token punctuation">.</span>event<span class="token punctuation">;</span></code></pre><h2 id="5-修改事件"><a href="#5-修改事件" class="headerlink" title="5 修改事件"></a>5 修改事件</h2><ul><li>一条 alter event 语句可以修改事件的定义和属性。我们可以让一个事件成为停止的或者再次让它活动，也可以修改一个事件的名字或者整个调度。然而当一个使用 ON COMPLETION NOT PRESERVE 属性定义的事件最后一次执行后，事件直接就不存在了，不能修改。</li></ul><h4 id="5-1-语法如下："><a href="#5-1-语法如下：" class="headerlink" title="5.1 语法如下："></a>5.1 语法如下：</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span>    <span class="token punctuation">[</span><span class="token keyword">DEFINER</span> <span class="token operator">=</span> { <span class="token keyword">user</span> <span class="token operator">|</span> <span class="token keyword">CURRENT_USER</span> }<span class="token punctuation">]</span>    EVENT event_name    <span class="token punctuation">[</span><span class="token keyword">ON</span> SCHEDULE schedule<span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token keyword">ON</span> COMPLETION <span class="token punctuation">[</span><span class="token operator">NOT</span><span class="token punctuation">]</span> PRESERVE<span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token keyword">RENAME</span> <span class="token keyword">TO</span> new_event_name<span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token keyword">ENABLE</span> <span class="token operator">|</span> <span class="token keyword">DISABLE</span> <span class="token operator">|</span> <span class="token keyword">DISABLE</span> <span class="token keyword">ON</span> SLAVE<span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> <span class="token string">'comment'</span><span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token keyword">DO</span> event_body<span class="token punctuation">]</span></code></pre><h4 id="5-2-例如"><a href="#5-2-例如" class="headerlink" title="5.2 例如"></a>5.2 例如</h4><pre class=" language-sql"><code class="language-sql">修改上面例子<span class="token number">3.3</span><span class="token punctuation">.</span><span class="token number">3</span> 每分钟启动事件为每<span class="token number">30</span>秒启动<span class="token keyword">alter</span> event test<span class="token punctuation">.</span>event_minute<span class="token keyword">on</span> scheduleevery <span class="token number">30</span> second<span class="token keyword">do</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> events_list <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'event_now'</span><span class="token punctuation">,</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql">修改上面例子<span class="token number">3.3</span><span class="token punctuation">.</span><span class="token number">3</span> 事件名字为event_second<span class="token keyword">alter</span> event test<span class="token punctuation">.</span>event_minute<span class="token keyword">rename</span> <span class="token keyword">to</span> test<span class="token punctuation">.</span>event_second<span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql">修改上面例子<span class="token number">3.3</span><span class="token punctuation">.</span><span class="token number">3</span> 事件为不活动和再次活动<span class="token keyword">alter</span> event test<span class="token punctuation">.</span>event_second <span class="token keyword">disable</span><span class="token punctuation">;</span><span class="token keyword">alter</span> event test<span class="token punctuation">.</span>event_second <span class="token keyword">enable</span><span class="token punctuation">;</span></code></pre><h2 id="6-删除事件"><a href="#6-删除事件" class="headerlink" title="6 删除事件"></a>6 删除事件</h2><ul><li>如果一个事件不再需要，我们可以使用一条 drop event 语句删除它。使用这条语句我们不需要等到最后一次事件调用。</li></ul><h4 id="6-1-基本语法"><a href="#6-1-基本语法" class="headerlink" title="6.1 基本语法"></a>6.1 基本语法</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DROP</span> EVENT <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> event_name</code></pre><h4 id="6-2-例如"><a href="#6-2-例如" class="headerlink" title="6.2 例如"></a>6.2 例如</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> event <span class="token keyword">if</span> <span class="token keyword">exists</span> event_second<span class="token punctuation">;</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 实践 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java数据类型</title>
      <link href="/2017/09/27/java-shu-ju-lei-xing/"/>
      <url>/2017/09/27/java-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="Java数据类型"><a href="#Java数据类型" class="headerlink" title="Java数据类型"></a>Java数据类型</h2><ul><li>Java中，包含8中基本类型(primitive type)，其中4种整型，2种浮点型，1种用于表示Unicode编码的字符单元的字符类型char，1种用于表示真值的boolean类型。</li></ul><h4 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h4><table><thead><tr><th>类型</th><th>存储需求</th><th>取值范围</th></tr></thead><tbody><tr><td>int</td><td>4字节</td><td>-2 147 483 648(-2^32) ~ 2 147 483 647(2^31-1,正好超过20亿)</td></tr><tr><td>short</td><td>2字节</td><td>-32 768(-2^15) ~ 32 767(2^15-1)</td></tr><tr><td>long</td><td>8字节</td><td>-9 223 372 036 854 775 808(-2^63) ~ 9 223 372 036 854 775 807(2^63-1)</td></tr><tr><td>byte</td><td>1字节</td><td>-128(-2^7) ~ 127(2^7-1)</td></tr></tbody></table><h4 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h4><table><thead><tr><th>类型</th><th>存储需求</th><th>取值范围</th></tr></thead><tbody><tr><td>float</td><td>4字节</td><td>1.4E-45(2^-149) ~ 3.402 823 47E+38(2^128-1)</td></tr><tr><td>double</td><td>8字节</td><td>4.9E-324(2^-1074) ~ 1.797 693 134 862 315 70E+308(2^1024-1)</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无限极分类实现</title>
      <link href="/2017/09/15/wu-xian-ji-fen-lei-shi-xian/"/>
      <url>/2017/09/15/wu-xian-ji-fen-lei-shi-xian/</url>
      
        <content type="html"><![CDATA[<pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">/** * 递归 */</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getTree</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$pk</span> <span class="token operator">=</span> <span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token string">'pid'</span><span class="token punctuation">,</span> <span class="token variable">$child</span> <span class="token operator">=</span> <span class="token string">'child'</span><span class="token punctuation">,</span> <span class="token variable">$root</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$tree</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$data</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">[</span><span class="token variable">$pid</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token variable">$root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//父亲找到儿子</span>            <span class="token variable">$v</span><span class="token punctuation">[</span><span class="token variable">$child</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getTree</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$pk</span><span class="token punctuation">,</span> <span class="token variable">$pid</span><span class="token punctuation">,</span> <span class="token variable">$child</span><span class="token punctuation">,</span> <span class="token variable">$v</span><span class="token punctuation">[</span><span class="token variable">$pk</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$tree</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$v</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$tree</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">/** * 迭代 */</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getTree</span><span class="token punctuation">(</span><span class="token variable">$list</span><span class="token punctuation">,</span> <span class="token variable">$pk</span> <span class="token operator">=</span> <span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token string">'pid'</span><span class="token punctuation">,</span> <span class="token variable">$child</span> <span class="token operator">=</span> <span class="token string">'child'</span><span class="token punctuation">,</span> <span class="token variable">$root</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$tree</span>     <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$packData</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$list</span> <span class="token keyword">as</span> <span class="token variable">$data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$packData</span><span class="token punctuation">[</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token variable">$pk</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$data</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$packData</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">[</span><span class="token variable">$pid</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token variable">$root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//代表跟节点</span>            <span class="token variable">$tree</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token variable">$packData</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//找到其父类</span>            <span class="token variable">$packData</span><span class="token punctuation">[</span><span class="token variable">$val</span><span class="token punctuation">[</span><span class="token variable">$pid</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$child</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token variable">$packData</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$tree</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git版本控制</title>
      <link href="/2017/06/14/ban-ben-kong-zhi/"/>
      <url>/2017/06/14/ban-ben-kong-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="Git-版本控制"><a href="#Git-版本控制" class="headerlink" title="Git 版本控制"></a>Git 版本控制</h1><h3 id="1-Git-的安装-和-基本配置"><a href="#1-Git-的安装-和-基本配置" class="headerlink" title="1.Git 的安装 和 基本配置"></a>1.Git 的安装 和 基本配置</h3><h4 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h4><blockquote><p>Linux 安装</p><blockquote><pre><code>二进制包（在线）yum -y install git    //RedHat系列apt-get git install     //Debian系列源码包（官网下载）</code></pre></blockquote></blockquote><blockquote><p>Windows 安装</p><blockquote><pre><code>Git在Windows使用模拟环境msysgit下载地址：[https://git-for-windows.github.io/](https://git-for-windows.github.io/)注意：如果想让windows作为git服务器则需要搭建ssh服务。</code></pre></blockquote></blockquote><hr><h4 id="1-2-配置"><a href="#1-2-配置" class="headerlink" title="1.2 配置"></a>1.2 配置</h4><blockquote><p>无论 Linux 还是 Windows，安装完成后都要初始化</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config <span class="token punctuation">[</span>--global<span class="token punctuation">]</span> user.name <span class="token string">"Your Name"</span><span class="token function">git</span> config <span class="token punctuation">[</span>--global<span class="token punctuation">]</span> user.email <span class="token string">"your@email.com"</span>中括号内的参数:    --local 本地    --system 系统    --global 全局    无参,则为当前库配置身份</code></pre><h3 id="2-Git-常用操作"><a href="#2-Git-常用操作" class="headerlink" title="2. Git 常用操作"></a>2. Git 常用操作</h3><h4 id="2-1-生成新的版本库"><a href="#2-1-生成新的版本库" class="headerlink" title="2.1. 生成新的版本库"></a>2.1. 生成新的版本库</h4><ol><li>新建空目录</li><li>进入该目录—单击右键—选择 Git Bash Here</li><li>弹出 git 的命令行工具</li><li>初始化该目录为版本仓库,键入 <code>git init</code></li><li>显示 Initialized empty Git repository in xxxxxx</li><li><code>ls -a</code> 查看该目录下出现.git 的隐藏目录,即版本库</li><li>初始化完成</li></ol><h4 id="2-2-添加文件到版本库"><a href="#2-2-添加文件到版本库" class="headerlink" title="2.2.添加文件到版本库"></a>2.2.添加文件到版本库</h4><ol><li><p>新建文件 <code>1.txt</code></p></li><li><p>查看当前版本状态</p><pre><code>git status     #查看当前版本状态</code></pre></li><li><p>红字提示有文件未跟踪(未加入版本控制)</p></li><li><p>在工具内输入以下,添加文件至版本库:</p><pre><code>git add 1.txt# 添加文件至缓存区git commit -m "描述"# 提交文件至版本库git add newfile1 newfile2 ...# 多文件添加git commit -m "描述"# 将缓存区的多次添加一次提交ps:git add .# 添加所有改动过的文件到缓存区git add --all# 添加所有文件到缓存区</code></pre></li></ol><p>5) 执行完后,提示提交完成.</p><p>6) <code>git status</code> 提示<br>   nothing to commit, working directory clean</p><p>7) 至此最简单的添加文件到版本库已完成</p><hr><h4 id="2-3-查看文件修改状态相关"><a href="#2-3-查看文件修改状态相关" class="headerlink" title="2.3.查看文件修改状态相关"></a>2.3.查看文件修改状态相关</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> status<span class="token comment" spellcheck="true"># 查看当前版本状态（是否修改）</span></code></pre><p>修改文件测试以下 :</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">diff</span>            <span class="token comment" spellcheck="true"># 工作区 与 缓存区的区别</span><span class="token function">git</span> <span class="token function">diff</span> --cached   <span class="token comment" spellcheck="true"># 缓存区 与 版本库的区别</span><span class="token function">git</span> <span class="token function">diff</span> HEAD       <span class="token comment" spellcheck="true"># 工作区 与 版本库的区别</span></code></pre><p>Git 日志,分析日志构成 :</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> log<span class="token comment" spellcheck="true"># 查看提交历史</span><span class="token function">git</span> log --oneline<span class="token comment" spellcheck="true"># 以简短的方式查看提交日志</span></code></pre><hr><h4 id="2-4-版本回退"><a href="#2-4-版本回退" class="headerlink" title="2.4. 版本回退"></a>2.4. 版本回退</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> reset --hard HEAD<span class="token comment" spellcheck="true"># 将当前版本重置为HEAD（通常用于清空缓存区,或merge失败回退）</span><span class="token function">git</span> reset --hard HEAD^      <span class="token comment" spellcheck="true"># 回退上一个版本</span><span class="token function">git</span> reset --hard HEAD^^  <span class="token comment" spellcheck="true"># 回退上两个版本</span><span class="token function">git</span> reset --hard HEAD~n  <span class="token comment" spellcheck="true"># 回退上n个版本</span><span class="token function">git</span> reset --hard <span class="token operator">&lt;</span>commitid<span class="token operator">></span><span class="token comment" spellcheck="true"># 回退到指定版本，commitid根据log获取</span></code></pre><hr><h4 id="2-5-行为日志"><a href="#2-5-行为日志" class="headerlink" title="2.5. 行为日志"></a>2.5. 行为日志</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> reflog<span class="token comment" spellcheck="true"># 行为日志,显示所有提交,回滚等..</span><span class="token function">git</span> ls-files<span class="token comment" spellcheck="true"># 显示缓存区的所有文件</span></code></pre><hr><h4 id="2-6-撤销"><a href="#2-6-撤销" class="headerlink" title="2.6. 撤销"></a>2.6. 撤销</h4><blockquote><p>目的：将尚未提交至版本库的修改撤回。</p></blockquote><ul><li>情况一 : 文件修改后尚未添加至缓存区</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout --filename<span class="token comment" spellcheck="true"># 在工作区撤销文件的修改</span></code></pre><ul><li>情况二 : 文件修改已添加至缓存区</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout HEAD <span class="token punctuation">[</span>filename<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 撤回添加至缓存区的修改,不指定filename则撤回所有</span></code></pre><hr><h4 id="2-7-删除"><a href="#2-7-删除" class="headerlink" title="2.7. 删除"></a>2.7. 删除</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">rm</span> index.php<span class="token comment" spellcheck="true"># 删除index.php文件</span><span class="token function">git</span> <span class="token function">rm</span> --cached index.php<span class="token comment" spellcheck="true"># 将index.php文件移出缓存区,但不删除( -r * 递归目录)</span><span class="token function">git</span> <span class="token function">rm</span> -f 1.html<span class="token comment" spellcheck="true"># 将缓存区中的1.html文件移出并删除</span></code></pre><hr><h3 id="3-Git-多人协作"><a href="#3-Git-多人协作" class="headerlink" title="3. Git 多人协作"></a>3. Git 多人协作</h3><h4 id="3-1-得到远程的版本库"><a href="#3-1-得到远程的版本库" class="headerlink" title="3.1. 得到远程的版本库"></a>3.1. 得到远程的版本库</h4><blockquote><p>可以使用两种方式来得到远程版本库:</p></blockquote><ul><li>在某个指定的文件夹下使用,即可得到远端版本库及代码</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token operator">&lt;</span>远端版本库url<span class="token operator">></span> <span class="token operator">&lt;</span>本地存放该库的文件夹名<span class="token operator">></span></code></pre><ul><li>手动添加版本库,并拉取文件</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> init<span class="token comment" spellcheck="true">#初始化本地仓库</span><span class="token function">git</span> remote add <span class="token operator">&lt;</span>remote<span class="token operator">></span> <span class="token operator">&lt;</span>url<span class="token operator">></span><span class="token comment" spellcheck="true"># 添加远程版本库 &lt;remote>可自行取名,默认origin</span><span class="token function">git</span> remote -v<span class="token comment" spellcheck="true"># 查看远程版本库信息</span><span class="token function">git</span> remote show <span class="token operator">&lt;</span>remote<span class="token operator">></span><span class="token comment" spellcheck="true"># 查看指定远程版本库信息</span><span class="token function">git</span> remote remove <span class="token operator">&lt;</span>remote<span class="token operator">></span><span class="token comment" spellcheck="true"># 删除远程remote链接</span><span class="token function">git</span> pull <span class="token operator">&lt;</span>remote<span class="token operator">></span> <span class="token operator">&lt;</span>branch<span class="token operator">></span><span class="token comment" spellcheck="true"># 下载代码及快速合并</span></code></pre><hr><h4 id="3-2-推送分支代码"><a href="#3-2-推送分支代码" class="headerlink" title="3.2. 推送分支代码"></a>3.2. 推送分支代码</h4><p>得到远端版本库后,可以在本地按正常的步骤编辑 :<br>新建或改动文件–&gt;添加至缓存区–&gt;提交到版本库</p><p>此时,要想将本地版本库发给远端,只有 commit 提交是不够的.<br>还需要下面的操作 :</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> push <span class="token operator">&lt;</span>remote<span class="token operator">></span> <span class="token operator">&lt;</span>branch<span class="token operator">></span><span class="token comment" spellcheck="true"># 上传代码及快速合并</span></code></pre><p>执行以上代码,会有报错 : 无法直接推送到远端的主分支</p><p>此时,可以曲线救国,推送自己的分支到远端即可 :</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> push origin master:dev</code></pre><p>此时,推送成功!</p><hr><h3 id="4-Git-分支管理"><a href="#4-Git-分支管理" class="headerlink" title="4.Git 分支管理"></a>4.Git 分支管理</h3><h4 id="4-1-查看版本库分支"><a href="#4-1-查看版本库分支" class="headerlink" title="4.1. 查看版本库分支"></a>4.1. 查看版本库分支</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> branch<span class="token comment" spellcheck="true"># 显示本地分支</span><span class="token function">git</span> branch -a<span class="token comment" spellcheck="true"># 显示所有分支</span><span class="token function">git</span> checkout 分支名/标签名<span class="token comment" spellcheck="true"># 切换到指定分支或标签</span></code></pre><h4 id="4-2-创建分支-删除分支"><a href="#4-2-创建分支-删除分支" class="headerlink" title="4.2. 创建分支/删除分支"></a>4.2. 创建分支/删除分支</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> branch 分支名<span class="token comment" spellcheck="true"># 新建分支</span><span class="token function">git</span> checkout -b dev<span class="token comment" spellcheck="true"># 创建并切换到dev分支</span><span class="token function">git</span> branch -d 分支名<span class="token comment" spellcheck="true"># 删除本地分支 -D 强制删除</span></code></pre><h4 id="4-3-合并分支"><a href="#4-3-合并分支" class="headerlink" title="4.3. 合并分支"></a>4.3. 合并分支</h4><p>要将 B 分支合并到 A 分支里<br>请切换到 A 分支内,合并 B 分支的操作在 A 分支内进行</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> merge 分支名<span class="token comment" spellcheck="true"># 合并分支到当前分支</span></code></pre><h4 id="4-4-解决合并冲突"><a href="#4-4-解决合并冲突" class="headerlink" title="4.4. 解决合并冲突"></a>4.4. 解决合并冲突</h4><blockquote><p>多分支修改同一文件，合并可能出现冲突。冲突部分用&lt;&lt;&lt;===&gt;&gt;&gt;表示</p></blockquote><p>解决方法：<br>先手动修改冲突部分，再次提交即可。</p><hr><h3 id="5-使用代码托管系统"><a href="#5-使用代码托管系统" class="headerlink" title="5. 使用代码托管系统"></a>5. 使用代码托管系统</h3><p>市面上有名的 Git 托管系统 :</p><ul><li>GitHub <a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></li><li>开源中国 <a href="https://git.oschina.net/" target="_blank" rel="noopener">https://git.oschina.net/</a></li></ul><h4 id="5-1-开源中国-生成-SSH-密钥"><a href="#5-1-开源中国-生成-SSH-密钥" class="headerlink" title="5.1. 开源中国 生成 SSH 密钥"></a>5.1. 开源中国 生成 SSH 密钥</h4><p>1). 本地打开 git bash ,<code>cd</code>切换到用户的家目录<br>2). 使用<code>pwd</code>来查看目录是否正确<br>3). 使用 <code>ssh-keygen -t rsa</code> 来生成 SHA256 的 SSH 密钥(按回车确认即可)<br>4). <code>cd .ssh/</code> 切换至 ssh 目录<br>5). <code>ls</code> 查看目录下文件<br>6). <code>cat id_rsa.pub</code> 查看生成的密钥,并复制<br>7). 打开 git@osc 开源中国,登录自己的账户.点选个人资料<br>8). 选择 SSH 公钥<br>9). 在添加公钥界面,将刚刚复制好的密钥粘贴进来,再自己取一个该密钥的名字,以便于区分管理<br>10). 本地新建一个目录,用于拉取远端版本库<br>11). 使用 <code>git init</code>初始化该目录<br>12). 使用<code>git remote add origin &lt;SSH地址&gt;</code> 来添加远程版本库<br>13). 使用<code>git remote -v</code> 来查看远程版本库信息<br>14). 使用<code>git pull origin marster</code>来拉取版本库及代码</p><h4 id="5-2-github-添加-SSH-key"><a href="#5-2-github-添加-SSH-key" class="headerlink" title="5.2. github 添加 SSH key"></a>5.2. github 添加 SSH key</h4><p>1). 运行 git Bash 客户端，输入如下代码：<br><code>$ cd ~/.ssh</code><br><code>$ ls</code><br>这两个命令就是检查是否已经存在 id_rsa.pub 或 id_dsa.pub 文件，如果文件已经存在，那么你可以跳过步骤 2，直接进入步骤 3</p><p>2). 创建一个 SSH key<br><code>$ ssh-keygen -t rsa -C "your_email@example.com"</code><br>代码参数含义：<br>-t 指定密钥类型，默认是 rsa ，可以省略。<br>-C 设置注释文字，比如邮箱。<br>-f 指定密钥文件存储文件名。</p><p>3). 添加你的 SSH key 到 github 上面去<br><code>$ cat ~/.ssh/id_rsa.pub</code></p><p>4). 测试一下该 SSH key 在 git Bash 中输入以下代码<br><code>$ ssh -T git@github.com</code><br>显示类似如下,表示成功:<br><code>Hi username! You've successfully authenticated</code></p><p>5). <code>git clone 远程git仓库地址</code></p><hr><h3 id="6-文件忽略"><a href="#6-文件忽略" class="headerlink" title="6. 文件忽略"></a>6. 文件忽略</h3><p>工作区某些文件不控制版本，可使用.gitignore 文件进行忽略.<br>!(注意, .gitignore 文件 是没有名字的文件.)<br>规则:<br>以斜杠“/”开头表示目录；<br>以星号“*”通配多个字符；<br>以问号“?”通配单个字符<br>以方括号“[]”包含单个字符的匹配列表；<br>以叹号“!”表示不忽略(跟踪)匹配到的文件或目录；</p><p>配置文件是按行从上到下进行规则匹配的，意味着如果前面的规则匹配的范围更大，则后面的规则将不会生效.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 版本控制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> Git </tag>
            
            <tag> 版本控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用命令速查</title>
      <link href="/2017/06/10/git-chang-yong-ming-ling-su-cha/"/>
      <url>/2017/06/10/git-chang-yong-ming-ling-su-cha/</url>
      
        <content type="html"><![CDATA[<h3 id="Git-常用命令速查"><a href="#Git-常用命令速查" class="headerlink" title="Git 常用命令速查"></a>Git 常用命令速查</h3><ul><li>master 默认主分支</li><li>dev 默认开发分支</li></ul><blockquote><p>创建版本库</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> init<span class="token comment" spellcheck="true"># 初始化本地git版本库（创建新仓库）</span><span class="token function">git</span> config --global user.name <span class="token string">"xxx"</span><span class="token comment" spellcheck="true"># 配置用户名</span><span class="token function">git</span> config --global user.email <span class="token string">"xxx@xxx.com"</span><span class="token comment" spellcheck="true"># 配置邮件</span><span class="token function">git</span> config --list<span class="token comment" spellcheck="true">#查看当前配置列表</span><span class="token function">git</span> clone <span class="token operator">&lt;</span>url<span class="token operator">></span><span class="token comment" spellcheck="true"># clone远程仓库</span></code></pre><blockquote><p>修改、提交、删除</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> add index.php<span class="token comment" spellcheck="true"># 添加index.php文件到缓存区</span><span class="token function">git</span> add <span class="token keyword">.</span><span class="token comment" spellcheck="true"># 添加所有改动过的文件到缓存区</span><span class="token function">git</span> add --all<span class="token comment" spellcheck="true"># 添加所有文件到缓存区</span><span class="token function">git</span> commit<span class="token comment" spellcheck="true"># 提交缓存区内的文件(回车后需要键入描述:wq保存退出)</span><span class="token function">git</span> commit -m <span class="token string">"描述"</span><span class="token comment" spellcheck="true"># 提交缓存区内的文件,并提供描述</span><span class="token function">git</span> commit -am <span class="token string">'描述'</span><span class="token comment" spellcheck="true"># 将add和commit合为一步</span><span class="token function">git</span> commit --amend -m <span class="token string">'xxx'</span><span class="token comment" spellcheck="true"># 合并最后一次提交(用于反复修改)</span><span class="token function">git</span> <span class="token function">rm</span> index.php<span class="token comment" spellcheck="true"># 删除index.php文件</span><span class="token function">git</span> <span class="token function">rm</span> --cached index.php<span class="token comment" spellcheck="true"># 将index.php文件移出缓存区,但不删除( -r * 递归目录)</span><span class="token function">git</span> <span class="token function">rm</span> -f 1.html<span class="token comment" spellcheck="true"># 将缓存区中的1.html文件移出并删除</span></code></pre><blockquote><p>查看</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> status<span class="token comment" spellcheck="true"># 查看当前版本状态（是否修改）</span><span class="token function">git</span> <span class="token function">diff</span><span class="token comment" spellcheck="true"># 查看所有添加到缓存区的变更(工作区与版本库的区别)</span><span class="token function">git</span> <span class="token function">diff</span> index.php<span class="token comment" spellcheck="true"># 查看工作区文件和库文件区别</span><span class="token function">git</span> <span class="token function">diff</span> --cached<span class="token comment" spellcheck="true"># 查看所有已添加到缓存区,但还未commit的变更(缓存区与版本库的区别)</span><span class="token function">git</span> log<span class="token comment" spellcheck="true"># 查看提交历史</span><span class="token function">git</span> log --oneline<span class="token comment" spellcheck="true"># 以简短的方式查看提交日志</span><span class="token function">git</span> reflog<span class="token comment" spellcheck="true"># 行为日志,显示所有提交,回滚等..</span><span class="token function">git</span> ls-files<span class="token comment" spellcheck="true"># 显示缓存区的所有文件</span></code></pre><blockquote><p>回退 与 撤销</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> reset --hard HEAD<span class="token comment" spellcheck="true"># 将当前版本重置为HEAD（通常用于merge失败回退）</span><span class="token function">git</span> reset --hard HEAD^      <span class="token comment" spellcheck="true"># 回退上一个版本</span><span class="token function">git</span> reset --hard HEAD^^  <span class="token comment" spellcheck="true"># 回退上两个版本</span><span class="token function">git</span> reset --hard HEAD~n  <span class="token comment" spellcheck="true"># 回退上n个版本</span><span class="token function">git</span> reset --hard <span class="token operator">&lt;</span>commitid<span class="token operator">></span><span class="token comment" spellcheck="true"># 回退指定版本，commitid根据log获取</span><span class="token function">git</span> checkout --filename<span class="token comment" spellcheck="true"># 在工作区撤销文件的修改</span><span class="token function">git</span> checkout HEAD <span class="token punctuation">[</span>filename<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 撤回添加至缓存区的修改,不指定filename则撤回所有</span></code></pre><blockquote><p>分支操作</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> pull origin master<span class="token comment" spellcheck="true"># 获取远程分支master并merge到当前分支</span><span class="token function">git</span> branch<span class="token comment" spellcheck="true"># 显示本地分支</span><span class="token function">git</span> branch -a<span class="token comment" spellcheck="true"># 显示所有分支</span><span class="token function">git</span> checkout 分支名/标签名<span class="token comment" spellcheck="true"># 切换到指定分支或标签</span><span class="token function">git</span> branch 分支名<span class="token comment" spellcheck="true"># 新建分支</span><span class="token function">git</span> branch -d 分支名<span class="token comment" spellcheck="true"># 删除本地分支 -D 强制删除</span></code></pre><blockquote><p>远程协作</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> remote add <span class="token operator">&lt;</span>remote<span class="token operator">></span> <span class="token operator">&lt;</span>url<span class="token operator">></span><span class="token comment" spellcheck="true"># 添加远程版本库</span><span class="token function">git</span> remote -v<span class="token comment" spellcheck="true"># 查看远程版本库信息</span><span class="token function">git</span> remote show <span class="token operator">&lt;</span>remote<span class="token operator">></span><span class="token comment" spellcheck="true"># 查看指定远程版本库信息</span><span class="token function">git</span> remote remove <span class="token operator">&lt;</span>remote<span class="token operator">></span><span class="token comment" spellcheck="true"># 删除远程remote链接</span><span class="token function">git</span> remote <span class="token function">rename</span> <span class="token operator">&lt;</span>old<span class="token operator">></span> <span class="token operator">&lt;</span>new<span class="token operator">></span><span class="token comment" spellcheck="true"># 重命名远程链接名</span><span class="token function">git</span> pull <span class="token operator">&lt;</span>remote<span class="token operator">></span> <span class="token operator">&lt;</span>branch<span class="token operator">></span><span class="token comment" spellcheck="true"># 下载代码及快速合并</span><span class="token function">git</span> push <span class="token operator">&lt;</span>remote<span class="token operator">></span> <span class="token operator">&lt;</span>branch<span class="token operator">></span><span class="token comment" spellcheck="true"># 上传代码及快速合并</span><span class="token function">git</span> merge origin master<span class="token comment" spellcheck="true"># 将本地的远端库合并</span><span class="token function">git</span> fetch origin<span class="token comment" spellcheck="true"># 将远端库获取本地但不合并</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">find</span> <span class="token keyword">.</span><span class="token operator">|</span><span class="token function">xargs</span> <span class="token function">grep</span> -ri <span class="token string">"&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span> -l<span class="token comment" spellcheck="true"># 查询文件内容</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 版本控制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> Git </tag>
            
            <tag> 版本控制 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
